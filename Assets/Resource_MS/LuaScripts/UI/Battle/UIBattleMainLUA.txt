--界面
---@class UIBattleMainLUA:LUAUIBase
UIBattleMainLUA=LUAUIBase:new({
	
	});

function UIBattleMainLUA:Open(params)
	self:AddUIEventListener()
	self:AddEventListener()
	self:Init(params);
	self:refreshPanel()
end
function UIBattleMainLUA:Init(params)
	self:initParams(params)
	self:initComponent()
	self:initHeadList()
	self:initSkillList()
	self:startUpdate()
end

function UIBattleMainLUA:initParams(params)
	self._battleTeam = params.battleTeam
	---@type FrameControl
	self._frameControl = params.frameControl
    self._team_self = params.battleData.team_self
	self._team_enemy = params.battleData.team_enemy
	-- todo 映射表 映射entity 对应得血条和底部技能item得Index
	self._battleSpeed = params.battleData.battleSpeed
	self._isAutoBattle = params.battleData.isAutoBattle
	self._map_index = {}
	---@type UIBattleHeadItem[][]
	self._list_headItem = {}
	---@type UIBattleSkillItem[]
	self._list_skillItem = {}
end

function UIBattleMainLUA:initComponent()
	self._rect_modelRoot = self.go_modelRoot.transform:GetComponent("RectTransform")
end
--ui组件添加事件
function UIBattleMainLUA:AddUIEventListener( )
	self:AddUIEvent("onclick", self.btn_pause.gameObject, self.onPauseClick)
	self:AddUIEvent("onclick", self.btn_automatic.gameObject, self.onAutomaticClick)
	self:AddUIEvent("onclick", self.btn_speed.gameObject, self.onSpeedClick)
end
--模块添加全局事件
function UIBattleMainLUA:AddEventListener( )
	-- self:AddEvent("EventStringKey", self.EventHandle);
	self._event_Obj_1 =  EventManager:AddListener(EventType.Event_BigSkillCanRelease,self.onSkillCanFire,self)
	self._event_Obj_2 =  EventManager:AddListener(EventType.Event_BigSkillCannotRelease,self.onSkillCannotFire,self)
end
--模块移除全局事件
function UIBattleMainLUA:RemoveEventListener( )
	-- self:RemoveEvent("EventStringKey", self.EventHandle);
	EventManager:RemoveListener(EventType.Event_BigSkillCanRelease,self._event_Obj_1)
	EventManager:RemoveListener(EventType.Event_BigSkillCannotRelease,self._event_Obj_2)
end
function UIBattleMainLUA:OnCloseMe()
	if(self.view~=nil)then
		if(self.view.isUIMonoItem)then
			self:RemoveItem(self);
		else
			self:CloseUI("UIBattleMain")
		end
	end
end
function UIBattleMainLUA:OnDestroy()
	self:RemoveEventListener()
	self:stopSchedule()

	UIBattleMainLUA = nil;
end

function UIBattleMainLUA:onPauseClick()
	self._frameControl:disPatchEventMsg(EventType.Event_Battle_ClientHandle_PauseBattle)
end

function UIBattleMainLUA:onAutomaticClick()
	self._isAutoBattle = not self._isAutoBattle
	self._frameControl:disPatchEventMsg(EventType.Event_Battle_ClientHandle_ClickAutoBattle,{isAutoBattle = self._isAutoBattle})
	self:setAutoBattleTxt()
end

function UIBattleMainLUA:onSpeedClick()
	self._battleSpeed = self._battleSpeed + 1
	self._battleSpeed = self._battleSpeed <= 3 and self._battleSpeed or 1
	self._frameControl:disPatchEventMsg(EventType.Event_Battle_ClientHandle_ClickChangeSpeed,{battleSpeed = self._battleSpeed})
	self:setBattleSpeedTxt()
end

function UIBattleMainLUA:initHeadList()
	local func = function(type,teamMap)
		self._list_headItem[type] = self._list_headItem[type] or {}
		local tmpIndex = 1
		for pos, data in pairs(teamMap) do
			if self._list_headItem[type][tmpIndex] == nil then
				local obj = UIUtils:createItem(self.go_heroItem,self.go_modelRoot)
				local headItem = UIBattleHeadItem:new(obj.transform,self._battleTeam,self._rect_modelRoot)
				self._list_headItem[type][tmpIndex] = headItem
			end
			self._list_headItem[type][tmpIndex]:setData(type,pos,data)
		end
	end
	func(Enum.SetUpTeamEnum.TeamPos.left,self._team_self.teamMap)
	func(Enum.SetUpTeamEnum.TeamPos.right,self._team_enemy.teamMap)
end

function UIBattleMainLUA:initSkillList()
	self._list_skillItem = self._list_skillItem or {}
	local tmpIndex = 1
	for pos, data in pairs(self._team_self.teamMap) do
		if self._list_skillItem[tmpIndex] == nil then
			local obj = UIUtils:createItem(self.go_skillHeadItem,self.go_skillroot)
			local skillItem = UIBattleSkillItem:new(obj.transform,self._battleTeam,self)
			self._list_skillItem[tmpIndex] = skillItem
		end
		self._list_skillItem[tmpIndex]:setData(pos,data)
	end
end

function UIBattleMainLUA:startUpdate()
	self._scheduleUpdate = TimerScheduler:schedulePerFrame(function()
		self:update()
	end)
end

function UIBattleMainLUA:stopSchedule()
	if self._scheduleUpdate then
		TimerScheduler:removeSchedule(self._scheduleUpdate)
		self._scheduleUpdate = nil
	end
end

function UIBattleMainLUA:update()
	for type, itemList in pairs(self._list_headItem ) do
		for posIndex, item in pairs(itemList) do
			if item and item._isActive == true and item.update then
				item:update()
			end
		end
	end
end

function UIBattleMainLUA:onSkillCanFire(data)
	for i, skillItem in pairs(self._list_skillItem) do
		if skillItem and skillItem._isActive and skillItem._posIndex == data.initIndex then
			skillItem:setSkillConjure(true)
		end
	end
end

function UIBattleMainLUA:onSkillCannotFire(data)
	for i, skillItem in pairs(self._list_skillItem) do
		if skillItem and skillItem._isActive and skillItem._posIndex == data.initIndex then
			skillItem:setSkillConjure(false)
		end
	end
end

function UIBattleMainLUA:refreshPanel()
	self:setAutoBattleTxt()
	self:setBattleSpeedTxt()
end

function UIBattleMainLUA:setAutoBattleTxt()
   local tag = self._isAutoBattle and TranslateDic.UI_BattleMain_autoBattle or TranslateDic.UI_BattleMain_manualOperationBattle
	self.m_tmptxt_auto.text = StringGet:get(tag)
end

function UIBattleMainLUA:setBattleSpeedTxt()
	self.tmptxt_speed.text = StringGet:get(UIUtils:battleSpeedTxtTurn(self._battleSpeed))
end

return UIBattleMainLUA
