--界面
---@class UISetUpTeamLUA:LUAUIBase
UISetUpTeamLUA=LUAUIBase:new({
	  _items = {}
	});

function UISetUpTeamLUA:Open(param)
	self:AddUIEventListener()
	self:AddEventListener()
	self:Init(param);
end

function UISetUpTeamLUA:Init(param)
    self:initParams(param)
	self:initComponent()
	self:initGridList()
	self:tryInitTeamModels()
	self:initList()
	self:startUpdate()
end

function UISetUpTeamLUA:initParams(param)
	self._battleTimes = param.battleTimes
	self._teamYpe = param.teamType
	self._teamData = param.data

    --Logger.ErrorTable(self._teamData)

	self._teamData_self = param.data.team_self
	self._teamData_enemy = param.data.team_enemy

	---@type BattleTeam
	self._battleTeam = param.battleTeam
	self._gridList = {}
	self._modelList = {}
	self._allHeroList = HeroProxy:getAllHeroListByCombat()
	-----@type SetUpTeamNode
	--self._node = param.node

end

--ui组件添加事件
function UISetUpTeamLUA:AddUIEventListener( )
	self:AddUIEvent("onclick", self.btn_close.gameObject, self.OnCloseClick);
	self:AddUIEvent("onclick", self.btn_battle.gameObject, self.OnBattleClick)
end
--模块添加全局事件
function UISetUpTeamLUA:AddEventListener( )
	-- self:AddEvent("EventStringKey", self.EventHandle);
	self._event_Obj =  EventManager:AddListener(EventType.Event_Battle_TeamLoadFinish,self.onTeamLoadFinish,self)
end
--模块移除全局事件
function UISetUpTeamLUA:RemoveEventListener( )
	-- self:RemoveEvent("EventStringKey", self.EventHandle);
	EventManager:RemoveListener(EventType.Event_Battle_TeamLoadFinish,self._event_Obj)
end

function UISetUpTeamLUA:OnCloseMe()
	if(self.view~=nil)then
		if(self.view.isUIMonoItem)then
			self:RemoveItem(self);
		else
			self:CloseUI("UISetUpTeam")
		end
	end
end
function UISetUpTeamLUA:OnDestroy()
	self:RemoveEventListener()
	UISetUpTeamLUA = nil;
end

function UISetUpTeamLUA:startUpdate()
	self._scheduleUpdate = TimerScheduler:schedulePerFrame(function()
		self:update()
	end)
end

function UISetUpTeamLUA:stopSchedule()
	if self._scheduleUpdate then
		TimerScheduler:removeSchedule(self._scheduleUpdate)
		self._scheduleUpdate = nil
	end
end

function UISetUpTeamLUA:update()
	if self._modelList and self._modelList[Enum.SetUpTeamEnum.TeamPos.left] then
		for i, item in pairs(self._modelList[Enum.SetUpTeamEnum.TeamPos.left]) do
			if item and item.update then
				item:update()
			end
		end
	end
end

function UISetUpTeamLUA:OnBattleClick()
	-- todo 保存战斗阵型
	--EventManager:Dispatch(EventType.Event_GoBattle)
	--self:OnCloseMe()
	self._node:onLeave()
end

function UISetUpTeamLUA:OnCloseClick()
	-- todo 关闭
	--EventManager:Dispatch(EventType.Event_CloseSetUpView)
	self:OnCloseMe()
	BattleProxy:ExitBattle()
end

function UISetUpTeamLUA:initComponent()

	self._rect_gridRoot = self.go_gridRoot.transform:GetComponent("RectTransform")
	self._rect_modelRoot = self.go_modelRoot.transform:GetComponent("RectTransform")

    self._clazz_left = self:getTopClazz(Enum.SetUpTeamEnum.TeamPos.left,self.btn_relation_l, self.img_relation_t_l,
			self.img_relation_l_l,self.img_relation_c_l,self.img_relation_r_l,self.img_relation_b_l)
	self._clazz_left = self:getTopClazz(Enum.SetUpTeamEnum.TeamPos.right,self.btn_relation_r, self.img_relation_t_r,
			self.img_relation_l_r,self.img_relation_c_r,self.img_relation_r_r,self.img_relation_b_r)


	---注册回调事件
	self.item_hero:RegisterInitFunction(function (item)
		self:initItem(item)
	end)
	self.item_hero:RegisterUpdataFunction(function (item,index)
		self:updateData(item,index)
	end)
end

function UISetUpTeamLUA:getTopClazz(type,btn_relation,img_t,img_l,img_c,img_r,img_b)
	local tmp = {}
	tmp._type = type
	tmp._btn_relation = btn_relation
	tmp._img_t = img_t
	tmp._img_l = img_l
	tmp._img_c = img_c
	tmp._img_r = img_r
	tmp._img_b = img_b
	self:AddUIEvent("onclick", tmp._btn_relation.gameObject, function()
		self:onClickRelation(tmp._type)
	end)
end

function UISetUpTeamLUA:onClickRelation(type)
   Logger.error("onClickRelation :: type = ",type)
end

---初始化 item组件
function UISetUpTeamLUA:initItem(item)
	--logError(item:GetHashCode())
	---通过c#对象唯一标识 建立与lua item对象之间的关系
	self._items[tostring(item:GetHashCode())] = UIHeroItemLUA:new(item.transform)

end
---更新某个item 数据
function UISetUpTeamLUA:updateData(item,index)
	local index_l = index + 1
	self._items[tostring(item:GetHashCode())]:setData(index_l,self._allHeroList[index_l])
end

function UISetUpTeamLUA:initList()
	---用lua数组来保存一对一的c#item对象和lua item对象的关联
	self._items={}
	---初始化列表
    local count = self._allHeroList and #self._allHeroList or 0
	self.listView_heroList:SetCount(count)
	self.listView_heroList:ReLoad()
end


function UISetUpTeamLUA:initGridList()
	self._gridList[Enum.SetUpTeamEnum.TeamPos.left] = {}
	for index, pos in pairs(BattleConstant.HeroInitPos_Main.left) do
		self._gridList[Enum.SetUpTeamEnum.TeamPos.left][index] =
		UISetUpTeamGridItem:new(index,pos,Enum.SetUpTeamEnum.TeamPos.left, self._battleTeam,self._teamData_self.teamMap[index] == nil)
	end

	self._gridList[Enum.SetUpTeamEnum.TeamPos.right] = {}
	for index, pos in pairs(BattleConstant.HeroInitPos_Main.right) do
		self._gridList[Enum.SetUpTeamEnum.TeamPos.right][index] =
		UISetUpTeamGridItem:new(index,pos,Enum.SetUpTeamEnum.TeamPos.right, self._battleTeam,self._teamData_enemy.teamMap[index] == nil)
	end

end

function UISetUpTeamLUA:onTeamLoadFinish(battleTimes)
	if battleTimes and battleTimes == self._battleTimes then
		self:tryInitTeamModels()
	end
end

function UISetUpTeamLUA:tryInitTeamModels()
	if not (self._battleTeam and self._battleTeam._loadingFinish) then return end

	self._modelList[Enum.SetUpTeamEnum.TeamPos.right] = {}
	for index, data in pairs(self._teamData_enemy.teamMap) do
		local obj = UIUtils:createItem(self.go_heroDragItem,self.go_modelRoot)
		local dragItem = UISetUpDragItem:new(obj.transform,index,self._battleTeam,self._rect_modelRoot,function(node,pos,index)
			self:onTeamModelDragEnd(node,pos,index)
		end)
		dragItem:setData(data,Enum.SetUpTeamEnum.TeamPos.right) -- ,self:getModelUIInitPos(Enum.SetUpTeamEnum.TeamPos.right,index)
		dragItem:setIsBelongScroll(false)
		table.insert(self._modelList[Enum.SetUpTeamEnum.TeamPos.right],dragItem)
	end
	self._modelList[Enum.SetUpTeamEnum.TeamPos.left] = {}
	for index, data in pairs(self._teamData_self.teamMap) do
		local obj = UIUtils:createItem(self.go_heroDragItem,self.go_modelRoot)
		local dragItem = UISetUpDragItem:new(obj.transform,index,self._battleTeam,self._rect_modelRoot,function(node,pos,index)
			self:onTeamModelDragEnd(node,pos,index)
		end)
		dragItem:setData(data,Enum.SetUpTeamEnum.TeamPos.left) --,self:getModelUIInitPos(Enum.SetUpTeamEnum.TeamPos.left,index)
		dragItem:setIsBelongScroll(false)
		--self._modelList[Enum.SetUpTeamEnum.TeamPos.left][index] = dragItem
		table.insert(self._modelList[Enum.SetUpTeamEnum.TeamPos.left],dragItem)

	end
end
---@param node UISetUpDragItem
function UISetUpTeamLUA:onTeamModelDragEnd(node,pos,dragIndex)
	local tmpIndex = dragIndex
	for gridIndex, gridNode in pairs(self._gridList[Enum.SetUpTeamEnum.TeamPos.left]) do
		local dic = Vector3_CS.Distance(pos,gridNode._pos)

		if dic < 2 then
			tmpIndex = gridIndex
           break
		end
	end
	---@type UISetUpTeamGridItem
	local targetGrid = self._gridList[Enum.SetUpTeamEnum.TeamPos.left][tmpIndex]
	if tmpIndex ~= dragIndex then
		---@type UISetUpTeamGridItem
		local changeGrid = self._gridList[Enum.SetUpTeamEnum.TeamPos.left][dragIndex]
		if not targetGrid._isNull then
			---@type UISetUpDragItem
			local changeNode = self:getDragItemByIndex(tmpIndex)
			if changeNode == nil then
				Logger.Error("检查 逻辑 此处不应该为空  tmpIndex == ",tmpIndex)
			else
				changeNode:toTarget(changeGrid._pos,dragIndex)
			end
		else
			changeGrid:pop()
		end
	end
	node:toTarget(targetGrid._pos,tmpIndex)
	targetGrid:put()
end

function UISetUpTeamLUA:getDragItemByIndex(index)
	local selfModelList = self._modelList[Enum.SetUpTeamEnum.TeamPos.left]
	for i, v in pairs(selfModelList) do
		if v and v._index == index then
            return v
		end
	end
	return nil
end

return UISetUpTeamLUA