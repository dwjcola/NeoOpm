 ---------------------------------------------
-- File Name:    UIMgr.txt
-- Author:       wangguoqing
-- Create Date:  2022/02/24
 ---------------------------------------------

---@class UIMgr @UI管理器
UIMgr = class()
 --单例
 UIMgr.m_Instance=nil
 UIMgr.GetInstance=function()
     if nil==UIMgr.m_Instance then UIMgr.m_Instance= UIMgr.New() end
     return UIMgr.m_Instance;
 end
 
--关闭界面后缓存时间过期后卸载界面
 local destroyWaitTimer=20
 local closePanelOffset=CS.UnityEngine.Vector3(5000,0,0)
 local Vector3Zero=CS.UnityEngine.Vector3(0,0,0)

 function UIMgr:initialize()
     -- 界面容器
     self.__panels = {}
     self.__groups={}
     self.__destroyWaitPanels={}
     -- ui root canvas
     self.canvas=nil
     self.rectTransform=nil
     --ui camera
     self.uiCam=nil
     
     return self
 end
 
 function UIMgr:Init()
    local canvasObj= GameObject.Find("UI Form Instances")
    if canvasObj==nil then
        err("UIMgr:Init::::canvas is not find!")
        return
    end
   --  GameObject.DontDestroyOnLoad(canvasObj)
    self.canvas=canvasObj:GetComponent("Canvas")
    self.rectTransform=canvasObj:GetComponent("RectTransform")
    self.uiCam=   self.canvas.worldCamera
    local rectTransform=self.canvas.gameObject:GetComponent("RectTransform")
    print("self.uiCam:::",self.uiCam,"  self.canvas:",self.canvas)
    -- Logger.Error(self.uiCam)

    self.__groups[ui.UIGroup.Main]=Stack.New()
    self.__groups[ui.UIGroup.Default]=Stack.New()
    self.__groups[ui.UIGroup.Reminder]=Stack.New()
    self.__groups[ui.UIGroup.Guide]=Stack.New()
 end

 
 function UIMgr:LoadUIASyncCallBack(prefab,handle, UIInfo)
    log("UIMgr:LoadUIASyncCallBack:: prefab"..tostring(prefab).."   "..tostring(self))
    if prefab==nil then
        err("UIMgr:LoadUIASyncCallBack:: panel prefab is nil!! panelId::"..UIInfo.config.Id.."  assetPath::"..UIInfo.assetPath)
        return
    end
    local obj=CS.UnityEngine.GameObject.Instantiate(prefab)
    local rectTransform=obj:GetComponent("RectTransform")
    if not UIInfo.isChild then
        local groupId=UIInfo.config.Group
        -- self.__groups[groupId]
        if groupId<0 then
            err("groupId获取失败：groupId:"..groupId.."  UIGroupName:"..UIInfo.config.UIGroupName.." panelId"..UIInfo.config.Id)
            return
        end
        local groupStack= self.__groups[groupId]
        local order= self:GetGroupNextOrder(groupId)
        UIInfo.groupId=groupId
        UIInfo.order=order

        groupStack:Push(UIInfo)
    end

    UIInfo.rectTransform=rectTransform
    UIInfo.show=true
    
    -- log(tostring(UIInfo)) 
    log(tostring(UIInfo.panelId))
    -- log(tostring(UIInfo.rectTransform)) 
    local luaObj= ui[UIInfo.panelId].New(UIInfo)
    UIInfo.luaObj =luaObj
    
    luaObj:OnInit(UIInfo.param)
    
    luaObj:OnShow(UIInfo.param)

     if UIInfo.afterCallback~=nil then
         if UIInfo.afterObj then
            UIInfo.afterCallback(UIInfo.afterObj,UIInfo.param)
            UIInfo.afterObj=nil
         else
            UIInfo.afterCallback(UIInfo.param)
         end
         UIInfo.afterCallback=nil
         UIInfo.param=nil
     end
     
 
 end
 
 
 --panelId:ui的唯一Id
 --param:回调方法的参数及打开界面的参数
 --afterCallback:回调方法
 --afterObj:afterCallback的依赖对象
 function UIMgr:OpenPanel(panelId, param,afterCallback,afterObj)
     log("ui.UIMgr:OpenPanel:",panelId)
 --    TimeDict[panelId]=Time.realtimeSinceStartup
    local UIInfo
    UIInfo=self.__panels[panelId]
     if UIInfo~=nil then
         log("ui.UIMgr:OpenPanel:界面打开中或者已经打开")
         if not UIInfo.show then
            UIInfo.show=true
            UIInfo.rectTransform.localPosition=Vector3Zero
            UIInfo.luaObj:OnShow(param)
            return
         end
         return
     end

     -- 界面配置
     local config= TPanel[panelId]
     if nil == config then
        -- 界面配置不存在
        err("panel config is not exist,please check TPanel config!!! panelId:"..panelId)
        return
     end

     -- 资源
     local assetPath="Assets/Resource_MS/UI/UIForms/"..config.AssetName..".prefab"
     log("assetPath::"..assetPath)

     UIInfo={}
     UIInfo.panelId=config.Id
     UIInfo.superPanelId=nil
     UIInfo.superUIInfo=nil
     UIInfo.config=config
     UIInfo.assetHandle=nil
     UIInfo.afterCallback=afterCallback
     UIInfo.afterObj=afterObj
     UIInfo.param=param
     UIInfo.rectTransform=nil
     UIInfo.assetPath=assetPath;
     UIInfo.order=0
     UIInfo.parent=self.rectTransform
     UIInfo.luaObj=nil
     UIInfo.groupId=-1
     UIInfo.show=true
     UIInfo.curTimer=0
     UIInfo.isChild=false
     UIInfo.childItems=nil

     self.__panels[config.Id]=UIInfo

     UIInfo.assetHandle=  AssetUtil.LoadAsync(assetPath,self.LoadUIASyncCallBack,UIInfo,self)
    --  print(UIInfo.assetHandle)
     print("open panel await ...");
 end
 

 -- 只需要加载，不需要调用卸载
 -- afterCallback(callerPanel,param)
 function UIMgr:OpenItem(panelId, param,afterCallback,callerPanel,parent)
    log("ui.UIMgr:OpenItem:",panelId)

    if callerPanel == nil then
        err("callerPanel is nil ! 该对象必须是当前调用界面的对象，且是afterCallback的self！！")
        return 
    end

    -- if self.__panels[panelId]~=nil then
    --     log("ui.UIMgr:OpenItem:item 打开中或者已经打开")
    --     return
    -- end

     -- 界面配置
     local config= TPanel[panelId]
     if nil == config then
        -- 界面配置不存在
        err("panel config is not exist,please check TPanel config!!! panelId:"..panelId)
        return
     end
     

     -- 资源
     local assetPath="Assets/Resource_MS/UI/UIForms/"..config.AssetName..".prefab"
     log("assetPath::"..assetPath)
     


     local UIInfo={}
     UIInfo.panelId=panelId
     UIInfo.superPanelId=callerPanel.panelId
     UIInfo.superUIInfo=callerPanel.__UIInfo
     UIInfo.config=config
     UIInfo.assetHandle=nil
     UIInfo.afterCallback=afterCallback
     UIInfo.afterObj=callerPanel
     UIInfo.param=param
     UIInfo.rectTransform=nil
     UIInfo.assetPath=assetPath;
     UIInfo.order=0
     UIInfo.parent=parent
     UIInfo.luaObj=nil
     UIInfo.groupId=-1
     UIInfo.show=true
     UIInfo.curTimer=0
     UIInfo.isChild=true
     UIInfo.childItems=nil

    --  self.__panels[config.Id]=UIInfo
     local superUIInfo= self.__panels[UIInfo.superPanelId]
     superUIInfo.childItems=superUIInfo.childItems or {}
     table.insert(superUIInfo.childItems,UIInfo)
     UIInfo.assetHandle=  AssetUtil.LoadAsync(assetPath,self.LoadUIASyncCallBack,UIInfo,self)
     print(UIInfo.assetHandle)
     print("open panel await ...");

 end

--  function UIMgr:BindItem(itemRectTransform,parent)
    
--  end


 function UIMgr:ClosePanel(panelId, destroyImmediate)
     warn("UIMgr:ClosePanel:",panelId)
     local UIInfo= self.__panels[panelId]
    if UIInfo == nil then
        err("UIInfo is nil! panelId:"..panelId )
        return
    end
    UIInfo.show=false
    if UIInfo.luaObj and UIInfo.luaObj.OnClose then
        UIInfo.luaObj:OnClose()
    end
    
    if destroyImmediate then
        self:DestroyPanel(UIInfo)
    else
        log("UIMgr:ClosePanel add to destroyWaitPanels wait time:",panelId)
        UIInfo.rectTransform.localPosition=closePanelOffset;        
        -- UIInfo.rectTransform.anch
        table.insert(self.__destroyWaitPanels,UIInfo)
    end
 end


 function UIMgr:DestroyPanel(UIInfo)
    log("UIMgr:DestroyPanel::",UIInfo.panelId)
    self:RemovePanelFromGroup(UIInfo)
    self.__panels[UIInfo.panelId]=nil
    UIInfo.luaObj:OnDestroy()
    UIInfo.luaObj:Finalize()

    GameObject.Destroy(UIInfo.rectTransform.gameObject)
    AssetUtil.Release(UIInfo.assetHandle)
    if UIInfo.childItems then
        for index, _UIInfo in ipairs(UIInfo.childItems) do
            AssetUtil.Release(_UIInfo.assetHandle)
        end
    end

 end

function UIMgr:RemovePanelFromGroup(UIInfo)
    local groupStack = self.__groups[UIInfo.groupId]
    if groupStack:Seek() == UIInfo then
        groupStack:Remove()
        return
    end
    log("栈顶元素不是要删除的panel！ panelId:"..UIInfo.Id)
    local count=groupStack:Count()
    for i = count-1, 0,-1 do
        -- body
        if groupStack.Stack[i]== UIInfo then
            groupStack:RemoveByIndex(i)
            break
        end
    end
end



function UIMgr:GetGroupId(UIGroupName)
    if UIGroupName== "Main" then
        return ui.UIGroup.Main
    end
    if UIGroupName== "Default" then
        return ui.UIGroup.Default
    end
    if UIGroupName== "Reminder" then
        return ui.UIGroup.Reminder
    end
    if UIGroupName== "Guide" then
        return ui.UIGroup.Guide
    end

    err("没有找到UIGroup ::UIGroupName:"..UIGroupName)
    return -1
end

function UIMgr:GetGroupNextOrder(groupId)
    local groupStack= self.__groups[groupId]
    if(groupStack:Count()==0) then
        return groupId*10000+100*0
    else
        local UIInfo= groupStack:Seek()
        return UIInfo.order+100
    end
end


function UIMgr:Update(deltaTime)
 
    for k,UIInfo  in pairs(self.__panels) do
        if UIInfo and UIInfo.show and UIInfo.luaObj and UIInfo.luaObj.Update then
            UIInfo.luaObj:Update(deltaTime)
            if UIInfo.childItems then
                for _, _UIInfo in ipairs(UIInfo.childItems) do
                    if _UIInfo.luaObj.Update then
                        _UIInfo.luaObj:Update(deltaTime)
                    end
                end
            end            
        end
    end
 end
 
 function UIMgr:LateUpdate(deltaTime)
    
    for k,UIInfo  in pairs(self.__panels) do
        if UIInfo and UIInfo.show and UIInfo.luaObj and UIInfo.luaObj.LateUpdate then
            UIInfo.luaObj:LateUpdate(deltaTime)
        end
    end
    
    for i = #self.__destroyWaitPanels, 1,-1 do
        local UIInfo=self.__destroyWaitPanels[i]

        if UIInfo.show then
            table.remove(self.__destroyWaitPanels,i)
        else
            UIInfo.curTimer = UIInfo.curTimer+deltaTime
            -- log("UIMgr:ClosePanel add to destroyWaitPanels wait time:",UIInfo.panelId," curTimer:",UIInfo.curTimer)
            if UIInfo.curTimer >= destroyWaitTimer then
                table.remove(self.__destroyWaitPanels,i)
                self:DestroyPanel(UIInfo)
            end
        end
    end

 end
function UIMgr:Release()
    UIMgr.m_Instance=nil
end