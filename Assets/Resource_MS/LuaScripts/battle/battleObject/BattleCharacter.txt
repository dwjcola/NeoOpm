---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/29 11:39
---@class BattleCharacter:SimpleClassUtil
local BattleCharacter = SimpleClassUtil:class()
---@param battleManager PVE_Config_Battle_Manager
function BattleCharacter:initialize(param,battleManager)

    self._param = param

    self._campType = param._campType

    self._index_pos = param._index_pos

    self._battleManager = battleManager

    self._heroId = param._heroId

    self._heroUid = param._heroUid

    self._uid = param._uid

    self._eventListenerList = {}

    self._isStop = false

    self:registerMsg()
end

function BattleCharacter:getEventHandleMap()
    return {
        [EventType.Event_Battle_BlackOut] = "handleEvent_Battle_BlackOut",
    }
end

function BattleCharacter:registerMsg()
    local eventHandleMap = self:getEventHandleMap()
    for i, v in pairs(eventHandleMap) do
        if i and v and self[v] then
            self._eventListenerList[i] = EventManager:AddListener(i,self[v],self)
        end
    end
end

function BattleCharacter:unRegisterMsg()
    for i, v in pairs(self._eventListenerList) do
        if i and v  then
            EventManager:RemoveListener(i,v)
        end
    end
end
---@param entityContext BattleEntityContext
function BattleCharacter:init(entityContext)

    self._entityContext = entityContext
    ---@type BattleNumericBox
    self._battleNumericBox = BattleNumericBox:new(self._uid,self._param._attributeList)

    self:initTree()
end

function BattleCharacter:initTree()
    self._logicTree = BehaviourTreeEntity:new({}, self._param,Agent:new(self,self._battleManager,self._entityContext, self))
    self:debugSetting( self._param._volume_r,self._param._place_r,self._param._dislocation_r,
            self._param._detection_r,0.2,self._param._place_r)
end

function BattleCharacter:debugSetting(volume_r,place_r,dislocation_r,detection_r,attack_r,place_r_base)
    if GameStatic_Battle.General_Grizmo then
        local data = {uid = self._uid,
                      volume_r = volume_r,
                      place_r = place_r,
                      dislocation_r = dislocation_r,
                      detection_r = detection_r,
                      attack_r =attack_r,
                      place_r_base = place_r_base}
        EventManager:Dispatch_battle(EventType.Event_Battle_Render_Debug_GizmosCircle,data)
    end

end

function BattleCharacter:getData()
    if self._logicTree and self._logicTree._blackboard then
        return self._logicTree._blackboard
    else
        return {}
    end
end

function BattleCharacter:update(dt)
    if self._isStop then
        if  self._logicTree  then
            self._logicTree:stop(dt)
        end
        return
    end
    if self._logicTree  then
        self._logicTree:execute(dt)
    end
end

function BattleCharacter:release()
    self:unRegisterMsg()
end

------------------------------------------------------------------------------
--- 大招黑屏事件处理
function BattleCharacter:handleEvent_Battle_BlackOut(params)
    local uid = params.uid
    if uid ~= self._uid then
        self._isStop = params.openType == Enum_Battle.SkillBlackOut.Open
    end
end



return BattleCharacter