---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/13 15:37
---@class BattleTeam:SimpleClassUtil
local BattleTeam = SimpleClassUtil:class()

function BattleTeam:initialize()

    self._data = {  }
    self._sceneAssetPath = ""
    self._rootAssetPath = ""
    self._teamData_self = {  }
    self._teamData_enemy = {}

    self._go_root = nil

    self._go_left = nil

    self._go_right = nil

    self._go_scene = nil

    self._list_left_roots = {}

    self._list_right_roots = {}

    self._map_left_role = {}

    self._map_right_role = {}

    self._isSceneLoadFinish = false
    self._isRootLoadFinish = false
    self._isSelfTeamLoadFinish = false
    self._isEnemyTeamLoadFinish = false

    self._loadCount = {}


    self._positionCount = 5


end

function BattleTeam:initLoadMap()
    --self:addLoadMap(self._sceneAssetPath)
    --self:addLoadMap(self._rootAssetPath)
    --for i, v in pairs(self._teamData_self.teamMap) do
    --    local path = BattleUtils:getHeroAssetPathByHeroId(v)
    --    self:addLoadMap(path..i)
    --end
    --for i, v in pairs(self._teamData_enemy.teamMap) do
    --    local path = BattleUtils:getHeroAssetPathByHeroId(v)
    --    self:addLoadMap(path..i.."enemy")
    --end
    self._loadCount = 2
    for i, v in pairs(self._teamData_self.teamMap) do
        self._loadCount = self._loadCount + 1
    end
    for i, v in pairs(self._teamData_enemy.teamMap) do
        self._loadCount = self._loadCount + 1
    end
end

function BattleTeam:addLoadMap(key)
    --self._dic_loadMap[key] = "load"
end

function BattleTeam:removeLoadMap(key)
    --self._dic_loadMap[key] = nil

    self._loadCount = self._loadCount - 1
end

function BattleTeam:setLoadData(data)
    self._data = data

    self._sceneAssetPath = data.scenePath or "Assets/Resource_MS/Prefabs/Scenes/scene_root_test.prefab"

    self._rootAssetPath = data.rootPath or "Assets/Resource_MS/Prefabs/Scenes/playerRoot.prefab"

    self._teamData_self = data.team_self

    self._teamData_enemy = data.team_enemy

    self:initLoadMap()
end

function BattleTeam:tryLoad()
    self:tryLoadScene()
    self:tryLoadRoot()

end

function BattleTeam:tryLoadScene()
    BattleLoaderManager:pop(self._sceneAssetPath,Enum_Battle.BattleAssetType.Scene,function(scene)
       self:removeLoadMap(self._sceneAssetPath)
       self._go_scene = scene
       self:tryLoadFinish()
    end)
end

function BattleTeam:tryLoadRoot()

    BattleLoaderManager:pop(self._rootAssetPath,Enum_Battle.BattleAssetType.Scene,function(root)
        self:removeLoadMap(self._rootAssetPath)
        self._go_root = root
        self:initRootList(root)
        self:tryLoadFinish()

        self:tryLoadLeftRole()
        self:tryLoadRightRole()
    end)
end

function BattleTeam:tryLoadLeftRole()
    Logger.Error("临时得 to do 修改为正式得 ")
    for i, v in pairs(self._teamData_self.teamMap) do
        local pos = i
        local path = BattleUtils:getHeroAssetPathByHeroId(v)

        BattleLoaderManager:pop(path,Enum_Battle.BattleAssetType.Model,function(model)
            self:removeLoadMap()
            self._map_left_role[pos] = {
                model = model,
                assetPath = path
            }
            self:setInitPos(true,pos,model)
            self:tryLoadFinish()
        end)
    end
end

function BattleTeam:tryLoadRightRole()
    Logger.Error("临时得 to do 修改为正式得 ")
    for i, v in pairs(self._teamData_enemy.teamMap) do
        local pos = i
        local path = BattleUtils:getHeroAssetPathByHeroId(v)
        BattleLoaderManager:pop(path,Enum_Battle.BattleAssetType.Model,function(model)
            self:removeLoadMap()
            self._map_right_role[pos] = {
                model = model,
                assetPath = path
            }
            self:tryLoadFinish()
            self:setInitPos(false,pos,model)
        end)
    end
end

function BattleTeam:tryLoadFinish()
    --if next(self._dic_loadMap) == nil then
    --    Logger.Error(" ****** loadFinishFunc ***** ")
    --end
    if self._loadCount <= 0 then
        Logger.Error(" ****** loadFinishSuccess ***** ")
    end
end

function BattleTeam:initRootList(root)
    self._go_left =  root.transform:Find("leftRoot").gameObject
    for i = 1, self._positionCount do
        self._list_left_roots[i] =  self._go_left.transform:Find(tostring(i)).gameObject
    end
    self._go_right =  root.transform:Find("rightRoot").gameObject
    for i = 1, self._positionCount do
        self._list_right_roots[i] =  self._go_right.transform:Find(tostring(i)).gameObject
    end
end

function BattleTeam:setInitPos(isSelf,pos,modelGo)
    --local parentList = isSelf and self._list_left_roots or self._list_right_roots
    --local parent = parentList[tonumber(pos)].transform
    local parent = isSelf and self._go_left.transform or self._go_right.transform
    modelGo.transform:SetParent(parent)
    --modelGo.transform.localPosition = Vector3.zero
    modelGo.transform.position = BattleUtils:posMapToVec3(BattleUtils:getPositionByIndex(isSelf,pos))
    modelGo.transform.localEulerAngles = Vector3(0,isSelf and 90 or -90,0)

end

function BattleTeam:reset()
    self._isSceneLoadFinish = false
    self._isRootLoadFinish = false
    self._isSelfTeamLoadFinish = false
    self._isEnemyTeamLoadFinish = false
end

function BattleTeam:destroy()
    self:putAsset()
    self:reset()
end

function BattleTeam:putAsset()
    BattleLoaderManager:put(self._sceneAssetPath,Enum_Battle.BattleAssetType.Scene,self._go_scene)
    BattleLoaderManager:put(self._rootAssetPath,Enum_Battle.BattleAssetType.Scene,self._go_root)
    for i, v in pairs(self._map_left_role) do
        BattleLoaderManager:put(v.assetPath,Enum_Battle.BattleAssetType.Model,v.model)
    end
    for i, v in pairs(self._map_right_role) do
        BattleLoaderManager:put(v.assetPath,Enum_Battle.BattleAssetType.Model,v.model)
    end
end
return BattleTeam