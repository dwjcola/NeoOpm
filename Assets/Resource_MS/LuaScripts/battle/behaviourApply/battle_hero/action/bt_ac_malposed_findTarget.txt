---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 0:03
--- 叶子节点
---@class bt_ac_malposed_findTarget : IAction
local bt_ac_malposed_findTarget = SimpleClassUtil:class(IAction)

function bt_ac_malposed_findTarget:initData()

end
---@param blackBoard BlackBoard_BattleBase
function bt_ac_malposed_findTarget:doAction(blackBoard,agent)
    local result = Enum_BT.Node_ResultType.Fail

    if blackBoard._enmityIndex == 0 or blackBoard._dislocation_friend_entity == nil then
        blackBoard._pos_dislocation = nil
        result = Enum_BT.Node_ResultType.Fail
    else
        local self_pos_z = blackBoard._position.z
        local friend_pos_z = blackBoard._dislocation_friend_entity:getData()._position.z
        --- @type BattleEntityContext
        local _entityContext = agent._entityContext
        --- @type BattleCharacter
        local _enemyEntity = _entityContext:getEnemyEntityByIndex(blackBoard._campType,blackBoard._enmityIndex)
        if _enemyEntity and _enemyEntity:getData()._alive then
            local enemy_pos_z = _enemyEntity:getData()._position.z
            local self_z_abs = math.abs(self_pos_z - enemy_pos_z)
            local friend_z_abs = math.abs(friend_pos_z - enemy_pos_z)
            if self_z_abs <= friend_z_abs then
                local isSame = (self_pos_z > enemy_pos_z and friend_pos_z > enemy_pos_z )
                        or (self_pos_z < enemy_pos_z and friend_pos_z < enemy_pos_z )
                local angle = 1
                if isSame then
                    angle = (self_pos_z > enemy_pos_z) and -1 or 1
                else
                    angle = (self_pos_z > enemy_pos_z) and 1 or -1
                end
                local sign = blackBoard._position.x <=  _enemyEntity:getData()._position.x and -1 or 1
                local isOk , tmp = self:handleTarget_dislocation_r(blackBoard,_enemyEntity,blackBoard._dislocation_friend_entity,angle,_entityContext,sign)
                if isOk and tmp then
                    blackBoard._pos_dislocation = tmp
                    result = Enum_BT.Node_ResultType.Success
                else
                    blackBoard._pos_dislocation = nil
                    result = Enum_BT.Node_ResultType.Fail
                end
            else
                blackBoard._pos_dislocation = nil
                result = Enum_BT.Node_ResultType.Fail
            end
        else
            blackBoard._pos_dislocation = nil
            result = Enum_BT.Node_ResultType.Fail
        end
    end
    return result
end

function bt_ac_malposed_findTarget:handleTarget_dislocation_r(blackBoard,targetEntity,friendEntity,angle,entityContext,sign)
    if angle == 360 or angle == -360 then
        return false,nil
    end
    local pos = blackBoard._position
    local dic = pos - targetEntity:getData()._position
    local tmpDic = BattleMathUtils.AngleAxis_Y_V3(dic, angle * sign)
    local resultPos = targetEntity:getData()._position + tmpDic
    local friend_entity_pos = friendEntity:getData()._position
    local dis = Vector3.Distance(resultPos,friend_entity_pos)
    if dis < (blackBoard._dislocation_r + friendEntity:getData()._dislocation_r)  then
        local nextAng = angle > 0 and (angle + 1) or (angle - 1)
        return self:handleTarget_dislocation_r(blackBoard,targetEntity,friendEntity,nextAng,entityContext,sign)

    else
        local self_entityList = entityContext:getEntityListByCamp(blackBoard._campType)
        for i, entity in pairs(self_entityList) do
            if entity:getData()._uid ~= blackBoard._uid then
                local entity_pos = entity:getData()._position
                local place_r = entity:getData()._place_r + blackBoard._place_r
                local dis_place_self = Vector3.Distance(resultPos,entity_pos)
                if dis_place_self < place_r then
                    local nextAng = angle > 0 and (angle + 1) or (angle - 1)
                    return self:handleTarget_dislocation_r(blackBoard,targetEntity,friendEntity,nextAng,entityContext,sign)
                end
            end
        end
        local enemy_entityList = entityContext:getEnemyEntityList(blackBoard._campType)
        for i, entity in pairs(enemy_entityList) do
            --if entity:getData()._uid ~= targetEntity:getData()._uid then
            --
            --end
            local entity_pos = entity:getData()._position
            local place_r = entity:getData()._place_r + blackBoard._place_r
            local dis_place_enemy = Vector3.Distance(resultPos,entity_pos)
            if dis_place_enemy < place_r then
                local nextAng = angle > 0 and (angle + 1) or (angle - 1)
                return self:handleTarget_dislocation_r(blackBoard,targetEntity,friendEntity,nextAng,entityContext,sign)
            end
        end

        return true,resultPos
    end
end

return bt_ac_malposed_findTarget