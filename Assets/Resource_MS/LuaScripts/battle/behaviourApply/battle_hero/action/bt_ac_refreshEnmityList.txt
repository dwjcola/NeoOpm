---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 0:03
--- 叶子节点
---@class bt_ac_refreshEnmityList : IAction
local bt_ac_refreshEnmityList = SimpleClassUtil:class(IAction)
---@param blackBoard BlackBoard_BattleBase
function bt_ac_refreshEnmityList:doAction(blackBoard,agent)

    -- todo 后期看是不是只需要知道 谁是仇恨值最大的 现在暂时保存所有的对象仇恨值
    blackBoard._time_enmity = agent._battleManager._battleTime
    local targetIndex = blackBoard._enmityIndex
    --- @type BattleEntityContext
    local _entityContext = agent._entityContext
    ---@type BattleCharacter[]
    local _entityList = _entityContext:getEnemyEntityList(blackBoard._campType)
    local tmp_enmity_map = {}
    local disMap = {}

    for _indexPos, character in pairs(_entityList) do
        local enemy_blackBoard = character:getData()
        if enemy_blackBoard and enemy_blackBoard._alive and enemy_blackBoard._isCanBeSelected then
            local dis = Vector3.Distance(enemy_blackBoard._position,blackBoard._position)
            table.insert(disMap,{indexPos = _indexPos,dis = dis, posZ = enemy_blackBoard._position.z})
        end
    end
    if next(disMap) ~= nil then
        table.sort(disMap,function(a, b)
            if a.dis == b.dis then
                if a.posZ == b.posZ then
                    return a.indexPos < b.indexPos
                else
                    return a.posZ > b.posZ
                end
            else
                return a.dis < b.dis
            end
        end)
    end
    local attackMap = blackBoard._attackMe_map
    for i, v in ipairs(disMap) do
        local tmp = {indexPos = v.indexPos,enmityValue = i == 1 and 60 or 6 - i}
        if attackMap[v.indexPos] then
            tmp.enmityValue = tmp.enmityValue + 50
        end
        tmp_enmity_map[i] = tmp
    end

    table.sort(tmp_enmity_map,function(a, b)
        return a.enmityValue > b.enmityValue
    end)

    local enmityObj = tmp_enmity_map[1]
    if targetIndex ~= enmityObj.indexPos then
        EventManager:Dispatch_battle(EventType.Event_Battle_EnmityChange)
    end
    blackBoard._enmityIndex = enmityObj.indexPos
    blackBoard._enmity_map = tmp_enmity_map



    return Enum_BT.Node_ResultType.Success
end

return bt_ac_refreshEnmityList