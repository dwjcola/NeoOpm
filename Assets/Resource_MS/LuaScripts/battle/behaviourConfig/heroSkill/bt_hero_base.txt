---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2022/2/23 16:54
---@class bt_hero_base
local bt_hero_base = SimpleClassUtil:class()

function bt_hero_base:initialize(heroUid)
   self._heroUid = heroUid or " heroUid == nil "
end
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createTree(blackboard)
    ---@type NodeIfJudge
    local root = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
    -------------------------------------------------------------------------------
    ---@type NodeCondition  判断是否活着
    local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
    node_1:setICondition(CreateUtils:getICondition("bt_con_compare_box",
            { _compareType = Enum_BT.CompareType.BT_GreaterThan, _key = Enum_Battle.Attribute.HP, _compareTargetValue = 0, }))
    root:addNode(node_1)
    ---------------------------------------------------------------------------------
    root:addNode(self:createLiveTree(blackboard))
    ---------------------------------------------------------------------------------
    root:addNode(self:createDiedTree(blackboard))
    --------------
    return  root
end
--- 如果死了
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createDiedTree(blackboard)
    ---@type NodeAction 死亡 行为
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(CreateUtils:getIAction("bt_ac_died"))
    return node
end
--- 如果活着
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createLiveTree(blackboard)
    ---@type NodeSequence
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence)
    node:addNode(self:createInitSkillCdTree(blackboard))
    node:addNode(self:createLoopTree(blackboard))
    return node
end
---初始化技能Cd
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createInitSkillCdTree(blackboard)
    ---@type NodeAction
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action,"createInitSkillCdTree_0001")
    node:setIAction(CreateUtils:getIAction("bt_ac_initSkillCd"))
    return node
end
--- 无限循环树
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createLoopTree(blackboard)
    ---@type NodeDecoratorRepeat 一直 判断技能 树
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Decorator_Repeat)
    node:setRepeatCount(-1)
    node:addNode(self:createOnceSkillTree(blackboard))
    return node
end
--- 单词循环技能树
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createOnceSkillTree(blackboard)
    ---@type NodeParallelAll
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)
    self:createPassiveTree(node,blackboard)
    node:addNode(self:createHostilityValueTree(blackboard))
    node:addNode(self:createSkillExecuteTree(blackboard))
    node:addNode(self:getGcdTree(blackboard))
    return node
end

--- GCD计时树
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:getGcdTree(blackboard)
    ---@type NodeIfJudge
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)

    ---@type NodeCondition
    local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
    node_1:setICondition(CreateUtils:getICondition("bt_con_compare_base",
            { _compareType = Enum_BT.CompareType.BT_GreaterThan, _key = "_gcd", _compareTargetValue = 0}))
    node:addNode(node_1)

    ---@type NodeAction
    local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node_2:setIAction(CreateUtils:getIAction("bt_ac_count_down"))
    node:addNode(node_2) --
    return node
end

--- 被动技能 树
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createPassiveTree(node,blackboard)
    do return end
    ---@type bt_ac_passive
    local passiveNode = nil
    if blackboard and blackboard._skillData then
        for i, v in pairs(blackboard._skillData) do
            if v and ( v._skillCon.type == Enum_Battle.SkillType.Skill_passive)
                    or (v._skillCon.type == Enum_Battle.SkillType.Skill_cCalled) then
                if passiveNode == nil then
                    passiveNode = btApplyMap:getClass("bt_ac_passive")
                end
                passiveNode:addPassive(v)
            end
        end
    end
    if passiveNode then
        node:addNode(passiveNode)
    end
end
--- 仇恨值列表
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createHostilityValueTree(blackboard)
    -- 仇恨值 目标计算
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
       ---@type NodeConditionGroup
       local node1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup)
             local con_1_1 = btApplyMap:getClass("bt_con_enmityTargetCheck")
             local con_1_2 = btApplyMap:getClass("bt_con_enmityCd")
             con_1_2:initData({cdTime = BattleConstant.BattleEnmityListRefreshCd})
             local con_1_3 = btApplyMap:getClass("bt_onReceive")
             con_1_3:initData({eventId = EventType.Event_Battle_Died})
             local con_1_4 = btApplyMap:getClass("bt_onBeAttack_isNotEnmity")
             con_1_4:initData()
       node1:setIConditionS({con_1_1,con_1_2,con_1_3,con_1_4},Enum_BT.Condition_Relation.BT_OR)
    node:addNode(node1)
       ---@type NodeAction
       local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
       node_2:setIAction(btApplyMap:getClass("bt_ac_refreshEnmityList"))
    node:addNode(node_2)
    return node
end
--- 技能执行树
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createSkillExecuteTree(blackboard)
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)
    node:addNode(self:createBigSkillJudgeTree(blackboard))
    node:addNode(self:createBigSkillTree(blackboard))
    node:addNode(self:createSkillMoveTree(blackboard))
    return node
end
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createBigSkillJudgeTree(blackboard)
    ---@type SkillData
    local skillData = blackboard._skillData[Enum_Battle.SkillTag.Skill_1]
    ---@type NodeIfJudge 判断是否满足 大招释放条件
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)

    node:addNode(self:baseSkillCondition(blackboard,skillData,false))

    node:addNode(self:bigSkillCondition_to_true(blackboard,skillData))

    node:addNode(self:bigSkillCondition_to_false(blackboard,skillData))

    return node
end
---@param blackboard BlackBoard_BattleBase
---@param skillData SkillData
function bt_hero_base:baseSkillCondition(blackboard,skillData,isInfluenced_gcd)
    ---@type NodeConditionGroup
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup,tostring(skillData._skillTag))
    local tmp = {}

    table.insert(tmp, CreateUtils:getICondition("bt_con_compare_box",
            { _compareType = Enum_BT.CompareType.BT_GreaterThanEqual, _key = Enum_Battle.Attribute.Anger,
              _compareTargetValue = skillData._skill_need_power or 0 }))

    table.insert(tmp,CreateUtils:getICondition("bt_con_astrict",
            { skillTag = Enum_Battle.SkillTag.Skill_1, isDefy = skillData._unstoppable, }))

    table.insert(tmp, CreateUtils:getICondition("bt_con_compare_base",
            { _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_smallSkillContBeBreak", _compareTargetValue = false, }))

    table.insert(tmp, CreateUtils:getICondition("bt_con_cd", skillData))


    if isInfluenced_gcd then
        table.insert(tmp, CreateUtils:getICondition("bt_con_compare_base",
                { _compareType = Enum_BT.CompareType.BT_LessThanEqual, _key = "_gcd", _compareTargetValue = 0, }))
    end
    if skillData and skillData._skillCon and skillData._skillCon.condition then
        local specialConNode = CreateUtils:getSkillFireSpecialCon(blackboard, skillData)
        if specialConNode then
            table.insert(tmp,specialConNode)
        end
    end
    if skillData and skillData._skillCon.rangeType then
        local rangerConNode = CreateUtils:getSkillFireRangerCon(blackboard, skillData)
        if rangerConNode then
            table.insert(tmp,rangerConNode)
        end
    end
    node:setIConditionS(tmp,Enum_BT.Condition_Relation.BT_AND)
    return node
end
---@param skillData SkillData
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:bigSkillCondition_to_true(blackboard,skillData)
    ---@type NodeSequence
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence)

        ---@type NodeAction
        local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
        node_1:setIAction(CreateUtils:getIAction("bt_ac_setValue",{key = "_bigSkillReady",value = true}))
        ---@type NodeAction
        local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
        node_2:setIAction(CreateUtils:getIAction("bt_ac_sendMag",
                {eventKey = EventType.Event_BigSkillCanRelease, params =
                {uid = blackboard._uid,initIndex = blackboard._index_pos,skillType = skillData._skillCreateType}}))
        ---@type NodeCondition
        local node_3 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
        node_3:setICondition(CreateUtils:getICondition("bt_con_compare_base",
                { _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_bigSkillReady", _compareTargetValue = false, }))
        ---@type NodeCondition
        local node_4 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
        node_4:setICondition(CreateUtils:getICondition("bt_con_compare_base",
            { _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_campType", _compareTargetValue =  Enum_Battle.Camp.CampSelf, }))
    node:addNode(node_3)
    node:addNode(node_1)
    node:addNode(node_4)
    node:addNode(node_2)
    return node
end
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:bigSkillCondition_to_false(blackboard,skillData)
    ---@type NodeSequence
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence)
       ---@type NodeAction
       local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
       node_1:setIAction(CreateUtils:getIAction("bt_ac_setValue",{key = "_bigSkillReady",value = false}))
       ---@type NodeAction
       local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
       node_2:setIAction(CreateUtils:getIAction("bt_ac_sendMag",
               {eventKey = EventType.Event_BigSkillCannotRelease, params =
               {uid = blackboard._uid,initIndex = blackboard._index_pos,skillType = skillData._skillCreateType}}))
       ---@type NodeCondition
       local node_3 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
       node_3:setICondition(CreateUtils:getICondition("bt_con_compare_base",
            { _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_bigSkillReady", _compareTargetValue = true, }))

        ---@type NodeCondition
        local node_4 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
        node_4:setICondition(CreateUtils:getICondition("bt_con_compare_base",
            { _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_campType", _compareTargetValue =  Enum_Battle.Camp.CampSelf, }))
    node:addNode(node_3)
    node:addNode(node_1)
    node:addNode(node_4)
    node:addNode(node_2)
    return node
end
---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createSkillMoveTree(blackboard)
    ---@type NodeIfJudge
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
        ---@type NodeConditionGroup
        local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup)
            -----@type ICondition
            local condition_1_1 = btApplyMap:getClass("bt_con_compare_base")
            condition_1_1:initData({ _compareType = Enum_BT.CompareType.BT_UnequalTo, _key = "_skill_moveSpeed", _compareTargetValue = 0,})
            -----@type ICondition
            local condition_1_2 = btApplyMap:getClass("bt_con_compare_base")
            condition_1_2:initData({ _compareType = Enum_BT.CompareType.BT_GreaterThan, _key = "_skill_moveFrame", _compareTargetValue = 0,})
        node_1:setIConditionS({condition_1_1,condition_1_2},Enum_BT.Condition_Relation.BT_AND)
        ---@type NodeAction
        local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action,"createSkillMove_Tree 003")
        node_2:setIAction(CreateUtils:getIAction("bt_ac_skill_move"))
    node:addNode(node_1)
    node:addNode(node_2)
    return node
end

---@param blackboard BlackBoard_BattleBase
function bt_hero_base:createBigSkillTree(blackboard)
    ---@type NodeIfJudge
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
         ---@type NodeConditionGroup
         local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup)
              -----@type ICondition
              local condition_1_1 = btApplyMap:getClass("bt_con_compare_base")
              condition_1_1:initData({ _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_bigSkillReady", _compareTargetValue = true, })
              -----@type ICondition
              local condition_1_2 = btApplyMap:getClass("bt_con_compare_base")
              condition_1_2:initData({ _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_isKeyDownBigSkill", _compareTargetValue = true,  })
              local tmp_1 = {condition_1_1,condition_1_2}
         node_1:setIConditionS(tmp_1,Enum_BT.Condition_Relation.BT_AND)

    node:addNode(node_1)

    node:addNode(self:createSkill(blackboard,Enum_Battle.SkillTag.Skill_1))

    node:addNode(self:createSmallSkillTree(blackboard))

    return node
end
--- 技能释放树
function bt_hero_base:createSkill(blackBoard,skillTag)
    ---@type NodeSequence
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence)
    local skillData = blackBoard._skillData[skillTag]
    node:addNode(self:createSetPlaySkill(skillTag))
    node:addNode(self:createSetSkillPlayTime())
    node:addNode(self:createStopFindWay())
    node:addNode(self:getTurnTree())

    self:createSetGcd(node,skillData)
    node:addNode(self:createTimeLineSkill(skillData))
    node:addNode(self:createAddAnger(skillData._skill_add_anger))
    self:setSkillPlayCost(node,skillData)
    node:addNode(self:createSetPlaySkill(nil))
    return node
end

--设置正在释放得技能 是哪个
function bt_hero_base:createSetPlaySkill(skillTag)
    ---@type NodeAction
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(CreateUtils:getIAction("bt_ac_setValue",{key = "_playSkillTag",value = skillTag}))
    return node
end
function bt_hero_base:createSetSkillPlayTime(skillTag)
    ---@type NodeAction
    local node_ac_skillPlayTime = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node_ac_skillPlayTime:setIAction(CreateUtils:getIAction("bt_ac_setSkillPlayTime",skillTag))
    return node_ac_skillPlayTime
end
--- 停止寻路
function bt_hero_base:createStopFindWay()
    ---@type NodeAction
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(CreateUtils:getIAction("bt_ac_setValue",{key = "_find_target_pos",value = nil}))
    return node
end

-- 设置 gcd
function bt_hero_base:createSetGcd(rootNode,skillData)
    if skillData._skill_gCd and skillData._skill_gCd > 0 then
        ---@type NodeAction
        local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
        node:setIAction(CreateUtils:getIAction("bt_ac_setValue",{key = "_gcd",value = skillData._skill_gCd}))
        rootNode:addNode(node)
    end
end
function bt_hero_base:createTimeLineSkill(skillData)
    ---@type NodeAction
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(CreateUtils:getIAction("bt_ac_playTimeLine", {skillData = skillData}))
    return node
end
-- 设置怒气
function bt_hero_base:createAddAnger(anger)
    ---@type NodeAction
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(CreateUtils:getIAction("bt_ac_setBoxValue",
            {key = Enum_Battle.Attribute.Anger,value = anger or 0,setValueType = Enum_BT.SetValueType.BT_AddEqual}))
    return node
end
-- 设置怒气
function bt_hero_base:createSetAnger(anger)
    ---@type NodeAction
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(CreateUtils:getIAction("bt_ac_setBoxValue",
            {key = Enum_Battle.Attribute.Anger,value = anger or 0,setValueType = Enum_BT.SetValueType.Bt_Equal}))
    return node
end

-- 技能释放得 消耗 gcd
---@param skillData SkillData
function bt_hero_base:setSkillPlayCost(rootNode,skillData)
    if skillData._skillCon.cost and skillData._skillCon.cost[1] and skillData._skillCon.cost[2]  then
        if skillData._skillCon.cost[1] == Enum_Battle.SkillCostType.Anger then
            rootNode:addNode(self:createSetAnger(0))
        end
    end
end

--- 如果大招不能释放
function bt_hero_base:createSmallSkillTree(blackboard)
    ---@type NodeParallelAll
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)

    --node:addNode(self:createSelectSmallSkillTree())

    node:addNode(self:createTreeExceptSmallSkill(blackboard))
    return node
end

function bt_hero_base:createSelectSmallSkillTree()
    -----@type NodeSelect
    local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Select,"0000019")
       ---@type NodeIfJudge
       local node_1_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge,"0000020")
           ---@type NodeConditionGroup
           local node_1_1_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup,"0000021")
           -----@type bt_con_astrict
           local condition_1_1_1_0 = btApplyMap:getClass("bt_con_astrict")
           condition_1_1_1_0:initData({ skillTag = Enum_Battle.SkillTag.Skill_2, isDefy = false, })
           -----@type bt_con_cd
           local condition_1_1_1_1 = btApplyMap:getClass("bt_con_cd")
           condition_1_1_1_1:initData({ skillTag = Enum_Battle.SkillTag.Skill_2, cdTime = 5000 })
           -----@type ICondition
           local condition_1_1_1_2 = btApplyMap:getClass("bt_con_monomer")
           condition_1_1_1_2:initData({ skillTag = Enum_Battle.SkillTag.Skill_2, skillDistance = 100  })
           local tmp_1 = {condition_1_1_1_0,condition_1_1_1_1,condition_1_1_1_2}
           node_1_1_1:setIConditionS(tmp_1,Enum_BT.Condition_Relation.BT_AND)
           --- @type NodeSequence
           local node_1_1_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence,"0000022")
           ---@type NodeAction
           local node_1_1_2_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action,"0000023")
           local ac_1_1_2_1 = btApplyMap:getClass("bt_ac_setValue")
           ac_1_1_2_1:initData({key = "_smallSkillIng",value = true})
           node_1_1_2_1:setIAction(ac_1_1_2_1)
           node_1_1_2:addNode(node_1_1_2_1)
           ---@type NodeAction
           local node_1_1_2_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action,"0000024")
           local ac_1_1_2_2 = btApplyMap:getClass("bt_ac_playSkill")
           ac_1_1_2_2:initData({})
           node_1_1_2_2:setIAction(ac_1_1_2_2)
           node_1_1_2:addNode(node_1_1_2_1)
       node_1_1:addNode(node_1_1_1)
       node_1_1:addNode(node_1_1_2)
    node_1:addNode(node_1_1)
    return node_1
end

function bt_hero_base:createTreeExceptSmallSkill(blackboard)
    ---@type NodeIfJudge 判断是不是 在放 小技能
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
       ---@type NodeCondition
       local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
            ---@type bt_con_compare_base
            local condition_1_1 = btApplyMap:getClass("bt_con_compare_base")
            condition_1_1:initData({ _compareType = Enum_BT.CompareType.Bt_Equal,
                                     _key = "_smallSkillIng", _compareTargetValue = false, })
        node_1:setICondition(condition_1_1)
    node:addNode(node_1)
         ---@type NodeParallel
         local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)
         node_2:addNode(self:createOptimizeTree(blackboard))
         node_2:addNode(self:createOrdinarySkillTree(blackboard))
    node:addNode(node_2)
    return node
end

function bt_hero_base:createOptimizeTree(blackboard)
    ---@type NodeParallelAll
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)
        ---@type NodeAction
        local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
        node_1:setIAction( btApplyMap:getClass("bt_ac_check_change_place_r"))
    node:addNode(node_1)
        ---@type NodeIfJudge
        local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
            ---@type NodeConditionGroup
            local node_2_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup)
                 local con_2_1_1 = btApplyMap:getClass("bt_con_compare_base")
                 con_2_1_1:initData({ _compareType = Enum_BT.CompareType.Bt_Equal, _key = "_find_target_pos", _compareTargetValue = nil, })
                 local con_2_1_2 = btApplyMap:getClass("bt_con_baseControlled")
                 local con_2_1_3 = btApplyMap:getClass("bt_con_isDislocation")
                 local tmp_01 = {con_2_1_1,con_2_1_2,con_2_1_3}
            node_2_1:setIConditionS(tmp_01, Enum_BT.Condition_Relation.BT_AND)
        node_2:addNode(node_2_1)
            ---@type NodeParallelAll
            local node_2_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)
                 ---@type NodeAction
                 local node_2_2_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
                 node_2_2_1:setIAction( btApplyMap:getClass("bt_ac_malposed_findTarget"))
            node_2_2:addNode(node_2_2_1)
                 ---@type NodeAction
                 local node_2_2_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
                 node_2_2_2:setIAction(btApplyMap:getClass("bt_ac_malposed_findWay"))
            node_2_2:addNode(node_2_2_2)
        node_2:addNode(node_2_2)
    node:addNode(node_2)
    return node
end


function bt_hero_base:createOrdinarySkillTree(blackboard)
    ---@type SkillData
    local skillData = blackboard._skillData[Enum_Battle.SkillTag.Skill_5]
    ---@type NodeIfJudge 判断 能不能 释放普攻
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
    node:addNode(self:baseSkillCondition(blackboard,skillData,false))
    node:addNode(self:createSkill(blackboard,Enum_Battle.SkillTag.Skill_5))
    node:addNode(self:createTreeExceptSkillTree())
    return node
end

function bt_hero_base:createTreeExceptSkillTree()
    ---@type NodeIfJudge 判断 是不是 被限制 行为了 （眩晕，击退，放逐）
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
    node:addNode(self:createIsBeContr())
    node:addNode(self:createReadyFindWayTree())
    node:addNode(self:createBeContrTree())
    return node
end
--- 是不是 被限制 行为了 （眩晕，击退，放逐）
function bt_hero_base:createIsBeContr()
    ---@type NodeConditionGroup
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup)
    -----@type bt_con_baseControlled
    local condition_1_1 = btApplyMap:getClass("bt_con_baseControlled")
    node:setIConditionS({condition_1_1},Enum_BT.Condition_Relation.BT_AND)
    return node
end

function bt_hero_base:createBeContrTree()
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
    node:setIAction(btApplyMap:getClass("bt_ac_controlled"))
    return node
end

function bt_hero_base:createReadyFindWayTree()
    ---@type NodeIfJudge 判断 有没有 寻路 目标
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
         ---@type NodeConditionGroup
         local node_2_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.ConditionGroup)
         ---@type bt_con_isHadEnemyTarget
         local condition_2_1_1 = btApplyMap:getClass("bt_con_isHadEnemyTarget")
         node_2_1:setIConditionS({condition_2_1_1}, Enum_BT.Condition_Relation.BT_AND)
    node:addNode(node_2_1)
    node:addNode(self:createFindWayTree())
    node:addNode(self:getAwaitTree())
    return node
end

function bt_hero_base:createFindWayTree()
    ---@type NodeParallelAll
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Parallel_All)
         ---@type NodeAction
         local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
         node_1:setIAction(btApplyMap:getClass("bt_ac_find_target"))
    node:addNode(node_1)
         --- @type NodeIfJudge
         local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.IF_Judge)
              ---@type NodeCondition
              local node_2_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
              ---@type bt_con_compare_base
              local con_2_1_1 = btApplyMap:getClass("bt_con_compare_base")
              con_2_1_1:initData({ _compareType = Enum_BT.CompareType.Bt_Equal,
                                   _key = "_find_target_pos", _compareTargetValue = nil, })
              node_2_1:setICondition(con_2_1_1)
         node_2:addNode(node_2_1)
         node_2:addNode(self:getAwaitTree())
         node_2:addNode(self:createMoveWayTree())
    node:addNode(node_2)
    return node
end

function bt_hero_base:createMoveWayTree()
    local node =  CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence)
         ---@type NodeAction
         local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
         ---@type bt_ac_switchAnima
         local ac_1 = btApplyMap:getClass("bt_ac_switchAnima")
         ac_1:initData({aniName = Enum_Battle.AniState.run,isReset = false,speed = 1})
         node_1:setIAction(ac_1)
    node:addNode(node_1)
        ---@type NodeAction
        local node_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
        ---@type bt_ac_way_finding
        node_2:setIAction(btApplyMap:getClass("bt_ac_way_finding"))
    node:addNode(node_2)
    return node
end

function bt_hero_base:getAwaitTree()
    ---@type NodeSequence
    local node =  CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence,"await_1")
        ---@type NodeAction
        local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action,"await_1_1")
            ---@type bt_ac_switchAnima
            local ac_1_1 = btApplyMap:getClass("bt_ac_switchAnima")
            ac_1_1:initData({aniName = Enum_Battle.AniState.idle,isReset = true,speed = 1})
        node_1:setIAction(ac_1_1)
    node:addNode(node_1)
    return node
end
--- 转向树
function bt_hero_base:getTurnTree()
    ---@type NodeDecoratorReturnSuccess
    local node = CreateUtils:getNodeByType(Enum_BT.Node_Type.Decorator_Return_Success)
        ---@type NodeSequence
        local node_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Sequence)
            ---@type NodeCondition
            local node_1_1 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Condition)
            node_1_1:setICondition( btApplyMap:getClass("bt_con_need_turn"))
        node_1:addNode(node_1_1)
            ---@type NodeAction
            local node_1_2 = CreateUtils:getNodeByType(Enum_BT.Node_Type.Action)
            node_1_2:setIAction( btApplyMap:getClass("bt_ac_turn"))
        node_1:addNode(node_1_2)
    node:addNode(node_1)
    return node
end


return bt_hero_base