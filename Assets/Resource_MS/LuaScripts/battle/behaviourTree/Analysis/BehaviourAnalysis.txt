---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/9 17:14
---@class BehaviourAnalysis
local BehaviourAnalysis = {}

function BehaviourAnalysis:Analysis(treeData,blackboard,agent)

    local rootNode = self:AnalysisTree(treeData,blackboard,agent)
    return rootNode
end

function BehaviourAnalysis:AnalysisTree(treeData,blackboard,agent)
    if treeData._rootNodeId == nil then
        BattleLog.error("数据无效！！！")
        return nil
    end
    local rootNode = self:AnalysisNode(treeData._rootNodeId,treeData,blackboard,agent)
    return rootNode
end

function BehaviourAnalysis:AnalysisNode(nodeId,treeData,blackboard,agent)
    if treeData and treeData._nodeList then
        local nodeValue = treeData._nodeList[nodeId]
        if nodeValue then
            local node = self:AnalysisNode_ByValue(nodeValue)

            if node:getNodeType() == Enum_BT.Node_Type.Sub_Tree then
                BattleLog.error(" 等待开发 ！！！！")
            end

            if not self:isLeafNode(node:getNodeType()) then
                for _, childNodeId in ipairs(nodeValue._childNodeList) do
                    local childNode = self:AnalysisNode(childNodeId,treeData,blackboard,agent)
                    if childNode then
                        node:addNode(childNode)
                    end
                end
            end
            return node
        else
            BattleLog.error("找不到树节点 nodeId == ",nodeId)
        end
    else
        BattleLog.error("找不到树 _nodeList  == nil ")
    end
end
---@return NodeBase
function BehaviourAnalysis:AnalysisNode_ByValue(nodeValue)
    local node = self:getNode(nodeValue)
    if node:getNodeType() == Enum_BT.Node_Type.Action then
        if nodeValue._action then
            node:setIAction( btApplyMap:getClass(nodeValue._action._identificationName))
            node:initData(nodeValue._action._value)
        end
    elseif node:getNodeType() == Enum_BT.Node_Type.Condition then
        if nodeValue._condition then
            node:setIAction( btApplyMap:getClass(nodeValue._condition._identificationName))
            node:initData(nodeValue._condition._value)
        end
    else
        if nodeValue._value then
            node:initData(nodeValue._value)
        end
    end
    return node
end

function BehaviourAnalysis:isLeafNode(type)
    --local node = btApplyMap:getClass(nodeValue._identificationName)
    --if node == nil then
    --    BattleLog.error("节点实例化失败 ！！！  nodeValue == ",nodeValue)
    --    return nil
    --end

    return type == Enum_BT.Node_Type.Action or type == Enum_BT.Node_Type.Condition
end
---@return NodeBase
function BehaviourAnalysis:getNode(nodeValue)
    if nodeValue and nodeValue._type then
        if nodeValue._type == Enum_BT.Node_Type.Select then
            return NodeSelect:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Sequence then
            return NodeSequence:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Random then
            return NodeRandomSelect:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Random_Sequence then
            return NodeRandomSequence:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Random_Priority then
            return NodeRandomPriority:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Parallel then
            return NodeParallel:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Parallel_Select then
            return NodeParallelSelect:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Parallel_All then
            return NodeParallelAll:new()
        elseif nodeValue._type == Enum_BT.Node_Type.IF_Judge then
            return NodeIfJudge:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Decorator_Inverter then
            return NodeDecoratorInverter:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Decorator_Repeat then
            return NodeDecoratorRepeat:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Decorator_Return_Fail then
            return NodeDecoratorReturnFail:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Decorator_Return_Success then
            return NodeDecoratorReturnSuccess:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Decorator_Until_Fail then
            return NodeDecoratorUntilFail:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Decorator_Until_Success then
            return NodeDecoratorUntilSuccess:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Condition then
            return NodeCondition:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Action then
            return NodeAction:new()
        elseif nodeValue._type == Enum_BT.Node_Type.Sub_Tree then
            return NodeSubTree:new()
        else
            BattleLog.error("未处理类型！！！！  ： " , tostring(nodeValue._type))
        end
    else
        BattleLog.error("数据不合法 ！！！！  ： " , tostring(nodeValue._type))
    end
end



return BehaviourAnalysis