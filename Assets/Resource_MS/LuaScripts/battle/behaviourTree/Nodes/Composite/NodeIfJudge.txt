---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 1:02
---  if 判断节点(组合节点)
---      只能有 二或者三个子节点
---      第一个节点只能返回Success、Fail
---      当有 二个子节点时
---      可以配置 第二个节点执行的条件是：第一个节点返回 Success 或者 Fail
---      当有三个子节点时
---      第二、三个节点执行的条件： 是互斥的
---      第一个节点返回 Success 执行第二个节点
---      第一个节点返回 Fail 执行第三个节点
---      或者
---      第一个节点返回 Fail 执行第二个节点
---      第一个节点返回 Success 执行第三个节点
---@class NodeIfJudge : NodeComposite
local NodeIfJudge = SimpleClassUtil:class(NodeComposite)

function NodeIfJudge:initialize()
    self.super:initialize(Enum_BT.Node_Type.IF_Judge)
    ---@type NodeBase
    self._lastRunningNode = nil
    ---@type IfJudgeData[]
    self._last_ifJudgeData = {}
end

function NodeIfJudge:onEnter()
    self.super:onEnter()
end

function NodeIfJudge:onExit()
    self.super:onExit()
    if self._lastRunningNode then
        self._lastRunningNode:postPosition(Enum_BT.Node_ResultType.Fail)
        self._lastRunningNode = nil
    end
end


function NodeIfJudge:execute(blackboard,contextManager)
    self:log_enter("NodeIfJudge    Entity: ",self:getEntityId())
    if self:getChildesCount() <= 0 then
        return Enum_BT.Node_ResultType.Fail
    end

    local resultType = Enum_BT.Node_ResultType.Fail

    local ifNode = self:getChildesByIndex(1)
    resultType = self:executeNode(ifNode,blackboard,contextManager)

    --local nodeBase = self:getBaseNode(resultType)

    local nodeBase = resultType == Enum_BT.Node_ResultType.Success and self:getChildesByIndex(2) or self:getChildesByIndex(3)

    if nodeBase then
        if  self._lastRunningNode and  self._lastRunningNode:getNodeId() ~= nodeBase:getNodeId() then
            self._lastRunningNode:postPosition(Enum_BT.Node_ResultType.Fail)
            self._lastRunningNode = nil
        end
        resultType = self:executeNode(nodeBase,blackboard,contextManager)
    end
    self:log("NodeIfJudge    Entity: ",self:getEntityId(),    "  resultType :", resultType)
    return resultType
end

function NodeIfJudge:executeNode(nodeBase,blackboard,contextManager)
    local resultType = Enum_BT.Node_ResultType.Fail
    if nodeBase then
        nodeBase:prePosition()
        resultType = nodeBase:execute(blackboard,contextManager)
        nodeBase:postPosition(resultType)
    end
    if resultType ==  Enum_BT.Node_ResultType.Running then
        self._lastRunningNode = nodeBase
    end
    return resultType
end

function NodeIfJudge:getBaseNode(resultType)
    for i = 1, self:getChildesCount() do
        local node = self:getChildesByIndex(i)
        local judgeData = self:getJudgeData(node:getNodeId())
        if judgeData._ifJudgeType == Enum_BT.Node_If_Judge_Enum.IF then
            -- nothing to do
        else
            if judgeData._ifResult == resultType then
                return node
            end
        end
    end
    return nil
end

function NodeIfJudge:getJudgeData(nodeId)
    for index, judgeData in ipairs(self._last_ifJudgeData) do
        if judgeData and judgeData._nodeId == nodeId then
            return judgeData
        end
    end
    return nil
end

function NodeIfJudge:setData(ifJudgeDataList)
   self._last_ifJudgeData = ifJudgeDataList or {}
end

return NodeIfJudge