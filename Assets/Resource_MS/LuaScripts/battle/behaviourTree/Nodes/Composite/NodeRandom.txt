---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 1:02
---  随机节点(组合节点)
---

--local NodeComposite = require_path("NodeComposite","battle/behaviourTree/Nodes/AbstractNode/NodeComposite")
---@class NodeRandom : NodeComposite
local NodeRandom = SimpleClassUtil:class(NodeComposite)

function NodeRandom:initialize(nodeType)
    NodeComposite.initialize(self,nodeType)
    self._randomCount = 0
    self._arr_ids = nil

end

function NodeRandom:onEnter()
    NodeComposite.onEnter(self)
    self._randomCount = 0
end

function NodeRandom:onExit()
    NodeComposite.onExit(self)
    self._randomCount = 0
end

function NodeRandom:getRandom()
    if self._randomCount == 0 or self._arr_ids == nil then
       self:resetIdArr()
    end
    local index = math.random(1,#self._arr_ids - self._randomCount)
    local value = self._arr_ids[index]
    self:remove(index)
    self._randomCount = self._randomCount + 1
    return value
end

function NodeRandom:resetIdArr()
    self._arr_ids = {}
    for i = 1, #self:getChildes() do
        self._arr_ids[i] = i
    end
end

function NodeRandom:remove(index)
    local last_count = #self._arr_ids - self._randomCount
    local remove_value = self._arr_ids[index]
    self._arr_ids[index] = self._arr_ids[last_count]
    self._arr_ids[last_count] = remove_value
end

return NodeRandom