---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 1:02
---  随机权重节点(组合节点)
---      按照权重选出一个 能 success 得执行 没有 就 继续随机 直到 有一个成功 或者 都失败
---      每次根据节点权重随机一个未执行的节点
---      总随机次数为子节点个数
---      当前执行节点返回 Success，退出停止 向父节点返回 Success
---      当前执行节点返回 Fail，退出当前节点 继续随机一个未执行的节点开始执行
---      当前执行节点返回 Running, 记录当前节点向父节点返回 Running 下次执行直接从该节点开始
---      如果所有节点都返回Fail，执行完所有节点后  向父节点返回 Fail

--local NodeRandom = require_path("NodeRandom","battle/behaviourTree/Nodes/Composite/NodeRandom")
---@class NodeRandomPriority : NodeRandom
local NodeRandomPriority = SimpleClassUtil:class(NodeRandom)

function NodeRandomPriority:initialize()
    NodeRandom.initialize(self,Enum_BT.Node_Type.Random_Priority)
    ---@type NodeBase
    self._lastRunningNode = nil
    self._totalPriority = 0
end

function NodeRandomPriority:onEnter()
    NodeRandom.onEnter(self)
    self._lastRunningNode = nil
end

function NodeRandomPriority:onExit()
    NodeRandom.onExit(self)
    if self._lastRunningNode then
        self._lastRunningNode:postPosition(Enum_BT.Node_ResultType.Fail)
        self._lastRunningNode = nil
    end
end


function NodeRandomPriority:execute(blackboard,agent,dt)
    self:log_enter("NodeRandomPriority    Entity: ",self:getEntityId())
    local index = 0
    if self._lastRunningNode then
        index = self._lastRunningNode:getNodeIndex()
    end
    self._lastRunningNode = nil
    local resultType = Enum_BT.Node_ResultType.Fail
    local count = #self:getChildes()
    for i = 1, count do
        if index <= 0 then
            index = self:getRandom()
        end
        local nodeBase = self:getChildes()[index]
        index = 0

        nodeBase:prePosition()
        resultType = nodeBase:execute(blackboard,agent,dt)
        nodeBase:postPosition(resultType)

        if resultType == Enum_BT.Node_ResultType.Fail then
            -- nothing to do
        elseif resultType == Enum_BT.Node_ResultType.Success then
            break
        else
            self._lastRunningNode = nodeBase
            break
        end
    end
    self:log("NodeRandomPriority   Entity: ",self:getEntityId(),    "  resultType :", resultType)
    return resultType
end

function NodeRandomPriority:getRandom()
    if self._randomCount == 0 or self._arr_ids == nil then
        self:resetIdArr()
    end
    local index = 0
    self._totalPriority = 0
    for i = 1, #self._arr_ids - self._randomCount do
        index = self._arr_ids[i]
        self._totalPriority = self._totalPriority + self:getChildesByIndex(index):getPriority()
    end

    local randomValue = math.random(0,self._totalPriority)
    local priority = 0
    for i = 1, #self._arr_ids - self._randomCount do
        index = self._arr_ids[i]
        priority = priority + self:getChildesByIndex(index):getPriority()
        if priority >= randomValue then
            self:remove(i)
            self._randomCount = self._randomCount + 1
            break
        end
    end
    return index
end

return NodeRandomPriority