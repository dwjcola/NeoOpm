---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 1:02
---  随机顺序节点(组合节点)
---      选出一个（没有权重） 随机节点 然后执行 下一次 在随机一个  直到所有节点 执行完 或者 有一个 节点 失败
---      每次随机一个未执行的节点 总随机次数为子节点个数
---     当前执行节点返回 Success，继续随机一个未执行的节点
---     当前执行节点返回 Fail，退出停止 向父节点返回 Fail
---      当前执行节点返回 Running, 记录当前节点 向父节点返回 Running，下次执行直接从该节点开始
---      如果所有节点都返回 Success 向父节点返回 Success


---@class NodeRandomSequence : NodeRandom
local NodeRandomSequence = SimpleClassUtil:class(NodeRandom)

function NodeRandomSequence:initialize()
    self.super:initialize(Enum_BT.Node_Type.Random_Sequence)
    ---@type NodeBase
    self._lastRunningNode = nil
end

function NodeRandomSequence:onEnter()
    self.super:onEnter()
end

function NodeRandomSequence:onExit()
    self.super:onExit()
    if self._lastRunningNode then
        self._lastRunningNode:postPosition(Enum_BT.Node_ResultType.Fail)
        self._lastRunningNode = nil
    end
end


function NodeRandomSequence:execute(blackboard,contextManager)
    local index = 0
    if self._lastRunningNode then
        index = self._lastRunningNode:getNodeIndex()
    end
    self._lastRunningNode = nil
    local resultType = Enum_BT.Node_ResultType.Fail
    local count = #self:getChildes()
    for i = 1, count do
        if index <= 0 then
            index = self:getRandom()
        end
        local nodeBase = self:getChildes()[index]
        index = 0

        nodeBase:prePosition()
        resultType = nodeBase:execute(blackboard,contextManager)
        nodeBase:postPosition(resultType)

        if resultType == Enum_BT.Node_ResultType.Fail then
            break
        elseif resultType == Enum_BT.Node_ResultType.Success then
            -- nothing to do
        else
            self._lastRunningNode = nodeBase
            break
        end
    end
    self:log("NodeRandomSequence   Entity: ",self:getEntityId(),    "  resultType :", resultType)
    return resultType
end


return NodeRandomSequence