---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lyb.
--- DateTime: 2021/12/8 1:02
---  顺序节点(组合节点)
---      选择节点：依次从头顺次遍历执行所有子节点 直到 所有都返回 Success 或者 有一个节点都失败
---     当前执行节点返回 Success，就继续执行后续节点
---      当前执行节点返回 Fail，退出停止，向父节点返回 Fail，下次执行直接从第一个节点开始
---      当前执行节点返回 Running, 记录当前节点，向父节点返回 Running，下次执行直接从该节点开始
---      如果所有节点都返回 Success，向父节点返回 Success
--local NodeComposite = require_path("NodeComposite","battle/behaviourTree/Nodes/AbstractNode/NodeComposite")
---@class NodeSequence : NodeComposite
local NodeSequence = SimpleClassUtil:class(NodeComposite)

function NodeSequence:initialize()
    NodeComposite.initialize(self,Enum_BT.Node_Type.Sequence)
    ---@type NodeBase
    self._lastRunningNode = nil
end

function NodeSequence:onEnter()
    NodeComposite.onEnter(self)
end

function NodeSequence:onExit()
    NodeComposite.onExit(self)
    if self._lastRunningNode then
        self._lastRunningNode:postPosition(Enum_BT.Node_ResultType.Fail)
        self._lastRunningNode = nil
    end
end


function NodeSequence:execute(blackboard,contextManager)
    self:log_enter("NodeSequence    Entity: ",self:getEntityId())
    local index = 1
    if self._lastRunningNode then
        index = self._lastRunningNode:getNodeIndex()
    end
    self._lastRunningNode = nil
    local resultType = Enum_BT.Node_ResultType.Fail
    local count = #self:getChildes()
    for i = index, count do
        local nodeBase = self:getChildesByIndex(i)

        nodeBase:prePosition()
        resultType = nodeBase:execute(blackboard,contextManager)
        nodeBase:postPosition(resultType)

        if resultType == Enum_BT.Node_ResultType.Fail then
            break
        elseif resultType == Enum_BT.Node_ResultType.Success then
            -- nothing to do
        else
            self._lastRunningNode = nodeBase
            break
        end
    end
    self:log("NodeSequence   Entity: ",self:getEntityId(),    "  resultType :", resultType)
    return resultType
end


return NodeSequence