---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/7 16:30
---@class EventManager:SimpleClassUtil
local EventManager = SimpleClassUtil:class()

function EventManager:initialize()
   self:onInit()
end

function EventManager:onInit()
    ---@type EventSpeaker[]
    self._events = {}
end
---@param eventName any
---@param callback fun(listener:table, ...) | fun(...)
---@return table | function @handleID，若listener有值则返回它，否则返回函数callback
function EventManager:AddListener(eventName, callback, listener)
    -- assert(type(callback) == "function", string.format("event callback invalid!!! %s -> %s", eventName, callback))
    if type(callback) ~= "function" then
        Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
        Logger.warning(string.format("event callback invalid!!! %s -> %s", eventName, callback))
        Logger.warning("======================================================================")
    end
    local evt = self._events[eventName]
    if not evt then
        evt = EventSpeaker:new()
        evt.eventName = eventName
        self._events[eventName] = evt
    end
    return evt:Add(callback, listener)
end

---@param eventName any
---@param key table | function @handleID，AddListener返回值
function EventManager:RemoveListener(eventName, key)
    -- assert(key ~= nil)
    if key == nil then
        Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
        Logger.warning(string.format("RemoveListener key is nil! key: %s -> %s", eventName, key))
        Logger.warning("======================================================================")
    end
    local evt = self._events[eventName]
    if evt then
        evt:Remove(key)
        if evt:Count() == 0 then
            self._events[eventName] = nil
        end
    end
end


---@param eventName any  @ 事件回调函数的参数
function EventManager:Dispatch(eventName, ...)
    local evt = self._events[eventName]
    if evt then
        evt:Fire(...)
    end
end


---@param eventName any  @ 事件回调函数的参数
function EventManager:Dispatch_battle(eventName, ...)
   self:Dispatch(eventName, ...)
end

function EventManager:Clear(eventName)
    local evt = self._events[eventName]
    if evt then
        evt:Clear()
    end
end

function EventManager:ClearAll()
    ---@param evt EventSpeaker
    for i, evt in pairs(self._events) do
        evt:Clear()
        self._events[i] = nil
    end
end

function EventManager:release()
    self:ClearAll()
    self._events = nil
end


--添加事件
function EventManager:AddEvent_CS(key,callBack)
    CS.LC.AddEvent(self,key,callBack);
end
--SendEvent事件
function EventManager:SendEvent_CS(key,para,p2,p3,p4)
    CS.LC.SendEvent(key,para,p2,p3,p4);
end
--移除事件
function EventManager:RemoveEvent_CS(key,callBack)
    CS.LC.RemoveEvent(self,key,callBack);
end

return EventManager