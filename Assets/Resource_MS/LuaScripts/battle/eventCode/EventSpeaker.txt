---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/17 14:15
---
---@class EventSpeaker @事件类
local EventSpeaker = SimpleClassUtil:class()

function EventSpeaker:initialize()
    ---@type table<table, function> | table
    self._members = {}

    ---@type table<number, any> | table
    self._keys = {}

    -- modify：去除toRmv模式
    -- self._toRmv = IndexSet:new()
    -- self._inFire = false
    self.eventName = ""
end

function EventSpeaker:Clear()
    -- modify：去除toRmv模式
    -- if self._inFire then
    --     for _, v in ipairs(self._keys) do
    --         self._toRmv:add(v)
    --     end
    -- else
    --     self._members = {}
    --     self._keys = {}
    --     self._toRmv:clear()
    -- end

    self._members = {}
    self._keys = {}
end

function EventSpeaker:shallowCopy_arr(target)
    local tmp = {}
    target = target or {}
    for i = 1, #target do
        table.insert(tmp,target[i])
    end
    return tmp
end

function EventSpeaker:shallowCopy_dic(target)
    local tmp = {}
    target = target or {}
    for i, v in pairs(target) do
        tmp[i] = v
    end
    return tmp
end

function EventSpeaker:Fire(...)
    -- modify：去除toRmv模式
    -- self._inFire = true

    local i = 1
    local key
    ---@type function
    local member
    local tmp_keys = self:shallowCopy_arr(self._keys)
    local tmp_member = self:shallowCopy_dic(self._members)
    local tmp_len =  #tmp_keys
    while i <= tmp_len do
        key = tmp_keys[i]
        member = tmp_member[key]
        if member then
            if type(member) == "function" then
                member(key, ...)
            else
                Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
                Logger.warning("not found member %s - %s", self.eventName, key,member)
                Logger.warning("======================================================================")
            end
        else
            if type(key) == "function" then
                key(...)
            else
                Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
                Logger.warning(string.format("not found member %s - %s", self.eventName, key))
                Logger.warning("======================================================================")
            end
        end
        i = i + 1
    end

    -- modify：去除toRmv模式
    -- local i = 1
    -- local key
    -- ---@type function
    -- local member
    -- while i <= #self._keys do
    --     -- key = self._keys[i]
    --     -- member = self._members[key]
    --     -- if not self._toRmv:contains(key) then
    --     --     if member then
    --     --         if type(member) == "function" then
    --     --             member(key, ...)
    --     --         else
    --     --             Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
    --     --             Logger.warning("not found member %s - %s", self.eventName, key,member)
    --     --             Logger.warning("======================================================================")
    --     --         end
    --     --     else
    --     --         if type(key) == "function" then
    --     --             key(...)
    --     --         else
    --     --             Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
    --     --             Logger.warning(string.format("not found member %s - %s", self.eventName, key))
    --     --             Logger.warning("======================================================================")
    --     --         end
    --     --     end
    --     -- end
    --     i = i + 1
    -- end

    -- modify：去除toRmv模式
    -- self._inFire = false

    -- for i = self._toRmv:size(), 1, -1 do
    --     key = self._toRmv:at(i)
    --     self:_rmv(key)
    -- end
end

---@param func function
---@param target table
---@return table | function @key
function EventSpeaker:Add(func, target)
    local key = target or func
    if self._members[key] then
        Logger.error("Multiple Add EventSpeaker Event Listener", key)
        return
    end

    local idx = #self._keys + 1
    self._keys[idx] = key
    if target then
        self._members[key] = func
    end

    return key
end

---@private
function EventSpeaker:_rmv(key)
    local item, idx
    local keys = self._keys
    for i = 1, #keys do
        item = keys[i]
        if item == key then
            idx = i
            break
        end
    end

    if idx then
        if self._members[key] then
            -- key is target
            self._members[key] = nil
        end
        table.remove(keys, idx)
        -- modify：去除toRmv模式
        -- self._toRmv:remove(key)
    else
        Logger.warning("================== 看到此消息，请给程序报BUG！！！！====================")
        Logger.warning(string.format("Remove Event Fail! Not Found Key: %s -> %s", self.eventName, key))
        Logger.warning("======================================================================")
    end
end

---@param key table | function
function EventSpeaker:Remove(key)
    -- modify：去除toRmv模式
    -- if self._inFire then
    --     self._toRmv:add(key)
    -- else
    --     self:_rmv(key)
    -- end
    self:_rmv(key)
end

---@return number
function EventSpeaker:Count()
    return #self._keys
end

return EventSpeaker
