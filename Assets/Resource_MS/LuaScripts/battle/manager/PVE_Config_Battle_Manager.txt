---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/13 15:30
---
---@class PVE_Config_Battle_Manager:MiddleClass
local PVE_Config_Battle_Manager = SimpleClassUtil:class()

function PVE_Config_Battle_Manager:initialize(data,isOnlyLogic,battleTeam)
    -- todo 检查 data 合法性
    self._battleData = data or {}
    ---@type boolean 是否只跑逻辑
    self._isOnlyLogic = isOnlyLogic or false

    self._interval = 0.033334

    self._battleTime = 0
    --- 单位 ms
    self._time = 0

    self._loop = 0

    self._maxLoop = 10

    self._ready = false
    ---@type BattleTeam
    self._battleTeam = battleTeam

end



function PVE_Config_Battle_Manager:start()
    self:formalInit()
    self._ready = true
end

function PVE_Config_Battle_Manager:formalInit()

    self._blackBoard = BlackBoard:new()

    if not self._isOnlyLogic then
        self._world_render = BattleRenderWorld:new()
        self._world_render:init(self._blackBoard,self._battleData,self)
    end
    self._world_logic = BattleLogicWorld:new()
    self._world_logic:init(self._blackBoard,self._battleData,self)
end

function PVE_Config_Battle_Manager:update(dt)
    if self._ready then
        self._time =  self._time + dt * 1000
        if not self:_updateBattle(dt)  then
            self:_updateRender(dt)
        end
    end
end

function PVE_Config_Battle_Manager:_updateBattle(dt)
    local actime = self._battleTime + dt
    self._loop = 0
    -- Logger.filter("PVEBattle","_updateBattle",dt,actime)
    while actime >= self._interval and self._loop < self._maxLoop do
        actime = actime - self._interval
        self._loop = self._loop + 1
        --if self:updateLogic(BattleConstant.FrameTime) then
        --    self:_changeToWait()
        --    return
        --end
        self:updateLogic(BattleConstant.FrameTime)
    end
    self._battleTime = actime
    -- 后续优化帧率，先打开所有
    do
        return false
    end

    return self._loop > 0
end

function PVE_Config_Battle_Manager:updateLogic(dt)
    -- CSharpImport.BeginSample("PVEBattle_updateLogic")
    if self._world_logic then
        self._battleResult = self._world_logic:update(dt)
        -- CSharpImport.EndSample()
        return self._battleResult
    end

end


function PVE_Config_Battle_Manager:_updateRender(dt)
    local interpolation = self._battleTime / self._interval
    --Logger.filter("BattleManager.updateBattle",1000*dt,interpolation)
    self:updateRender(dt * 1000, interpolation)
end

function PVE_Config_Battle_Manager:updateRender(dt, interpolation)
    -- CSharpImport.BeginSample("PVEBattle_updateRender")
    --self:processFrame()
    if self._world_render then
        self._world_render:update(dt, interpolation)
    end

    -- CSharpImport.EndSample()
end


return PVE_Config_Battle_Manager

