---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/20 14:51
---@class BattleMainNode:ProcessNodeBase
local BattleMainNode = SimpleClassUtil:class(ProcessNodeBase)

---@param target BattleMainNode
local function battleUpdateFunction(target)
   return function (task, dt)
      target:update(dt)
   end
end

function BattleMainNode:initialize(tree,index,battleData,battleTimes)

   ---@type MainBattleProcessTree
   self._tree = tree
   ---@type number
   self._index = index

   self._data = battleData

   self._battleTimes = battleTimes

   self._scheduler = BattleScheduler:new(1)

   self._scheduler:start()


end

function BattleMainNode:init()

end

function BattleMainNode:onStart()
   -- todo 重新获取布阵信息 battleData
   ---@type BattleTeam
   local battleTeam = self:getBattleTeam()
   if battleTeam  and battleTeam._loadingFinish then
      BattleProxy:OpenBattleMainView()
      self._data.team_self = BattleProxy:getBattleTeamMap(self._battleTimes).team_self

      self:toStartBattle(false)
   else
      BattleLog.error("等待加载完成")
   end

end

function BattleMainNode:getBattleTeam()
   if self._tree and self._tree._blackBoard and self._tree._blackBoard._teamList then
      return self._tree._blackBoard._teamList[self._battleTimes]
   end
   return { }
end

function BattleMainNode:toStartBattle(isServer)

   self._battleManager = PVE_Config_Battle_Manager:new(self._data,isServer,self:getBattleTeam())
   self._battleManager:start()
   self:startScheduler()
end



function BattleMainNode:startScheduler()
   local updater = battleUpdateFunction(self)
   self._updateTask = self._scheduler:schedule(updater)
end

function BattleMainNode:onUpdate()

end

function BattleMainNode:onEnd()
   if self._updateTask then
      self._updateTask:release()
      self._updateTask = nil
   end
end

function BattleMainNode:onExit()
   if self._updateTask then
      self._updateTask:release()
      self._updateTask = nil
   end
end

function BattleMainNode:update(dt)
   if self._battleManager and self._battleManager.update then
      self._battleManager:update(dt)
   end
end

function BattleMainNode:setTimeScale(timeScale)
   self._scheduler:setTimeScale(timeScale)

end

function BattleMainNode:pause()
   self._scheduler:pause()

end

function BattleMainNode:resume()
   self._scheduler:resume()

end

function BattleMainNode:stopScheduler()
   self._scheduler:stop()
end

return BattleMainNode