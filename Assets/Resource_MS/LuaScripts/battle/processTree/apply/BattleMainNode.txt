---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/20 14:51
---@class BattleMainNode:ProcessNodeBase
local BattleMainNode = SimpleClassUtil:class(ProcessNodeBase)

---@param target BattleMainNode
local function battleUpdateFunction(target)
   return function (task, dt)
      target:update(dt)
   end
end

function BattleMainNode:initialize(tree,index,type,battleTimes)

   ---@type MainBattleProcessTree
   self._tree = tree
   ---@type number
   self._index = index



   self._battleTimes = battleTimes

   self._scheduler = BattleScheduler:new(1)

   self._scheduler:start()


end

function BattleMainNode:init()
   self._event_Obj = EventManager:AddListener(EventType.Event_GetBattleData,self.handleBattleData,self)
end

function BattleMainNode:onStart()
   -- todo 请求战斗数据
   -- BattleProxy:sendMsg_getBattleData()
   self:handleBattleData()
end

function BattleMainNode:handleBattleData(rep,userData)
   self._data = BattleUtils:getTestBattleData()
   -- todo 暂且这么处理 以后会直接用布阵得数据
   self._data.team_self.teamMap = BattleProxy:getBattleTeamMap(self._battleTimes).team_self.teamMap

   self._battleTeam = BattleTeam:new(self._battleTimes)
   self._battleTeam:setLoadData(self._data)
   self._battleTeam:tryLoad(function()
      BattleProxy:OpenBattleMainView({battleData = self._data,battleTeam =  self._battleTeam })

      -- todo 开始战斗 横幅
      -- todo 开始战斗得其他准备工作
      self:toStartBattle(false)
   end)

   --self:toStartBattle(false)
end



function BattleMainNode:toStartBattle(isServer)

   self._battleManager = PVE_Config_Battle_Manager:new(self._data,isServer, self._battleTeam)
   self._battleManager:start()
   self:startScheduler()
end



function BattleMainNode:startScheduler()
   local updater = battleUpdateFunction(self)
   self._updateTask = self._scheduler:schedule(updater)
end

function BattleMainNode:onUpdate()

end

function BattleMainNode:onEnd()
   if self._updateTask then
      self._updateTask:release()
      self._updateTask = nil
   end
   EventManager:RemoveListener(EventType.Event_GetBattleData,self._event_Obj)
end

function BattleMainNode:onExit()
   if self._updateTask then
      self._updateTask:release()
      self._updateTask = nil
   end
   EventManager:RemoveListener(EventType.Event_GetBattleData,self._event_Obj)
end

function BattleMainNode:update(dt)
   if self._battleManager and self._battleManager.update then
      self._battleManager:update(dt)
   end
end

function BattleMainNode:setTimeScale(timeScale)
   self._scheduler:setTimeScale(timeScale)

end

function BattleMainNode:pause()
   self._scheduler:pause()

end

function BattleMainNode:resume()
   self._scheduler:resume()

end

function BattleMainNode:stopScheduler()
   self._scheduler:stop()
end

return BattleMainNode