---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuyubao.
--- DateTime: 2021/12/17 15:12
---
---@class SchedulerHub
---@field timerTbl table<string,TimerScheduler.Timer>
local SchedulerHub = SimpleClassUtil:class()

function SchedulerHub:initialize()
    self.timerTbl = {}
end

function SchedulerHub:release()
    self:freeAll()
end

function SchedulerHub:getTimer(key)
    local timer = self.timerTbl[key]
    return timer
end

function SchedulerHub:_freeOneTimer(key)
    ---@type TimerScheduler.Timer
    local timer = self.timerTbl[key]
    if timer then
        TimerScheduler:removeSchedule(timer)
        self.timerTbl[key] = nil
    end
end

function SchedulerHub:terminateTimer(key)
    self:_freeOneTimer(key)
end

function SchedulerHub:freeAll()
    for key, value in pairs(self.timerTbl) do
        -- Logger.print("SchedulerHub:freeAll", tostring(self), key)
        TimerScheduler:removeSchedule(value)
        self.timerTbl[key] = nil
    end
end

---@param key sring
---@param delay number @延迟秒回调
---@param func fun(obj:table, data:any) | fun(data:any) | fun() @回调方法
---@param obj table @回调self
---@param data any @回调参数
---@return TimerScheduler.Timer
function SchedulerHub:scheduleOnce(key, delay, func, obj, data)
    self:_freeOneTimer(key)
    local timer = TimerScheduler:scheduleOnce(delay, func, obj, data)
    self.timerTbl[key] = timer
    return timer
end

---@param key sring
---@param delay number @延迟秒回调
---@param func fun(obj:table, data:any) | fun(data:any) @回调方法
---@param obj table @回调self
---@param data any @回调参数
---@param times number @调用次数
---@return TimerScheduler.Timer
function SchedulerHub:scheduleTimes(key, delay, func, obj, data, times)
    self:_freeOneTimer(key)
    local timer = TimerScheduler:scheduleTimes(delay, func, obj, data, times)
    self.timerTbl[key] = timer
    return timer
end

---重复间隔回调，默认保留Timer(keep=true)
---@param key sring
---@param delay number @延迟秒回调
---@param func fun(obj:table, data:any) | fun(data:any) @回调方法
---@param obj table @回调self
---@param data any @回调参数
---@return TimerScheduler.Timer
function SchedulerHub:scheduleRepeat(key, delay, func, obj, data)
    self:_freeOneTimer(key)
    local timer = TimerScheduler:scheduleRepeat(delay, func, obj, data)
    self.timerTbl[key] = timer
    return timer
end

---每帧回调，默认保留Timer(keep=true)
---@param key sring
---@param func fun(obj:table, data:any) | fun(data:any) @回调方法
---@param obj table @回调self
---@param data any @回调参数
---@return TimerScheduler.Timer
function SchedulerHub:schedulePerFrame(key, func, obj, data)
    self:_freeOneTimer(key)
    local timer = TimerScheduler:schedulePerFrame(func, obj, data)
    self.timerTbl[key] = timer
    return timer
end

---下一帧回调
---@param key sring
---@param func fun(obj:table, data:any) | fun(data:any) @回调方法
---@param obj table @回调self
---@param data any @回调参数
---@return TimerScheduler.Timer
function SchedulerHub:nextFrame(key, func, obj, data)
    self:_freeOneTimer(key)
    local timer = TimerScheduler:nextFrame(func, obj, data)
    self.timerTbl[key] = timer
    return timer
end

return SchedulerHub
