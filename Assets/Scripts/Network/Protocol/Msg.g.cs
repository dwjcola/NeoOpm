// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SA1NMRyIhCglIYW5kc2hha2USFAoMcHJvdG9WZXJzaW9u",
            "GAEgASgFIicKCVJldHVybk1zZxIMCgRjb2RlGAEgASgFEgwKBGFyZzEYAiAB",
            "KAQiJQoIU2VydmVySWQSDAoEY29kZRgBIAEoBRILCgNzaWQYAiABKAkiJgoI",
            "TG9naW5SZXQSDAoEY29kZRgBIAEoBRIMCgR0aW1lGAIgASgEIi0KDVVzZXJM",
            "b2dpbkluZm8SDwoHYWNjb3VudBgBIAEoCRILCgNwd2QYAiABKAkiTQoNVXNl",
            "ckVudGVySW5mbxIPCgdhY2NvdW50GAEgASgJEg8KB3JvbGVfaWQYAiABKAQS",
            "DQoFdG9rZW4YAyABKAkSCwoDc2lkGAQgASgJIjEKCkF0dGFja0RhdGESEAoI",
            "dHJvb3BfaWQYASABKAUSEQoJdGFyZ2V0X2lkGAIgASgFIhsKCENoYXRJbmZv",
            "Eg8KB2NvbnRlbmQYASABKAkiKgoMS2V5VmFsdWVQYWlyEgsKA2tleRgBIAEo",
            "BRINCgV2YWx1ZRgCIAEoBSIaCglTaW1wbGVNc2cSDQoFcGFyYW0YASABKAUi",
            "FQoHVUxvbmdJZBIKCgJpZBgBIAEoBCIaCgtVTG9uZ0lkTGlzdBILCgNpZHMY",
            "ASADKAQiKAoHQXR0ckluYxIOCgZhdHRySWQYASABKAUSDQoFdmFsdWUYAiAB",
            "KAUiQQoOUGxheWVyQXR0cnNJbmMSEAoIcGxheWVySWQYASABKAQSHQoHaW5j",
            "SW5mbxgCIAMoCzIMLlNMRy5BdHRySW5jKtImCg1ScGNSZXR1cm5Db2RlEgkK",
            "BUJlZ2luEAASHgoaVXBkYXRlQmxvY2tMb2N0aW9uX1N1Y2Nlc3MQChIlChhC",
            "bG9ja09wZXJhdGVfSWRDYW5ub3RVc2UQ9f//////////ARImChlCbG9ja3NP",
            "cGVyYXRlX0FyZ05vdEFycmF5EPT//////////wESIQoUQmxvY2tPcGVyYXRl",
            "X0FyZ0xhY2sQ8///////////ARIgChNCbG9ja09wZXJhdGVfUG9zRXJyEPL/",
            "/////////wESIgoVQmxvY2tPcGVyYXRlX05vdEluQmFnEPH//////////wES",
            "IQoUQmxvY2tPcGVyYXRlX05vQmxvY2sQ8P//////////ARIrCh5CbG9ja09w",
            "ZXJhdGVfV2l0aGRyYXdGdW5jQnVpbGQQ7///////////ARIkChdQbGF5ZXJf",
            "QWxsQnVpbGRpbmdfX0VychDz/v////////8BEiYKGVBsYXllcl9TaW5nbGVC",
            "dWlsZGluZ19FcnIQ8v7/////////ARIkChdQbGF5ZXJfQnVpbGRpbmdfTm90",
            "SWRsZRDx/v////////8BEiMKFkJ1aWxkaW5nRnVuY3Rpb25fSWRFcnIQ8P7/",
            "////////ARIjChZCdWlsZGluZ1F1ZXVlX1R5cGVfRXJyEO/+/////////wES",
            "JQoYUmFwaWRGaW5pc2hfQ29uc3VtZV9MYWNrEO7+/////////wESHQoQQnVp",
            "bGRpbmdfTm9RdWV1ZRDt/v////////8BEh4KEUJ1aWxkX0hhc19Qcm9kdWN0",
            "EOz+/////////wESJQoYTmV3QnVpbGRfQ29uc3VtZV9MYWNrUmVzEOv+////",
            "/////wESJgoZTmV3QnVpbGRfQ29uc3VtZV9MYWNrSXRlbRDp/v////////8B",
            "EhwKD0J1aWxkaW5nX0FyZ0VychDo/v////////8BEhUKEE5ld0J1aWxkX1N1",
            "Y2Nlc3MQlgESFgoSRG9SZXNlYXJjaF9TdWNjZXNzEEYSIgoVRG9SZXNlYXJj",
            "aF9UZWNoSWRfRXJyELn//////////wESIAoTRG9SZXNlYXJjaF9MZXZlbE1h",
            "eBC4//////////8BEiQKF0RvUmVzZWFyY2hfUHJlVGVjaF9OZWVkELf/////",
            "/////wESKQocRG9SZXNlYXJjaF9UZWNoQnVpbGRMdmxfTmVlZBC2////////",
            "//8BEiMKFkRvUmVzZWFyY2hfQ29uc3VtZUxhY2sQtf//////////ARIWChJQ",
            "dWJSZWNydWl0X1N1Y2Nlc3MQUBIjChZQdWJSZWNydWl0X0NmZ0RhdGFfRXJy",
            "EK///////////wESJwoaUHViUmVjcnVpdF9GcmVlX011bHRpVGltZXMQrv//",
            "////////ARIpChxQdWJSZWNydWl0X0NvbW1vbl9GcmVlX1VzZVVwEK3/////",
            "/////wESKAobUHViUmVjcnVpdF9Db21tb25fRnJlZV9JbkNEEKz/////////",
            "/wESIgoVUHViUmVjcnVpdF9HYWluX0VtcHR5EKv//////////wESJwoaUHVi",
            "UmVjcnVpdF9IaWdoX0ZyZWVfVXNlVXAQqv//////////ARIkChdQdWJSZWNy",
            "dWl0X0NvbnN1bWVfTGFjaxCp//////////8BEhoKFlNldE5vdFNob3dGbGFn",
            "X1N1Y2Nlc3MQWhIbChdBY2NlbGVyYXRlUXVldWVfU3VjY2VzcxBkEhcKE0Nh",
            "bmNlbFF1ZXVlX1N1Y2Nlc3MQZRIgChNBY2NlbGVyYXRlX1RpbWVfRXJyEJv/",
            "/////////wESGgoNR2V0X1F1ZXVlX0VychCa//////////8BEiIKFUFjY2Vs",
            "ZXJhdGVfSXRlbUlkX0VychCZ//////////8BEioKHUFjY2VsZXJhdGVfSXRl",
            "bV9RdWV1ZVR5cGVfRXJyEJj//////////wESJAoXQWNjZWxlcmF0ZV9Db25z",
            "dW1lX0xhY2sQl///////////ARIlChhBY2NlbGVyYXRlX0J1eV9JdGVtX0Zh",
            "aWwQlv//////////ARIZChRUcmFpblNvbGRpZXJfU3VjY2VzcxCgARIgChNU",
            "cmFpblNvbGRpZXJfQXJnRXJyEN/+/////////wESIAoTVHJhaW5Tb2xkaWVy",
            "X0NmZ0VychDe/v////////8BEiYKGVRyYWluU29sZGllcl9UeXBlTm90TWF0",
            "Y2gQ3f7/////////ARIkChdUcmFpblNvbGRpZXJfTnVtT3Zlck1heBDc/v//",
            "//////8BEiIKFVRyYWluU29sZGllcl9UZWNoTmVlZBDb/v////////8BEiUK",
            "GFRyYWluU29sZGllcl9Db25zdW1lTGFjaxDa/v////////8BEhkKFEJ1aWxk",
            "TGV2ZWxVcF9TdWNjZXNzEKoBEiIKFUJ1aWxkTGV2ZWxVcF9MZXZlbE1heBDV",
            "/v////////8BEikKHEJ1aWxkTGV2ZWxVcF9QcmVCdWlsZEx2bE5lZWQQ1P7/",
            "////////ARIiChVCdWlsZExldmVsVXBfSXRlbUxhY2sQ0/7/////////ARIh",
            "ChRCdWlsZExldmVsVXBfUmVzTGFjaxDS/v////////8BEicKGkJ1aWxkTGV2",
            "ZWxVcF9RdWV1ZU51bUxpbWl0ENH+/////////wESGQoUVHJlYXRXb3VuZGVk",
            "X1N1Y2Nlc3MQvgESJQoYVHJlYXRXb3VuZGVkX0NvbnN1bWVMYWNrEMH+////",
            "/////wESJAoXQ2hhdF9QbGF5ZXJDaGFubmVsc19FcnIQrf7/////////ARIj",
            "ChZDaGF0X1NpbmdsZUNoYW5uZWxfRXJyEKz+/////////wESJQoYQ2hhdF9Q",
            "bGF5ZXJfTm90SW5DaGFubmVsEKv+/////////wESHgoRQ2hhdF9Hcm91cE5v",
            "dEZpbmQQqv7/////////ARIiChVDaGF0X1BsYXllck5vdEluR3JvdXAQqf7/",
            "////////ARIfChJDaGF0X1BsYXllckluR3JvdXAQqP7/////////ARIgChND",
            "aGF0X0RlbEJlZm9yZUNsZWFyEKf+/////////wESIQoUQ2hhdF9PcEF1dGhv",
            "cml0eU5lZWQQpv7/////////ARIgChNDaGF0X0ZyaWVuZHNoaXBOZWVkEKX+",
            "/////////wESIgoVQ2hhdF9QbGF5ZXJEQkluZm9fRXJyEKT+/////////wES",
            "JAoXQ2hhdF9BaW1QbGF5ZXJJZEludmFsaWQQmf7/////////ARIlChhDaGF0",
            "X0FpbVBsYXllck5vdEluR3JvdXAQmP7/////////ARInChpDaGF0X0FpbVBs",
            "YXllck5vdEluQ2hhbm5lbBCX/v////////8BEhYKEUNoYXRFbnRyeV9TdWNj",
            "ZXNzENwBEiIKFUNoYXRFbnRyeV9NYWluTHZsTmVlZBCi/v////////8BEhsK",
            "DkNoYXRFbnRyeV9JbkNEEKH+/////////wESJAoXQ2hhdEVudHJ5X01zZ0xl",
            "bk92ZXJNYXgQoP7/////////ARIlChhDaGF0RW50cnlfUHJpdmF0ZUJsb2Nr",
            "ZWQQn/7/////////ARIlChhDcmVhdGVHcm91cF9Qb3NpdGlvbk5lZWQQj/7/",
            "////////ARIkChdDcmVhdGVHcm91cF9Hcm91cE51bU1heBCO/v////////8B",
            "EikKHENyZWF0ZUdyb3VwX1NlbGZNYW5hZ2VOdW1NYXgQjf7/////////ARIi",
            "ChVDcmVhdGVHcm91cF9Wb2x1bWVNYXgQjP7/////////ARIiChVDcmVhdGVH",
            "cm91cF9Wb2x1bWVNaW4Qi/7/////////ARIUCg9PcEdyb3VwX1N1Y2Nlc3MQ",
            "+gESGQoUT3BHcm91cF9EaXNpbWlzc0RvbmUQ+wESFQoQT3BHcm91cF9Kb2lu",
            "RG9uZRD8ARIVChBPcEdyb3VwX0V4aXREb25lEP0BEhwKF09wR3JvdXBfTmVl",
            "ZENvbmZpcm1FeGl0EP4BEiIKFU9wR3JvdXBfSW52YWxpZE9wVHlwZRCF/v//",
            "//////8BEh8KEk9wR3JvdXBfQ2Fubm90Sm9pbhCE/v////////8BEh8KEk9w",
            "R3JvdXBfQ2Fubm90S2ljaxCD/v////////8BEhwKF09wR3JvdXBfTW9kaWZ5",
            "R05hbWVEb25lEP8BEiMKFk9wR3JvdXBfU2Vuc2l0aXZlV29yZHMQgv7/////",
            "////ARIZChRDaGF0X1NldEZsYWdfU3VjY2VzcxCOAhIfChpDaGF0X1NldFBs",
            "YXllckZsYWdfU3VjY2VzcxCYAhIcChdDaGF0X1JlYWROZXdNc2dfU3VjY2Vz",
            "cxCiAhIfChpTZXRBY3RpdmVNYWluU2tpbGxfU3VjY2VzcxCsAhIqCh1TZXRB",
            "Y3RpdmVNYWluU2tpbGxfUG9zSW52YWxpZBDT/f////////8BEikKHFNldEFj",
            "dGl2ZU1haW5Ta2lsbF9JZEludmFsaWQQ0v3/////////ARImChlTZXRBY3Rp",
            "dmVNYWluU2tpbGxfTG9ja2VkENH9/////////wESGwoWQ2xpY2tHZXRSZXdh",
            "cmRfU3VjY2VzcxDOBBIiChVDbGlja0dldFJld2FyZF9DYW5ub3QQsfv/////",
            "////ARIiChVDbGlja0dldFJld2FyZF9Ob1Rhc2sQsPv/////////ARInChpD",
            "bGlja0dldFJld2FyZF9QbGF5ZXJJZEVychCv+/////////8BEhoKFU9wZW5B",
            "Y3RpdmVCb3hfU3VjY2VzcxDYBBImChlPcGVuQWN0aXZlQm94X1BsYXllcklk",
            "RXJyEKf7/////////wESJAoXT3BlbkFjdGl2ZUJveF9MYWNrUG9pbnQQpvv/",
            "////////ARInChpPcGVuQWN0aXZlQm94X09wZW5lZEJlZm9yZRCl+///////",
            "//8BEiUKGE9wZW5BY3RpdmVCb3hfQm94SW5mb0VychCk+/////////8BEhMK",
            "DlRhc2tfT3BTdWNjZXNzEKgFEhsKDlRhc2tfU3RhdHVzRXJyENf6////////",
            "/wESGQoMVGFza19JbmZvRXJyENb6/////////wESIgoVUGxheWVySGVyb2Vz",
            "X0RhdGFfRXJyEN/5/////////wESIwoWUGxheWVyX1NpbmdsZV9IZXJvX0Vy",
            "chDe+f////////8BEh8KElBsYXllcl9IZXJvX0FyZ0VychDd+f////////8B",
            "EiAKE1BsYXllcl9IZXJvX0V4aXN0ZWQQ3Pn/////////ARIiCh1QbGF5ZXJf",
            "RXhpc3RIZXJvX0NvbnZlcnRfRG9uZRCgBhIZChRQbGF5ZXJfR2V0X0hlcm9f",
            "RG9uZRChBhIjChZIZXJvX0FkZEV4cF9FeHBJbnZhbGlkEMv5/////////wES",
            "IQoUSGVyb19BZGRFeHBfTHZsTGltaXQQyvn/////////ARIkChdIZXJvX0Fk",
            "ZEV4cF9Vc2VJdGVtRmFpbBDJ+f////////8BEhsKFkhlcm9fQWRkRXhwX1Jl",
            "YWNoTGltaXQQtAYSGAoTSGVyb19BZGRFeHBfU3VjY2VzcxC1BhIlChhIZXJv",
            "X0luY1N0YXJfVXNlSXRlbUZhaWwQwfn/////////ARIkChdIZXJvX0luY1N0",
            "YXJfUmVhY2hMaW1pdBDA+f////////8BEhkKFEhlcm9fSW5jU3Rhcl9TdWNj",
            "ZXNzEL4GEh4KGUhlcm9fU2V0TWFpbkZpZ2h0X1N1Y2Nlc3MQyAYSJQoYSGVy",
            "b19TZXRNYWluRmlnaHRfQXJnRXJyELf5/////////wESHgoZSGVyb19Ta2ls",
            "bExldmVsVXBfU3VjY2VzcxCkCBIlChhIZXJvX1NraWxsTGV2ZWxVcF9Mb2Nr",
            "ZWQQ2/f/////////ARInChpIZXJvX1NraWxsTGV2ZWxVcF9JdGVtTGFjaxDa",
            "9/////////8BEicKGkhlcm9fU2tpbGxMZXZlbFVwX01heExldmVsENn3////",
            "/////wESJQoYSGVyb19Ta2lsbExldmVsVXBfQ2ZnRXJyENj3/////////wES",
            "GAoTTmV3YmllR3VpZGVfU3VjY2VzcxCuCBIcChdUdXJyZXRfUmVjb3Zlcnlf",
            "U3VjY2VzcxC4CBIbChZUdXJyZXRfQ29tcG9zZV9TdWNjZXNzELkIEh8KEkJ1",
            "aWxkaW5nX05vdFR1cnJldBDG9/////////8BEiIKFVR1cnJldF9Db21wb3Nl",
            "X0FyZ0VychDF9/////////8BEhoKFVNBVkVfQlVJTERJTkdfU1VDQ0VTUxDD",
            "CBIhChRTQVZFX0JVSUxESU5HX0FSR0VSUhC89/////////8BEhwKF0NIQU5H",
            "RV9CVUlMRElOR19TVUNDRVNTEMUIEiMKFkNIQU5HRV9CVUlMRElOR19BUkdF",
            "UlIQuvf/////////ARIWChFTZXRfRXF1aXBfU1VDQ0VTUxDNCBIdChBTZXRf",
            "RXF1aXBfQVJHRVJSELL3/////////wEq8gQKFkNvbW1vbkluZm9DaGFuZ2VS",
            "ZWFzb24SFQoRQ2hhbmdlUmVhc29uX05vbmUQABIVChFUcmFpbl9BZGRfU29s",
            "ZGllchABEhYKElN0YXJ0UXVldWVfRGVjX1JlcxACEhwKGFJhcGlkRmluaXNo",
            "UXVldWVfRGVjX1JlcxADEhwKGEFjY2VsZXJhdGVRdWV1ZV9EZWNfSXRlbRAE",
            "EhcKE0NhbmNlbFF1ZXVlX0luY19SZXMQBRIXChNCdWlsZFJvYmJlZF9EZWNf",
            "UmVzEAYSGAoUQnVpbGRQcm9kdWN0X0luY19SZXMQBxIXChNQdWJSZWNydWl0",
            "X0RlY19JdGVtEAgSGAoUUHViUmVjcnVpdF9HYWluX0l0ZW0QCRIXChNTdGFy",
            "dFF1ZXVlX0RlY19JdGVtEAoSEQoNVGFza19BZGRfSXRlbRALEhAKDFRhc2tf",
            "SW5jX1JlcxAMEh8KG1RyZWF0X0ZpbmlzaF9DaGFuZ2VfU29sZGllchANEhUK",
            "EUdvbGRfQnV5X1Jlc291cmNlEA4SGQoVQWRkX0hlcm9fRXhwX0RlY19JdGVt",
            "EA8SEgoOR01fQWRkX1NvbGRpZXIQEBIXChNOZXdCdWlsZGluZ19EZWNfUmVz",
            "EBESGAoUTmV3QnVpbGRpbmdfRGVjX0l0ZW0QEhIUChBCdXlfSXRlbV9EZWNf",
            "UmVzEBMSFAoQUmVzX0J1eV9JbmNfSXRlbRAUEhgKFENhbmNlbFF1ZXVlX0lu",
            "Y19JdGVtEBUSGQoVSW5jSGVyb1N0YWdlX0RlY19JdGVtEBYSHgoaSW5jSGVy",
            "b1NraWxsTGV2ZWxfRGVjX0l0ZW0QFypUChJBdHRyaWJ1dGVfVHlwZV9Ub3AS",
            "DQoJVHlwZV9Ob25lEAASDwoLVHlwZV9CYXR0bGUQARIOCgpUeXBlX0J1aWxk",
            "EAISDgoKVHlwZV9PdGhlchADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.RpcReturnCode), typeof(global::SLG.CommonInfoChangeReason), typeof(global::SLG.Attribute_Type_Top), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.Handshake), global::SLG.Handshake.Parser, new[]{ "ProtoVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ReturnMsg), global::SLG.ReturnMsg.Parser, new[]{ "Code", "Arg1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ServerId), global::SLG.ServerId.Parser, new[]{ "Code", "Sid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.LoginRet), global::SLG.LoginRet.Parser, new[]{ "Code", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UserLoginInfo), global::SLG.UserLoginInfo.Parser, new[]{ "Account", "Pwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UserEnterInfo), global::SLG.UserEnterInfo.Parser, new[]{ "Account", "RoleId", "Token", "Sid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.AttackData), global::SLG.AttackData.Parser, new[]{ "TroopId", "TargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ChatInfo), global::SLG.ChatInfo.Parser, new[]{ "Contend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.KeyValuePair), global::SLG.KeyValuePair.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SimpleMsg), global::SLG.SimpleMsg.Parser, new[]{ "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ULongId), global::SLG.ULongId.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ULongIdList), global::SLG.ULongIdList.Parser, new[]{ "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.AttrInc), global::SLG.AttrInc.Parser, new[]{ "AttrId", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerAttrsInc), global::SLG.PlayerAttrsInc.Parser, new[]{ "PlayerId", "IncInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///Rpc对应的一组返回码起始值 = rpcId * (+/-10)
  /// </summary>
  public enum RpcReturnCode {
    [pbr::OriginalName("Begin")] Begin = 0,
    /// <summary>
    ///wbBuilding_Handler_UpdateLocation: 1
    ///wbBuilding_Handler_UpdateBlocksLocation: 2
    /// </summary>
    [pbr::OriginalName("UpdateBlockLoction_Success")] UpdateBlockLoctionSuccess = 10,
    /// <summary>
    ///拖出地块 - 传的blockId不可用
    /// </summary>
    [pbr::OriginalName("BlockOperate_IdCannotUse")] BlockOperateIdCannotUse = -11,
    /// <summary>
    ///操作多个地块 - 参数不是数组
    /// </summary>
    [pbr::OriginalName("BlocksOperate_ArgNotArray")] BlocksOperateArgNotArray = -12,
    /// <summary>
    ///缺参数(tId)
    /// </summary>
    [pbr::OriginalName("BlockOperate_ArgLack")] BlockOperateArgLack = -13,
    /// <summary>
    ///移动地块 - 坐标非法
    /// </summary>
    [pbr::OriginalName("BlockOperate_PosErr")] BlockOperatePosErr = -14,
    /// <summary>
    ///拖出地块 - 背包中没有
    /// </summary>
    [pbr::OriginalName("BlockOperate_NotInBag")] BlockOperateNotInBag = -15,
    /// <summary>
    ///操作地块 - blockId没有对应实例
    /// </summary>
    [pbr::OriginalName("BlockOperate_NoBlock")] BlockOperateNoBlock = -16,
    /// <summary>
    ///非测试接口中功能性建筑地块不能被收回
    /// </summary>
    [pbr::OriginalName("BlockOperate_WithdrawFuncBuild")] BlockOperateWithdrawFuncBuild = -17,
    /// <summary>
    ///wbBuilding_Handler（14,15, 建筑部分共用）
    /// </summary>
    [pbr::OriginalName("Player_AllBuilding__Err")] PlayerAllBuildingErr = -141,
    /// <summary>
    ///获取玩家某个建筑数据失败
    /// </summary>
    [pbr::OriginalName("Player_SingleBuilding_Err")] PlayerSingleBuildingErr = -142,
    /// <summary>
    ///建筑不可用（正在某队列中）
    /// </summary>
    [pbr::OriginalName("Player_Building_NotIdle")] PlayerBuildingNotIdle = -143,
    /// <summary>
    ///funcId和定义不对应
    /// </summary>
    [pbr::OriginalName("BuildingFunction_IdErr")] BuildingFunctionIdErr = -144,
    /// <summary>
    ///建筑队列类型不对
    /// </summary>
    [pbr::OriginalName("BuildingQueue_Type_Err")] BuildingQueueTypeErr = -145,
    /// <summary>
    ///立即完成队列需要的资源/金币不足
    /// </summary>
    [pbr::OriginalName("RapidFinish_Consume_Lack")] RapidFinishConsumeLack = -146,
    /// <summary>
    ///建筑当前未处于任何队列
    /// </summary>
    [pbr::OriginalName("Building_NoQueue")] BuildingNoQueue = -147,
    /// <summary>
    ///建筑有产出需要点击领取
    /// </summary>
    [pbr::OriginalName("Build_Has_Product")] BuildHasProduct = -148,
    /// <summary>
    ///新建建筑资资源不足
    /// </summary>
    [pbr::OriginalName("NewBuild_Consume_LackRes")] NewBuildConsumeLackRes = -149,
    /// <summary>
    ///新建建筑道具不足
    /// </summary>
    [pbr::OriginalName("NewBuild_Consume_LackItem")] NewBuildConsumeLackItem = -151,
    /// <summary>
    ///参数不对
    /// </summary>
    [pbr::OriginalName("Building_ArgErr")] BuildingArgErr = -152,
    /// <summary>
    ///新建建筑成功
    /// </summary>
    [pbr::OriginalName("NewBuild_Success")] NewBuildSuccess = 150,
    /// <summary>
    ///wbBuilding_Handler_DoResearch: 7
    /// </summary>
    [pbr::OriginalName("DoResearch_Success")] DoResearchSuccess = 70,
    /// <summary>
    ///techId不对
    /// </summary>
    [pbr::OriginalName("DoResearch_TechId_Err")] DoResearchTechIdErr = -71,
    /// <summary>
    ///目标科技已达最高等级
    /// </summary>
    [pbr::OriginalName("DoResearch_LevelMax")] DoResearchLevelMax = -72,
    /// <summary>
    ///需求前置科技等级不满足
    /// </summary>
    [pbr::OriginalName("DoResearch_PreTech_Need")] DoResearchPreTechNeed = -73,
    /// <summary>
    ///科技建筑等级不足
    /// </summary>
    [pbr::OriginalName("DoResearch_TechBuildLvl_Need")] DoResearchTechBuildLvlNeed = -74,
    /// <summary>
    ///资源/金币不够
    /// </summary>
    [pbr::OriginalName("DoResearch_ConsumeLack")] DoResearchConsumeLack = -75,
    /// <summary>
    ///wbBuilding_Handler_PubRecruit: 8
    /// </summary>
    [pbr::OriginalName("PubRecruit_Success")] PubRecruitSuccess = 80,
    /// <summary>
    ///配置数据不对
    /// </summary>
    [pbr::OriginalName("PubRecruit_CfgData_Err")] PubRecruitCfgDataErr = -81,
    /// <summary>
    ///传参数不对 - 免费又多次
    /// </summary>
    [pbr::OriginalName("PubRecruit_Free_MultiTimes")] PubRecruitFreeMultiTimes = -82,
    /// <summary>
    ///普通免费次数为零
    /// </summary>
    [pbr::OriginalName("PubRecruit_Common_Free_UseUp")] PubRecruitCommonFreeUseUp = -83,
    /// <summary>
    ///普通免费次数在冷却
    /// </summary>
    [pbr::OriginalName("PubRecruit_Common_Free_InCD")] PubRecruitCommonFreeInCd = -84,
    /// <summary>
    ///招募所得为空
    /// </summary>
    [pbr::OriginalName("PubRecruit_Gain_Empty")] PubRecruitGainEmpty = -85,
    /// <summary>
    ///特殊免费次数不可用
    /// </summary>
    [pbr::OriginalName("PubRecruit_High_Free_UseUp")] PubRecruitHighFreeUseUp = -86,
    /// <summary>
    ///道具不足
    /// </summary>
    [pbr::OriginalName("PubRecruit_Consume_Lack")] PubRecruitConsumeLack = -87,
    /// <summary>
    ///wbBuilding_Handler_SetNotShowFlag: 9
    /// </summary>
    [pbr::OriginalName("SetNotShowFlag_Success")] SetNotShowFlagSuccess = 90,
    /// <summary>
    ///队列相关: 10
    /// </summary>
    [pbr::OriginalName("AccelerateQueue_Success")] AccelerateQueueSuccess = 100,
    /// <summary>
    ///取消队列成功
    /// </summary>
    [pbr::OriginalName("CancelQueue_Success")] CancelQueueSuccess = 101,
    /// <summary>
    ///加速时间为负值
    /// </summary>
    [pbr::OriginalName("Accelerate_Time_Err")] AccelerateTimeErr = -101,
    /// <summary>
    ///获取队列数据出错
    /// </summary>
    [pbr::OriginalName("Get_Queue_Err")] GetQueueErr = -102,
    /// <summary>
    ///加速道具id不对
    /// </summary>
    [pbr::OriginalName("Accelerate_ItemId_Err")] AccelerateItemIdErr = -103,
    /// <summary>
    ///加速道具作用队列类型不对
    /// </summary>
    [pbr::OriginalName("Accelerate_Item_QueueType_Err")] AccelerateItemQueueTypeErr = -104,
    /// <summary>
    ///加速所需道具不足
    /// </summary>
    [pbr::OriginalName("Accelerate_Consume_Lack")] AccelerateConsumeLack = -105,
    /// <summary>
    ///道具不够，还没钱买
    /// </summary>
    [pbr::OriginalName("Accelerate_Buy_Item_Fail")] AccelerateBuyItemFail = -106,
    /// <summary>
    ///wbBuilding_Handler_TrainSoldier: 16
    /// </summary>
    [pbr::OriginalName("TrainSoldier_Success")] TrainSoldierSuccess = 160,
    /// <summary>
    ///参数不对(tblId/num)
    /// </summary>
    [pbr::OriginalName("TrainSoldier_ArgErr")] TrainSoldierArgErr = -161,
    /// <summary>
    ///表格配置不对
    /// </summary>
    [pbr::OriginalName("TrainSoldier_CfgErr")] TrainSoldierCfgErr = -162,
    /// <summary>
    ///建筑与训练士兵类型不匹配
    /// </summary>
    [pbr::OriginalName("TrainSoldier_TypeNotMatch")] TrainSoldierTypeNotMatch = -163,
    /// <summary>
    ///训练数量超限
    /// </summary>
    [pbr::OriginalName("TrainSoldier_NumOverMax")] TrainSoldierNumOverMax = -164,
    /// <summary>
    ///需求科技未解锁
    /// </summary>
    [pbr::OriginalName("TrainSoldier_TechNeed")] TrainSoldierTechNeed = -165,
    /// <summary>
    ///资源不足
    /// </summary>
    [pbr::OriginalName("TrainSoldier_ConsumeLack")] TrainSoldierConsumeLack = -166,
    /// <summary>
    ///wbBuilding_Handler_BuildingLevelUp: 17
    /// </summary>
    [pbr::OriginalName("BuildLevelUp_Success")] BuildLevelUpSuccess = 170,
    /// <summary>
    ///已经满级
    /// </summary>
    [pbr::OriginalName("BuildLevelUp_LevelMax")] BuildLevelUpLevelMax = -171,
    /// <summary>
    ///前置建筑等级需求不满足
    /// </summary>
    [pbr::OriginalName("BuildLevelUp_PreBuildLvlNeed")] BuildLevelUpPreBuildLvlNeed = -172,
    /// <summary>
    ///特殊资源（道具）不足
    /// </summary>
    [pbr::OriginalName("BuildLevelUp_ItemLack")] BuildLevelUpItemLack = -173,
    /// <summary>
    ///资源不足
    /// </summary>
    [pbr::OriginalName("BuildLevelUp_ResLack")] BuildLevelUpResLack = -174,
    /// <summary>
    ///无可用建造队列（目前共两条，默认全部开启）
    /// </summary>
    [pbr::OriginalName("BuildLevelUp_QueueNumLimit")] BuildLevelUpQueueNumLimit = -175,
    /// <summary>
    ///wbBuilding_Handler_treatWounded: 19
    /// </summary>
    [pbr::OriginalName("TreatWounded_Success")] TreatWoundedSuccess = 190,
    /// <summary>
    ///资源不足
    /// </summary>
    [pbr::OriginalName("TreatWounded_ConsumeLack")] TreatWoundedConsumeLack = -191,
    /// <summary>
    ///聊天通用: 21
    /// </summary>
    [pbr::OriginalName("Chat_PlayerChannels_Err")] ChatPlayerChannelsErr = -211,
    /// <summary>
    ///获取某个频道实例数据失败
    /// </summary>
    [pbr::OriginalName("Chat_SingleChannel_Err")] ChatSingleChannelErr = -212,
    /// <summary>
    ///玩家未加入频道
    /// </summary>
    [pbr::OriginalName("Chat_Player_NotInChannel")] ChatPlayerNotInChannel = -213,
    /// <summary>
    ///获取讨论组实例数据失败
    /// </summary>
    [pbr::OriginalName("Chat_GroupNotFind")] ChatGroupNotFind = -214,
    /// <summary>
    ///玩家未加入讨论组
    /// </summary>
    [pbr::OriginalName("Chat_PlayerNotInGroup")] ChatPlayerNotInGroup = -215,
    /// <summary>
    ///玩家已加入讨论组
    /// </summary>
    [pbr::OriginalName("Chat_PlayerInGroup")] ChatPlayerInGroup = -216,
    /// <summary>
    ///移除讨论组/频道之前没清数据
    /// </summary>
    [pbr::OriginalName("Chat_DelBeforeClear")] ChatDelBeforeClear = -217,
    /// <summary>
    ///无操作权限
    /// </summary>
    [pbr::OriginalName("Chat_OpAuthorityNeed")] ChatOpAuthorityNeed = -218,
    /// <summary>
    ///（拉xx进讨论组）需要是好友关系
    /// </summary>
    [pbr::OriginalName("Chat_FriendshipNeed")] ChatFriendshipNeed = -219,
    /// <summary>
    ///获取玩家聊天相关存库数据失败
    /// </summary>
    [pbr::OriginalName("Chat_PlayerDBInfo_Err")] ChatPlayerDbinfoErr = -220,
    /// <summary>
    ///对象玩家不存在
    /// </summary>
    [pbr::OriginalName("Chat_AimPlayerIdInvalid")] ChatAimPlayerIdInvalid = -231,
    /// <summary>
    ///目标玩家不在本讨论组
    /// </summary>
    [pbr::OriginalName("Chat_AimPlayerNotInGroup")] ChatAimPlayerNotInGroup = -232,
    /// <summary>
    ///目标玩家不在本频道
    /// </summary>
    [pbr::OriginalName("Chat_AimPlayerNotInChannel")] ChatAimPlayerNotInChannel = -233,
    /// <summary>
    ///wChat_Handler_ChatEntry: 22
    /// </summary>
    [pbr::OriginalName("ChatEntry_Success")] ChatEntrySuccess = 220,
    /// <summary>
    ///未达发言需求大本营等级
    /// </summary>
    [pbr::OriginalName("ChatEntry_MainLvlNeed")] ChatEntryMainLvlNeed = -222,
    /// <summary>
    ///发言冷却中
    /// </summary>
    [pbr::OriginalName("ChatEntry_InCD")] ChatEntryInCd = -223,
    /// <summary>
    ///内容长度超限
    /// </summary>
    [pbr::OriginalName("ChatEntry_MsgLenOverMax")] ChatEntryMsgLenOverMax = -224,
    /// <summary>
    ///（私聊）被对方屏蔽
    /// </summary>
    [pbr::OriginalName("ChatEntry_PrivateBlocked")] ChatEntryPrivateBlocked = -225,
    /// <summary>
    ///wChat_Handler_CreateGroup: 24
    ///success - return newGroupId
    /// </summary>
    [pbr::OriginalName("CreateGroup_PositionNeed")] CreateGroupPositionNeed = -241,
    /// <summary>
    ///当前讨论组数目已达上限
    /// </summary>
    [pbr::OriginalName("CreateGroup_GroupNumMax")] CreateGroupGroupNumMax = -242,
    /// <summary>
    ///单人可管理讨论组数目已达上限
    /// </summary>
    [pbr::OriginalName("CreateGroup_SelfManageNumMax")] CreateGroupSelfManageNumMax = -243,
    /// <summary>
    ///讨论组成员数超限
    /// </summary>
    [pbr::OriginalName("CreateGroup_VolumeMax")] CreateGroupVolumeMax = -244,
    /// <summary>
    ///讨论组成员数少于规定数
    /// </summary>
    [pbr::OriginalName("CreateGroup_VolumeMin")] CreateGroupVolumeMin = -245,
    /// <summary>
    ///wChat_Handler_OperateChannelGroup: 25
    /// </summary>
    [pbr::OriginalName("OpGroup_Success")] OpGroupSuccess = 250,
    /// <summary>
    ///解散成功
    /// </summary>
    [pbr::OriginalName("OpGroup_DisimissDone")] OpGroupDisimissDone = 251,
    /// <summary>
    ///加入成功
    /// </summary>
    [pbr::OriginalName("OpGroup_JoinDone")] OpGroupJoinDone = 252,
    /// <summary>
    ///退出成功
    /// </summary>
    [pbr::OriginalName("OpGroup_ExitDone")] OpGroupExitDone = 253,
    /// <summary>
    ///需要再次确认退出
    /// </summary>
    [pbr::OriginalName("OpGroup_NeedConfirmExit")] OpGroupNeedConfirmExit = 254,
    /// <summary>
    ///操作类型无效
    /// </summary>
    [pbr::OriginalName("OpGroup_InvalidOpType")] OpGroupInvalidOpType = -251,
    /// <summary>
    ///玩家不能加入讨论组
    /// </summary>
    [pbr::OriginalName("OpGroup_CannotJoin")] OpGroupCannotJoin = -252,
    /// <summary>
    ///目标玩家不能被踢出
    /// </summary>
    [pbr::OriginalName("OpGroup_CannotKick")] OpGroupCannotKick = -253,
    /// <summary>
    ///修改讨论组名字成功
    /// </summary>
    [pbr::OriginalName("OpGroup_ModifyGNameDone")] OpGroupModifyGnameDone = 255,
    /// <summary>
    ///含有敏感词
    /// </summary>
    [pbr::OriginalName("OpGroup_SensitiveWords")] OpGroupSensitiveWords = -254,
    /// <summary>
    ///wChat_Handler_SetGroupFlagBit: 27
    /// </summary>
    [pbr::OriginalName("Chat_SetFlag_Success")] ChatSetFlagSuccess = 270,
    /// <summary>
    ///wChat_Handler_SetFlagBitToPlayer: 28
    /// </summary>
    [pbr::OriginalName("Chat_SetPlayerFlag_Success")] ChatSetPlayerFlagSuccess = 280,
    /// <summary>
    ///wChat_Handler_ReadNewMessage: 29
    /// </summary>
    [pbr::OriginalName("Chat_ReadNewMsg_Success")] ChatReadNewMsgSuccess = 290,
    /// <summary>
    ///wbBuilding_Handler_setActiveMainSkills: 30
    /// </summary>
    [pbr::OriginalName("SetActiveMainSkill_Success")] SetActiveMainSkillSuccess = 300,
    /// <summary>
    ///位置参数不对
    /// </summary>
    [pbr::OriginalName("SetActiveMainSkill_PosInvalid")] SetActiveMainSkillPosInvalid = -301,
    /// <summary>
    ///id参数不对
    /// </summary>
    [pbr::OriginalName("SetActiveMainSkill_IdInvalid")] SetActiveMainSkillIdInvalid = -302,
    /// <summary>
    ///该技能尚未解锁
    /// </summary>
    [pbr::OriginalName("SetActiveMainSkill_Locked")] SetActiveMainSkillLocked = -303,
    /// <summary>
    ///wbScene_TaskHandler_ClickGetReward: 59
    /// </summary>
    [pbr::OriginalName("ClickGetReward_Success")] ClickGetRewardSuccess = 590,
    /// <summary>
    ///不满足领奖条件
    /// </summary>
    [pbr::OriginalName("ClickGetReward_Cannot")] ClickGetRewardCannot = -591,
    /// <summary>
    ///根据参数查找任务失败
    /// </summary>
    [pbr::OriginalName("ClickGetReward_NoTask")] ClickGetRewardNoTask = -592,
    /// <summary>
    ///获取玩家任务数据失败
    /// </summary>
    [pbr::OriginalName("ClickGetReward_PlayerIdErr")] ClickGetRewardPlayerIdErr = -593,
    /// <summary>
    ///wbScene_TaskHandler_OpenActiveBox: 60
    /// </summary>
    [pbr::OriginalName("OpenActiveBox_Success")] OpenActiveBoxSuccess = 600,
    [pbr::OriginalName("OpenActiveBox_PlayerIdErr")] OpenActiveBoxPlayerIdErr = -601,
    /// <summary>
    ///活跃度不够
    /// </summary>
    [pbr::OriginalName("OpenActiveBox_LackPoint")] OpenActiveBoxLackPoint = -602,
    /// <summary>
    ///已经打开过
    /// </summary>
    [pbr::OriginalName("OpenActiveBox_OpenedBefore")] OpenActiveBoxOpenedBefore = -603,
    /// <summary>
    ///奖励数据配置不对
    /// </summary>
    [pbr::OriginalName("OpenActiveBox_BoxInfoErr")] OpenActiveBoxBoxInfoErr = -604,
    /// <summary>
    ///任务通用: 68
    /// </summary>
    [pbr::OriginalName("Task_OpSuccess")] TaskOpSuccess = 680,
    /// <summary>
    ///要操作的目标任务状态不对
    /// </summary>
    [pbr::OriginalName("Task_StatusErr")] TaskStatusErr = -681,
    /// <summary>
    ///任务数据不对
    /// </summary>
    [pbr::OriginalName("Task_InfoErr")] TaskInfoErr = -682,
    /// <summary>
    ///英雄通用：80
    /// </summary>
    [pbr::OriginalName("PlayerHeroes_Data_Err")] PlayerHeroesDataErr = -801,
    /// <summary>
    ///获取某个英雄数据出错
    /// </summary>
    [pbr::OriginalName("Player_Single_Hero_Err")] PlayerSingleHeroErr = -802,
    /// <summary>
    ///参数错误
    /// </summary>
    [pbr::OriginalName("Player_Hero_ArgErr")] PlayerHeroArgErr = -803,
    /// <summary>
    ///已有英雄
    /// </summary>
    [pbr::OriginalName("Player_Hero_Existed")] PlayerHeroExisted = -804,
    /// <summary>
    ///获取到已有英雄后做相应转换
    /// </summary>
    [pbr::OriginalName("Player_ExistHero_Convert_Done")] PlayerExistHeroConvertDone = 800,
    /// <summary>
    ///成功获取新英雄
    /// </summary>
    [pbr::OriginalName("Player_Get_Hero_Done")] PlayerGetHeroDone = 801,
    /// <summary>
    ///英雄加经验： 82
    /// </summary>
    [pbr::OriginalName("Hero_AddExp_ExpInvalid")] HeroAddExpExpInvalid = -821,
    /// <summary>
    ///已经是最高等级满经验
    /// </summary>
    [pbr::OriginalName("Hero_AddExp_LvlLimit")] HeroAddExpLvlLimit = -822,
    /// <summary>
    ///扣道具失败
    /// </summary>
    [pbr::OriginalName("Hero_AddExp_UseItemFail")] HeroAddExpUseItemFail = -823,
    /// <summary>
    ///本次加经验后升到可升最高等级（可能会有少量溢出）
    /// </summary>
    [pbr::OriginalName("Hero_AddExp_ReachLimit")] HeroAddExpReachLimit = 820,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("Hero_AddExp_Success")] HeroAddExpSuccess = 821,
    /// <summary>
    ///英雄升星阶： 83
    /// </summary>
    [pbr::OriginalName("Hero_IncStar_UseItemFail")] HeroIncStarUseItemFail = -831,
    /// <summary>
    ///已升至最高星最高阶
    /// </summary>
    [pbr::OriginalName("Hero_IncStar_ReachLimit")] HeroIncStarReachLimit = -832,
    /// <summary>
    ///升星阶成功
    /// </summary>
    [pbr::OriginalName("Hero_IncStar_Success")] HeroIncStarSuccess = 830,
    /// <summary>
    ///主城上阵英雄： 84
    /// </summary>
    [pbr::OriginalName("Hero_SetMainFight_Success")] HeroSetMainFightSuccess = 840,
    /// <summary>
    ///参数不对
    /// </summary>
    [pbr::OriginalName("Hero_SetMainFight_ArgErr")] HeroSetMainFightArgErr = -841,
    /// <summary>
    ///英雄技能升级：106
    /// </summary>
    [pbr::OriginalName("Hero_SkillLevelUp_Success")] HeroSkillLevelUpSuccess = 1060,
    /// <summary>
    ///技能还未解锁
    /// </summary>
    [pbr::OriginalName("Hero_SkillLevelUp_Locked")] HeroSkillLevelUpLocked = -1061,
    /// <summary>
    ///物品不足
    /// </summary>
    [pbr::OriginalName("Hero_SkillLevelUp_ItemLack")] HeroSkillLevelUpItemLack = -1062,
    /// <summary>
    ///已升至最高
    /// </summary>
    [pbr::OriginalName("Hero_SkillLevelUp_MaxLevel")] HeroSkillLevelUpMaxLevel = -1063,
    /// <summary>
    ///配置出错
    /// </summary>
    [pbr::OriginalName("Hero_SkillLevelUp_CfgErr")] HeroSkillLevelUpCfgErr = -1064,
    /// <summary>
    ///新手指引：107
    /// </summary>
    [pbr::OriginalName("NewbieGuide_Success")] NewbieGuideSuccess = 1070,
    /// <summary>
    ///炮塔合成：108
    /// </summary>
    [pbr::OriginalName("Turret_Recovery_Success")] TurretRecoverySuccess = 1080,
    /// <summary>
    ///合成成功
    /// </summary>
    [pbr::OriginalName("Turret_Compose_Success")] TurretComposeSuccess = 1081,
    /// <summary>
    ///传过来的建筑不是炮塔
    /// </summary>
    [pbr::OriginalName("Building_NotTurret")] BuildingNotTurret = -1082,
    /// <summary>
    ///合成炮塔参数不对
    /// </summary>
    [pbr::OriginalName("Turret_Compose_ArgErr")] TurretComposeArgErr = -1083,
    /// <summary>
    ///编辑模式: 109
    /// </summary>
    [pbr::OriginalName("SAVE_BUILDING_SUCCESS")] SaveBuildingSuccess = 1091,
    [pbr::OriginalName("SAVE_BUILDING_ARGERR")] SaveBuildingArgerr = -1092,
    [pbr::OriginalName("CHANGE_BUILDING_SUCCESS")] ChangeBuildingSuccess = 1093,
    [pbr::OriginalName("CHANGE_BUILDING_ARGERR")] ChangeBuildingArgerr = -1094,
    /// <summary>
    ///装备相关：110
    /// </summary>
    [pbr::OriginalName("Set_Equip_SUCCESS")] SetEquipSuccess = 1101,
    /// <summary>
    /// 穿戴/替换/卸下装备成功
    /// </summary>
    [pbr::OriginalName("Set_Equip_ARGERR")] SetEquipArgerr = -1102,
  }

  /// <summary>
  ///资源/士兵/英雄/道具信息变化原因
  /// </summary>
  public enum CommonInfoChangeReason {
    [pbr::OriginalName("ChangeReason_None")] ChangeReasonNone = 0,
    /// <summary>
    ///训练结束点击获取兵
    /// </summary>
    [pbr::OriginalName("Train_Add_Soldier")] TrainAddSoldier = 1,
    /// <summary>
    ///开始队列消耗资源（arg:qType）
    /// </summary>
    [pbr::OriginalName("StartQueue_Dec_Res")] StartQueueDecRes = 2,
    /// <summary>
    ///立即完成队列消耗资源
    /// </summary>
    [pbr::OriginalName("RapidFinishQueue_Dec_Res")] RapidFinishQueueDecRes = 3,
    /// <summary>
    ///加速队列消耗道具
    /// </summary>
    [pbr::OriginalName("AccelerateQueue_Dec_Item")] AccelerateQueueDecItem = 4,
    /// <summary>
    ///取消队列返还资源
    /// </summary>
    [pbr::OriginalName("CancelQueue_Inc_Res")] CancelQueueIncRes = 5,
    /// <summary>
    ///仓库资源被掠夺
    /// </summary>
    [pbr::OriginalName("BuildRobbed_Dec_Res")] BuildRobbedDecRes = 6,
    /// <summary>
    ///点击获取资源建筑产出
    /// </summary>
    [pbr::OriginalName("BuildProduct_Inc_Res")] BuildProductIncRes = 7,
    /// <summary>
    ///酒馆招募消耗道具
    /// </summary>
    [pbr::OriginalName("PubRecruit_Dec_Item")] PubRecruitDecItem = 8,
    /// <summary>
    ///酒馆招募获取道具
    /// </summary>
    [pbr::OriginalName("PubRecruit_Gain_Item")] PubRecruitGainItem = 9,
    /// <summary>
    ///开始队列消耗道具
    /// </summary>
    [pbr::OriginalName("StartQueue_Dec_Item")] StartQueueDecItem = 10,
    /// <summary>
    ///任务部分奖励给道具
    /// </summary>
    [pbr::OriginalName("Task_Add_Item")] TaskAddItem = 11,
    /// <summary>
    ///任务部分奖励给资源
    /// </summary>
    [pbr::OriginalName("Task_Inc_Res")] TaskIncRes = 12,
    /// <summary>
    ///治好的兵转换状态
    /// </summary>
    [pbr::OriginalName("Treat_Finish_Change_Soldier")] TreatFinishChangeSoldier = 13,
    /// <summary>
    ///金币购买常规资源扣去消耗后剩余部分
    /// </summary>
    [pbr::OriginalName("Gold_Buy_Resource")] GoldBuyResource = 14,
    /// <summary>
    ///消耗道具加英雄经验
    /// </summary>
    [pbr::OriginalName("Add_Hero_Exp_Dec_Item")] AddHeroExpDecItem = 15,
    [pbr::OriginalName("GM_Add_Soldier")] GmAddSoldier = 16,
    /// <summary>
    ///建建筑消耗资源
    /// </summary>
    [pbr::OriginalName("NewBuilding_Dec_Res")] NewBuildingDecRes = 17,
    /// <summary>
    ///建建筑消耗道具
    /// </summary>
    [pbr::OriginalName("NewBuilding_Dec_Item")] NewBuildingDecItem = 18,
    /// <summary>
    ///购买道具消耗（金币）资源
    /// </summary>
    [pbr::OriginalName("Buy_Item_Dec_Res")] BuyItemDecRes = 19,
    /// <summary>
    ///花资源买道具
    /// </summary>
    [pbr::OriginalName("Res_Buy_Inc_Item")] ResBuyIncItem = 20,
    /// <summary>
    ///取消队列返还道具
    /// </summary>
    [pbr::OriginalName("CancelQueue_Inc_Item")] CancelQueueIncItem = 21,
    /// <summary>
    ///英雄升星阶消耗道具
    /// </summary>
    [pbr::OriginalName("IncHeroStage_Dec_Item")] IncHeroStageDecItem = 22,
    /// <summary>
    ///英雄技能升级消耗道具
    /// </summary>
    [pbr::OriginalName("IncHeroSkillLevel_Dec_Item")] IncHeroSkillLevelDecItem = 23,
  }

  /// <summary>
  ///玩家属性大类划分
  /// </summary>
  public enum Attribute_Type_Top {
    [pbr::OriginalName("Type_None")] TypeNone = 0,
    /// <summary>
    ///战斗相关属性
    /// </summary>
    [pbr::OriginalName("Type_Battle")] TypeBattle = 1,
    /// <summary>
    ///建筑相关属性
    /// </summary>
    [pbr::OriginalName("Type_Build")] TypeBuild = 2,
    /// <summary>
    ///其他，待定
    /// </summary>
    [pbr::OriginalName("Type_Other")] TypeOther = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Handshake : pb::IMessage<Handshake> {
    private static readonly pb::MessageParser<Handshake> _parser = new pb::MessageParser<Handshake>(() => new Handshake());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Handshake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake(Handshake other) : this() {
      protoVersion_ = other.protoVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Handshake Clone() {
      return new Handshake(this);
    }

    /// <summary>Field number for the "protoVersion" field.</summary>
    public const int ProtoVersionFieldNumber = 1;
    private int protoVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtoVersion {
      get { return protoVersion_; }
      set {
        protoVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Handshake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Handshake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtoVersion != other.ProtoVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtoVersion != 0) hash ^= ProtoVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtoVersion != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProtoVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtoVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtoVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Handshake other) {
      if (other == null) {
        return;
      }
      if (other.ProtoVersion != 0) {
        ProtoVersion = other.ProtoVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProtoVersion = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReturnMsg : pb::IMessage<ReturnMsg> {
    private static readonly pb::MessageParser<ReturnMsg> _parser = new pb::MessageParser<ReturnMsg>(() => new ReturnMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMsg(ReturnMsg other) : this() {
      code_ = other.code_;
      arg1_ = other.arg1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnMsg Clone() {
      return new ReturnMsg(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "arg1" field.</summary>
    public const int Arg1FieldNumber = 2;
    private ulong arg1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Arg1 {
      get { return arg1_; }
      set {
        arg1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Arg1 != other.Arg1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Arg1 != 0UL) hash ^= Arg1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Arg1 != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Arg1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Arg1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Arg1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnMsg other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Arg1 != 0UL) {
        Arg1 = other.Arg1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Arg1 = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServerId : pb::IMessage<ServerId> {
    private static readonly pb::MessageParser<ServerId> _parser = new pb::MessageParser<ServerId>(() => new ServerId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerId(ServerId other) : this() {
      code_ = other.code_;
      sid_ = other.sid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerId Clone() {
      return new ServerId(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 2;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Sid != other.Sid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Sid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerId other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 18: {
            Sid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRet : pb::IMessage<LoginRet> {
    private static readonly pb::MessageParser<LoginRet> _parser = new pb::MessageParser<LoginRet>(() => new LoginRet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRet(LoginRet other) : this() {
      code_ = other.code_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRet Clone() {
      return new LoginRet(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRet other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserLoginInfo : pb::IMessage<UserLoginInfo> {
    private static readonly pb::MessageParser<UserLoginInfo> _parser = new pb::MessageParser<UserLoginInfo>(() => new UserLoginInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserLoginInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginInfo(UserLoginInfo other) : this() {
      account_ = other.account_;
      pwd_ = other.pwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserLoginInfo Clone() {
      return new UserLoginInfo(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pwd" field.</summary>
    public const int PwdFieldNumber = 2;
    private string pwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserLoginInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserLoginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Pwd != other.Pwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserLoginInfo other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Pwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserEnterInfo : pb::IMessage<UserEnterInfo> {
    private static readonly pb::MessageParser<UserEnterInfo> _parser = new pb::MessageParser<UserEnterInfo>(() => new UserEnterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserEnterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEnterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEnterInfo(UserEnterInfo other) : this() {
      account_ = other.account_;
      roleId_ = other.roleId_;
      token_ = other.token_;
      sid_ = other.sid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserEnterInfo Clone() {
      return new UserEnterInfo(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 4;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserEnterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserEnterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (RoleId != other.RoleId) return false;
      if (Token != other.Token) return false;
      if (Sid != other.Sid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (Sid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserEnterInfo other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            Sid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackData : pb::IMessage<AttackData> {
    private static readonly pb::MessageParser<AttackData> _parser = new pb::MessageParser<AttackData>(() => new AttackData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackData(AttackData other) : this() {
      troopId_ = other.troopId_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackData Clone() {
      return new AttackData(this);
    }

    /// <summary>Field number for the "troop_id" field.</summary>
    public const int TroopIdFieldNumber = 1;
    private int troopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TroopId != other.TroopId) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TroopId != 0) hash ^= TroopId.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TroopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TroopId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TroopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TroopId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackData other) {
      if (other == null) {
        return;
      }
      if (other.TroopId != 0) {
        TroopId = other.TroopId;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TroopId = input.ReadInt32();
            break;
          }
          case 16: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatInfo : pb::IMessage<ChatInfo> {
    private static readonly pb::MessageParser<ChatInfo> _parser = new pb::MessageParser<ChatInfo>(() => new ChatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInfo(ChatInfo other) : this() {
      contend_ = other.contend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatInfo Clone() {
      return new ChatInfo(this);
    }

    /// <summary>Field number for the "contend" field.</summary>
    public const int ContendFieldNumber = 1;
    private string contend_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contend {
      get { return contend_; }
      set {
        contend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Contend != other.Contend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Contend.Length != 0) hash ^= Contend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Contend.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Contend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Contend.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatInfo other) {
      if (other == null) {
        return;
      }
      if (other.Contend.Length != 0) {
        Contend = other.Contend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Contend = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyValuePair : pb::IMessage<KeyValuePair> {
    private static readonly pb::MessageParser<KeyValuePair> _parser = new pb::MessageParser<KeyValuePair>(() => new KeyValuePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair(KeyValuePair other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair Clone() {
      return new KeyValuePair(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private int key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Key = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleMsg : pb::IMessage<SimpleMsg> {
    private static readonly pb::MessageParser<SimpleMsg> _parser = new pb::MessageParser<SimpleMsg>(() => new SimpleMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMsg(SimpleMsg other) : this() {
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleMsg Clone() {
      return new SimpleMsg(this);
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 1;
    private int param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Param != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Param != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleMsg other) {
      if (other == null) {
        return;
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Param = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ULongId : pb::IMessage<ULongId> {
    private static readonly pb::MessageParser<ULongId> _parser = new pb::MessageParser<ULongId>(() => new ULongId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ULongId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ULongId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ULongId(ULongId other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ULongId Clone() {
      return new ULongId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ULongId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ULongId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ULongId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ULongIdList : pb::IMessage<ULongIdList> {
    private static readonly pb::MessageParser<ULongIdList> _parser = new pb::MessageParser<ULongIdList>(() => new ULongIdList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ULongIdList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ULongIdList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ULongIdList(ULongIdList other) : this() {
      ids_ = other.ids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ULongIdList Clone() {
      return new ULongIdList(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_ids_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> ids_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ULongIdList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ULongIdList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ids_.Equals(other.ids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _repeated_ids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ULongIdList other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttrInc : pb::IMessage<AttrInc> {
    private static readonly pb::MessageParser<AttrInc> _parser = new pb::MessageParser<AttrInc>(() => new AttrInc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrInc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInc(AttrInc other) : this() {
      attrId_ = other.attrId_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInc Clone() {
      return new AttrInc(this);
    }

    /// <summary>Field number for the "attrId" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private int attrId_;
    /// <summary>
    ///属性在表中ServerID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///属性加成值（绝对值/百分比分母）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrInc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrInc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttrId != other.AttrId) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttrId != 0) hash ^= AttrId.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttrId);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrId);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrInc other) {
      if (other == null) {
        return;
      }
      if (other.AttrId != 0) {
        AttrId = other.AttrId;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttrId = input.ReadInt32();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerAttrsInc : pb::IMessage<PlayerAttrsInc> {
    private static readonly pb::MessageParser<PlayerAttrsInc> _parser = new pb::MessageParser<PlayerAttrsInc>(() => new PlayerAttrsInc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAttrsInc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAttrsInc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAttrsInc(PlayerAttrsInc other) : this() {
      playerId_ = other.playerId_;
      incInfo_ = other.incInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAttrsInc Clone() {
      return new PlayerAttrsInc(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "incInfo" field.</summary>
    public const int IncInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.AttrInc> _repeated_incInfo_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.AttrInc.Parser);
    private readonly pbc::RepeatedField<global::SLG.AttrInc> incInfo_ = new pbc::RepeatedField<global::SLG.AttrInc>();
    /// <summary>
    ///多组属性的加成信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.AttrInc> IncInfo {
      get { return incInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAttrsInc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAttrsInc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if(!incInfo_.Equals(other.incInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      hash ^= incInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      incInfo_.WriteTo(output, _repeated_incInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      size += incInfo_.CalculateSize(_repeated_incInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAttrsInc other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      incInfo_.Add(other.incInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            incInfo_.AddEntriesFrom(input, _repeated_incInfo_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
