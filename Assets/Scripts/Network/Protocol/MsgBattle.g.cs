// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_battle.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_battle.proto</summary>
  public static partial class MsgBattleReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_battle.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgBattleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBtc2dfYmF0dGxlLnByb3RvEgNTTEcaCW1zZy5wcm90byKdAQoKTWFwRWxl",
            "bWVudBITCgtwbGFuZV90YWJpZBgBIAEoBRITCgtwbGFuZV9wb3NfeBgCIAEo",
            "BRITCgtwbGFuZV9wb3NfeRgDIAEoBRILCgNyb3QYBCABKAUSEQoJYnVpbGRf",
            "bGV2GAUgASgFEhQKDHBsYW5lX3NlcmlhbBgGIAEoBRIKCgJocBgHIAEoBRIO",
            "CgZocF9tYXgYCCABKAUiOAoQQmF0TWFpblNraWxsSW5mbxIRCglza2lsbF90",
            "aWQYASABKAUSEQoJdXNlX3RpbWVzGAIgASgFIjQKD0JhdHRsZUhlcm9Ta2ls",
            "bBIRCgloZXJvX3N0YXIYASABKAUSDgoGc2tpbGxzGAIgAygFImsKDFdzQmF0",
            "dGxlUGFyYRIRCglhdGtfb2ZmX3gYASABKAUSEQoJYXRrX29mZl95GAIgASgF",
            "EhEKCWRlZl9vZmZfeBgDIAEoBRIRCglkZWZfb2ZmX3kYBCABKAUSDwoHYXRr",
            "X2RpchgFIAEoDSIwCgdTb2xkaWVyEhEKCXNvbGRpZXJJZBgBIAEoDRISCgpz",
            "b2xkaWVyTnVtGAIgASgNIswBCglUcm9vcFVuaXQSEAoIbGVhZGVySWQYASAB",
            "KA0SHwoJc29sZGllcnMxGAIgAygLMgwuU0xHLlNvbGRpZXISCwoDcG9zGAMg",
            "ASgNEg0KBWdyb3VwGAQgASgNEhIKCmxlYWRlclN0YXIYBSABKA0SEgoKbGVh",
            "ZGVyTHZJZBgGIAEoDRIOCgZhcm15SWQYByABKA0SDQoFYm9yblgYCCABKA0S",
            "DQoFYm9yblkYCSABKA0SCgoCaHAYCiABKAUSDgoGaHBfbWF4GAsgASgFIoAD",
            "Cg5CYXR0bGVSb2xlRGF0YRIPCgdyb2xlX2lkGAEgASgEEh0KBWdyb3VwGAIg",
            "ASgOMg4uU0xHLkVCYXRHcm91cBIgCgdlbGVtZW50GAMgAygLMg8uU0xHLk1h",
            "cEVsZW1lbnQSHAoEYXJteRgEIAMoCzIOLlNMRy5Ucm9vcFVuaXQSDwoHdHJv",
            "b3BJZBgFIAEoBBIPCgdhdGt0eXBlGAYgASgFEhAKCHJvbGV0eXBlGAcgASgF",
            "Eg0KBW9mZl94GAggASgFEg0KBW9mZl95GAkgASgFEiAKCnRlY2hfYXR0cnMY",
            "CiADKAsyDC5TTEcuQXR0ckluYxIPCgdtc2tpbGxzGAsgAygFEikKC2hlcm9f",
            "c2tpbGxzGAwgAygLMhQuU0xHLkJhdHRsZUhlcm9Ta2lsbBITCgthdXRvX2Fz",
            "c2lnbhgNIAEoBRIpCgptYWluc2tpbGxzGA4gAygLMhUuU0xHLkJhdE1haW5T",
            "a2lsbEluZm8SDgoGYXNzaXN0GA8gASgFIqgBCgpCYXR0bGVEYXRhEgsKA3Np",
            "ZBgBIAEoCRIUCgxiYXR0bGVfdGFiaWQYAiABKA0SIgoFcm9sZXMYAyADKAsy",
            "Ey5TTEcuQmF0dGxlUm9sZURhdGESDwoHYXRrX2RpchgEIAEoDRITCgtiYXR0",
            "bGVfdHlwZRgFIAEoDRIUCgxiYXR0bGVfcGhhc2UYBiABKA0SFwoPYmF0dGxl",
            "X21heHBoYXNlGAcgASgNImkKEEJhdHRsZURhdGFDbGllbnQSEQoJYmF0dGxl",
            "X0lkGAEgASgNEh0KBGRhdGEYAiABKAsyDy5TTEcuQmF0dGxlRGF0YRIPCgdz",
            "cmNfbGVuGAMgASgNEhIKCmZyYW1lX2RhdGEYBCABKAwiOwoRQmF0dGxlRXhp",
            "dFNvbGRpZXISGQoDc29sGAEgASgLMgwuU0xHLlNvbGRpZXISCwoDcG9zGAIg",
            "ASgNIkMKD0JhdHRsZUV4aXRCdWlsZBIUCgxwbGFuZV9zZXJpYWwYASABKAUS",
            "CgoCaHAYAiABKAUSDgoGaHBfbWF4GAMgASgFIlAKDkJhdHRsZUV4aXRIZXJv",
            "Eg8KB2hlcm9fbHYYASABKAUSEQoJaGVyb19zdGFyGAIgASgFEgoKAmhwGAMg",
            "ASgFEg4KBmhwX21heBgEIAEoBSI4Cg9CYXR0bGVFeGl0U2tpbGwSEQoJc2tp",
            "bGxfdGlkGAEgASgFEhIKCmxlZnRfdGltZXMYAiABKAUi8AMKEkJhdHRsZUV4",
            "aXRSb2xlRGF0YRIPCgdyb2xlX2lkGAEgASgEEh0KBWdyb3VwGAIgASgOMg4u",
            "U0xHLkVCYXRHcm91cBImCgZsZWZ0ZXgYAyADKAsyFi5TTEcuQmF0dGxlRXhp",
            "dFNvbGRpZXISKAoIaHVydGVkZXgYBCADKAsyFi5TTEcuQmF0dGxlRXhpdFNv",
            "bGRpZXISJwoHaGVhdnlleBgFIAMoCzIWLlNMRy5CYXR0bGVFeGl0U29sZGll",
            "chImCgZkZWFkZXgYBiADKAsyFi5TTEcuQmF0dGxlRXhpdFNvbGRpZXISEgoK",
            "bG9zdF9yYWRpbxgHIAEoBRIPCgdhdGt0eXBlGAggASgFEhAKCHJvbGV0eXBl",
            "GAkgASgFEhkKEW1haW5HdW5Ta2lsbFRpbWVzGAogASgFEhcKD2Rlc3Ryb3lC",
            "dWlsZE51bRgLIAEoBRIoCg11c2VTa2lsbFRpbWVzGAwgAygLMhEuU0xHLktl",
            "eVZhbHVlUGFpchIkCgZidWlsZHMYDSADKAsyFC5TTEcuQmF0dGxlRXhpdEJ1",
            "aWxkEiIKBWhlcm9zGA4gAygLMhMuU0xHLkJhdHRsZUV4aXRIZXJvEigKCm1h",
            "aW5za2lsbHMYDyADKAsyFC5TTEcuQmF0dGxlRXhpdFNraWxsIoQBChFQaGFz",
            "ZUJhdHRsZVJlc3VsdBIQCghiYXR0bGVJZBgBIAEoBRINCgVwaGFzZRgCIAEo",
            "BRIgCgdlbGVtZW50GAMgAygLMg8uU0xHLk1hcEVsZW1lbnQSHAoEYXJteRgE",
            "IAMoCzIOLlNMRy5Ucm9vcFVuaXQSDgoGYXNzaXN0GAUgASgFIlkKD05leHRQ",
            "aGFzZUJhdHRsZRIQCghiYXR0bGVJZBgBIAEoBRINCgVwaGFzZRgCIAEoBRIl",
            "CgpiYXR0bGVQYXJhGAMgASgLMhEuU0xHLldzQmF0dGxlUGFyYSJeCgxCYXR0",
            "bGVSZXN1bHQSEQoJYmF0dGxlX2lkGAEgASgNEg4KBnJlc3VsdBgCIAEoDRIr",
            "CgpleGl0X3JvbGVzGAMgAygLMhcuU0xHLkJhdHRsZUV4aXRSb2xlRGF0YSIz",
            "Cg9CYXR0bGVCbG9ja0luZm8SIAoHZWxlbWVudBgBIAMoCzIPLlNMRy5NYXBF",
            "bGVtZW50IlYKCVF1aWNrU2hvdBIRCgliYXR0bGVfaWQYASABKA0SDwoHc3Jj",
            "X2xlbhgCIAEoDRISCgpmcmFtZV9kYXRhGAMgASgMEhEKCXN5bmNfcmlkcxgE",
            "IAMoBCJuChJCYXR0bGVTeW5jRnJhbWVPcHMSEQoJYmF0dGxlX2lkGAEgASgN",
            "EhAKCGZyYW1lX2lkGAIgASgNEg8KB3JvbGVfaWQYAyABKAQSDwoHb3BfdHlw",
            "ZRgEIAEoDRIRCglvcF9wYXJhbXMYBSADKA0iSgoSUmVxQmF0dGxlRnJhbWVE",
            "YXRhEhEKCWJhdHRsZV9pZBgBIAEoDRIQCghmcmFtZV9pZBgCIAEoDRIPCgdy",
            "b2xlX2lkGAMgASgEIlYKDUJhdHRsZUZyYW1lT3ASEAoIZnJhbWVfaWQYASAB",
            "KA0SDwoHcm9sZV9pZBgCIAEoBBIPCgdvcF90eXBlGAMgASgNEhEKCW9wX3Bh",
            "cmFtcxgEIAMoDSKVAQoXUmVzcG9uc2VCYXR0bGVGcmFtZURhdGESEQoJYmF0",
            "dGxlX2lkGAEgASgNEhAKCGZyYW1lX2lkGAIgASgNEh8KA29wcxgDIAMoCzIS",
            "LlNMRy5CYXR0bGVGcmFtZU9wEg4KBm9wY29kZRgEIAEoDRIRCglkZWx0YV9u",
            "dW0YBSABKA0SEQoJc3luY19yaWRzGAYgAygEIoABCg9Ccm9hZGNhc3RGcmFt",
            "ZXMSEQoJYmF0dGxlX2lkGAEgASgNEh8KA29wcxgCIAMoCzISLlNMRy5CYXR0",
            "bGVGcmFtZU9wEhMKC2ZyYW1lX2JvdW5kGAMgASgNEhEKCXN5bmNfcmlkcxgE",
            "IAMoBBIRCgl3aW5fZ3JvdXAYBSABKA0qQAoJRUJhdEdyb3VwEhAKDEJhdEdy",
            "b3VwTnVsbBAAEg8KC0JhdEdyb3VwUmVkEAESEAoMQmF0R3JvdXBCbHVlEAIq",
            "bAoLRUJhdHRsZVR5cGUSEAoMVHlwZV9VTktOT1dOEAASDAoIVHlwZV9QVlAQ",
            "ARITCg9UeXBlX0V4cGVkaXRpb24QAhISCg5UeXBlX1BLTW9uc3RlchADEhQK",
            "EFR5cGVfTXV0aUJhdHRsZXMQBCo6CghBVEtfVFlQRRIPCgtBdGtfVU5LTk9X",
            "ThAAEg4KCkF0a19DYXN0bGUQARINCglBdGtfVHJvb3AQAipACglST0xFX1RZ",
            "UEUSEAoMcm9sZV9VTktOT1dOEAASDwoLcm9sZV9QbGF5ZXIQARIQCgxyb2xl",
            "X01vbnN0ZXIQAiruAQoMRUJhdEZyYW1lT3BUEhEKDUZyYW1lT3BUX051bGwQ",
            "ABIVChFGcmFtZU9wVF9Vc2VTa2lsbBABEhgKFEZyYW1lT3BUX1ByaW9yaXR5",
            "QXRrEAISGgoWRnJhbWVPcFRfQXV0b0Fzc2lnblNvbBADEhwKGEZyYW1lT3BU",
            "X01hbnVhbEFzc2luZ1NvbBAEEhUKEUZyYW1lT3BUX0ZhbGxCYWNrEAUSHAoY",
            "RnJhbWVPcFRfQ2hlY2tGcmFtZUludGVyEAYSGQoVRnJhbWVPcFRfUmVxRnJh",
            "bWVEYXRhEAcSEAoMRnJhbWVPcFRfTWF4EAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SLG.MsgReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.EBatGroup), typeof(global::SLG.EBattleType), typeof(global::SLG.ATK_TYPE), typeof(global::SLG.ROLE_TYPE), typeof(global::SLG.EBatFrameOpT), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.MapElement), global::SLG.MapElement.Parser, new[]{ "PlaneTabid", "PlanePosX", "PlanePosY", "Rot", "BuildLev", "PlaneSerial", "Hp", "HpMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BatMainSkillInfo), global::SLG.BatMainSkillInfo.Parser, new[]{ "SkillTid", "UseTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleHeroSkill), global::SLG.BattleHeroSkill.Parser, new[]{ "HeroStar", "Skills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsBattlePara), global::SLG.WsBattlePara.Parser, new[]{ "AtkOffX", "AtkOffY", "DefOffX", "DefOffY", "AtkDir" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.Soldier), global::SLG.Soldier.Parser, new[]{ "SoldierId", "SoldierNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TroopUnit), global::SLG.TroopUnit.Parser, new[]{ "LeaderId", "Soldiers1", "Pos", "Group", "LeaderStar", "LeaderLvId", "ArmyId", "BornX", "BornY", "Hp", "HpMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleRoleData), global::SLG.BattleRoleData.Parser, new[]{ "RoleId", "Group", "Element", "Army", "TroopId", "Atktype", "Roletype", "OffX", "OffY", "TechAttrs", "Mskills", "HeroSkills", "AutoAssign", "Mainskills", "Assist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleData), global::SLG.BattleData.Parser, new[]{ "Sid", "BattleTabid", "Roles", "AtkDir", "BattleType", "BattlePhase", "BattleMaxphase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleDataClient), global::SLG.BattleDataClient.Parser, new[]{ "BattleId", "Data", "SrcLen", "FrameData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleExitSoldier), global::SLG.BattleExitSoldier.Parser, new[]{ "Sol", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleExitBuild), global::SLG.BattleExitBuild.Parser, new[]{ "PlaneSerial", "Hp", "HpMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleExitHero), global::SLG.BattleExitHero.Parser, new[]{ "HeroLv", "HeroStar", "Hp", "HpMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleExitSkill), global::SLG.BattleExitSkill.Parser, new[]{ "SkillTid", "LeftTimes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleExitRoleData), global::SLG.BattleExitRoleData.Parser, new[]{ "RoleId", "Group", "Leftex", "Hurtedex", "Heavyex", "Deadex", "LostRadio", "Atktype", "Roletype", "MainGunSkillTimes", "DestroyBuildNum", "UseSkillTimes", "Builds", "Heros", "Mainskills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PhaseBattleResult), global::SLG.PhaseBattleResult.Parser, new[]{ "BattleId", "Phase", "Element", "Army", "Assist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.NextPhaseBattle), global::SLG.NextPhaseBattle.Parser, new[]{ "BattleId", "Phase", "BattlePara" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleResult), global::SLG.BattleResult.Parser, new[]{ "BattleId", "Result", "ExitRoles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleBlockInfo), global::SLG.BattleBlockInfo.Parser, new[]{ "Element" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.QuickShot), global::SLG.QuickShot.Parser, new[]{ "BattleId", "SrcLen", "FrameData", "SyncRids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleSyncFrameOps), global::SLG.BattleSyncFrameOps.Parser, new[]{ "BattleId", "FrameId", "RoleId", "OpType", "OpParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ReqBattleFrameData), global::SLG.ReqBattleFrameData.Parser, new[]{ "BattleId", "FrameId", "RoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BattleFrameOp), global::SLG.BattleFrameOp.Parser, new[]{ "FrameId", "RoleId", "OpType", "OpParams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ResponseBattleFrameData), global::SLG.ResponseBattleFrameData.Parser, new[]{ "BattleId", "FrameId", "Ops", "Opcode", "DeltaNum", "SyncRids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BroadcastFrames), global::SLG.BroadcastFrames.Parser, new[]{ "BattleId", "Ops", "FrameBound", "SyncRids", "WinGroup" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EBatGroup {
    [pbr::OriginalName("BatGroupNull")] BatGroupNull = 0,
    /// <summary>
    /// 红方
    /// </summary>
    [pbr::OriginalName("BatGroupRed")] BatGroupRed = 1,
    /// <summary>
    /// 蓝方
    /// </summary>
    [pbr::OriginalName("BatGroupBlue")] BatGroupBlue = 2,
  }

  /// <summary>
  /// 战斗类型
  /// </summary>
  public enum EBattleType {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("Type_UNKNOWN")] TypeUnknown = 0,
    /// <summary>
    /// PVP
    /// </summary>
    [pbr::OriginalName("Type_PVP")] TypePvp = 1,
    /// <summary>
    ///远征
    /// </summary>
    [pbr::OriginalName("Type_Expedition")] TypeExpedition = 2,
    /// <summary>
    ///打野
    /// </summary>
    [pbr::OriginalName("Type_PKMonster")] TypePkmonster = 3,
    /// <summary>
    ///连续多场战斗
    /// </summary>
    [pbr::OriginalName("Type_MutiBattles")] TypeMutiBattles = 4,
  }

  public enum ATK_TYPE {
    /// <summary>
    ///占位用
    /// </summary>
    [pbr::OriginalName("Atk_UNKNOWN")] AtkUnknown = 0,
    [pbr::OriginalName("Atk_Castle")] AtkCastle = 1,
    [pbr::OriginalName("Atk_Troop")] AtkTroop = 2,
  }

  public enum ROLE_TYPE {
    [pbr::OriginalName("role_UNKNOWN")] RoleUnknown = 0,
    [pbr::OriginalName("role_Player")] RolePlayer = 1,
    [pbr::OriginalName("role_Monster")] RoleMonster = 2,
  }

  /// <summary>
  /// 帧同步操作类型
  /// </summary>
  public enum EBatFrameOpT {
    [pbr::OriginalName("FrameOpT_Null")] FrameOpTNull = 0,
    /// <summary>
    /// 使用技能
    /// </summary>
    [pbr::OriginalName("FrameOpT_UseSkill")] FrameOpTUseSkill = 1,
    /// <summary>
    /// 优先攻击
    /// </summary>
    [pbr::OriginalName("FrameOpT_PriorityAtk")] FrameOpTPriorityAtk = 2,
    /// <summary>
    /// 设置自动攻击
    /// </summary>
    [pbr::OriginalName("FrameOpT_AutoAssignSol")] FrameOpTAutoAssignSol = 3,
    /// <summary>
    /// 手动放置兵
    /// </summary>
    [pbr::OriginalName("FrameOpT_ManualAssingSol")] FrameOpTManualAssingSol = 4,
    /// <summary>
    /// 撤退
    /// </summary>
    [pbr::OriginalName("FrameOpT_FallBack")] FrameOpTFallBack = 5,
    /// <summary>
    /// 定期检测帧号
    /// </summary>
    [pbr::OriginalName("FrameOpT_CheckFrameInter")] FrameOpTCheckFrameInter = 6,
    /// <summary>
    /// 请求帧数据
    /// </summary>
    [pbr::OriginalName("FrameOpT_ReqFrameData")] FrameOpTReqFrameData = 7,
    [pbr::OriginalName("FrameOpT_Max")] FrameOpTMax = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 地块信息
  /// </summary>
  public sealed partial class MapElement : pb::IMessage<MapElement> {
    private static readonly pb::MessageParser<MapElement> _parser = new pb::MessageParser<MapElement>(() => new MapElement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElement(MapElement other) : this() {
      planeTabid_ = other.planeTabid_;
      planePosX_ = other.planePosX_;
      planePosY_ = other.planePosY_;
      rot_ = other.rot_;
      buildLev_ = other.buildLev_;
      planeSerial_ = other.planeSerial_;
      hp_ = other.hp_;
      hpMax_ = other.hpMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapElement Clone() {
      return new MapElement(this);
    }

    /// <summary>Field number for the "plane_tabid" field.</summary>
    public const int PlaneTabidFieldNumber = 1;
    private int planeTabid_;
    /// <summary>
    /// 地块配置表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneTabid {
      get { return planeTabid_; }
      set {
        planeTabid_ = value;
      }
    }

    /// <summary>Field number for the "plane_pos_x" field.</summary>
    public const int PlanePosXFieldNumber = 2;
    private int planePosX_;
    /// <summary>
    /// 地块坐标x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanePosX {
      get { return planePosX_; }
      set {
        planePosX_ = value;
      }
    }

    /// <summary>Field number for the "plane_pos_y" field.</summary>
    public const int PlanePosYFieldNumber = 3;
    private int planePosY_;
    /// <summary>
    /// 地块坐标y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlanePosY {
      get { return planePosY_; }
      set {
        planePosY_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 4;
    private int rot_;
    /// <summary>
    /// 建筑朝向（暂时填0）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rot {
      get { return rot_; }
      set {
        rot_ = value;
      }
    }

    /// <summary>Field number for the "build_lev" field.</summary>
    public const int BuildLevFieldNumber = 5;
    private int buildLev_;
    /// <summary>
    /// 地块上的建筑等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildLev {
      get { return buildLev_; }
      set {
        buildLev_ = value;
      }
    }

    /// <summary>Field number for the "plane_serial" field.</summary>
    public const int PlaneSerialFieldNumber = 6;
    private int planeSerial_;
    /// <summary>
    /// 地块唯一序列号(手动生成 从1递增即可,防御方继续递增)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneSerial {
      get { return planeSerial_; }
      set {
        planeSerial_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 7;
    private int hp_;
    /// <summary>
    /// 当前值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "hp_max" field.</summary>
    public const int HpMaxFieldNumber = 8;
    private int hpMax_;
    /// <summary>
    /// 上限值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpMax {
      get { return hpMax_; }
      set {
        hpMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneTabid != other.PlaneTabid) return false;
      if (PlanePosX != other.PlanePosX) return false;
      if (PlanePosY != other.PlanePosY) return false;
      if (Rot != other.Rot) return false;
      if (BuildLev != other.BuildLev) return false;
      if (PlaneSerial != other.PlaneSerial) return false;
      if (Hp != other.Hp) return false;
      if (HpMax != other.HpMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneTabid != 0) hash ^= PlaneTabid.GetHashCode();
      if (PlanePosX != 0) hash ^= PlanePosX.GetHashCode();
      if (PlanePosY != 0) hash ^= PlanePosY.GetHashCode();
      if (Rot != 0) hash ^= Rot.GetHashCode();
      if (BuildLev != 0) hash ^= BuildLev.GetHashCode();
      if (PlaneSerial != 0) hash ^= PlaneSerial.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (HpMax != 0) hash ^= HpMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaneTabid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneTabid);
      }
      if (PlanePosX != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlanePosX);
      }
      if (PlanePosY != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlanePosY);
      }
      if (Rot != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rot);
      }
      if (BuildLev != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BuildLev);
      }
      if (PlaneSerial != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PlaneSerial);
      }
      if (Hp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Hp);
      }
      if (HpMax != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HpMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneTabid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneTabid);
      }
      if (PlanePosX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanePosX);
      }
      if (PlanePosY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlanePosY);
      }
      if (Rot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rot);
      }
      if (BuildLev != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildLev);
      }
      if (PlaneSerial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneSerial);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (HpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapElement other) {
      if (other == null) {
        return;
      }
      if (other.PlaneTabid != 0) {
        PlaneTabid = other.PlaneTabid;
      }
      if (other.PlanePosX != 0) {
        PlanePosX = other.PlanePosX;
      }
      if (other.PlanePosY != 0) {
        PlanePosY = other.PlanePosY;
      }
      if (other.Rot != 0) {
        Rot = other.Rot;
      }
      if (other.BuildLev != 0) {
        BuildLev = other.BuildLev;
      }
      if (other.PlaneSerial != 0) {
        PlaneSerial = other.PlaneSerial;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.HpMax != 0) {
        HpMax = other.HpMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneTabid = input.ReadInt32();
            break;
          }
          case 16: {
            PlanePosX = input.ReadInt32();
            break;
          }
          case 24: {
            PlanePosY = input.ReadInt32();
            break;
          }
          case 32: {
            Rot = input.ReadInt32();
            break;
          }
          case 40: {
            BuildLev = input.ReadInt32();
            break;
          }
          case 48: {
            PlaneSerial = input.ReadInt32();
            break;
          }
          case 56: {
            Hp = input.ReadInt32();
            break;
          }
          case 64: {
            HpMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 主炮技能信息
  /// </summary>
  public sealed partial class BatMainSkillInfo : pb::IMessage<BatMainSkillInfo> {
    private static readonly pb::MessageParser<BatMainSkillInfo> _parser = new pb::MessageParser<BatMainSkillInfo>(() => new BatMainSkillInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatMainSkillInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatMainSkillInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatMainSkillInfo(BatMainSkillInfo other) : this() {
      skillTid_ = other.skillTid_;
      useTimes_ = other.useTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatMainSkillInfo Clone() {
      return new BatMainSkillInfo(this);
    }

    /// <summary>Field number for the "skill_tid" field.</summary>
    public const int SkillTidFieldNumber = 1;
    private int skillTid_;
    /// <summary>
    /// 表格id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillTid {
      get { return skillTid_; }
      set {
        skillTid_ = value;
      }
    }

    /// <summary>Field number for the "use_times" field.</summary>
    public const int UseTimesFieldNumber = 2;
    private int useTimes_;
    /// <summary>
    /// 可使用次数（初始数据在全局变量表）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseTimes {
      get { return useTimes_; }
      set {
        useTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatMainSkillInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatMainSkillInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillTid != other.SkillTid) return false;
      if (UseTimes != other.UseTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillTid != 0) hash ^= SkillTid.GetHashCode();
      if (UseTimes != 0) hash ^= UseTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillTid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillTid);
      }
      if (UseTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UseTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillTid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillTid);
      }
      if (UseTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatMainSkillInfo other) {
      if (other == null) {
        return;
      }
      if (other.SkillTid != 0) {
        SkillTid = other.SkillTid;
      }
      if (other.UseTimes != 0) {
        UseTimes = other.UseTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillTid = input.ReadInt32();
            break;
          }
          case 16: {
            UseTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleHeroSkill : pb::IMessage<BattleHeroSkill> {
    private static readonly pb::MessageParser<BattleHeroSkill> _parser = new pb::MessageParser<BattleHeroSkill>(() => new BattleHeroSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleHeroSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleHeroSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleHeroSkill(BattleHeroSkill other) : this() {
      heroStar_ = other.heroStar_;
      skills_ = other.skills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleHeroSkill Clone() {
      return new BattleHeroSkill(this);
    }

    /// <summary>Field number for the "hero_star" field.</summary>
    public const int HeroStarFieldNumber = 1;
    private int heroStar_;
    /// <summary>
    /// 英雄星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar {
      get { return heroStar_; }
      set {
        heroStar_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_skills_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> skills_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Skills {
      get { return skills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleHeroSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleHeroSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroStar != other.HeroStar) return false;
      if(!skills_.Equals(other.skills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroStar != 0) hash ^= HeroStar.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroStar != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroStar);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroStar);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleHeroSkill other) {
      if (other == null) {
        return;
      }
      if (other.HeroStar != 0) {
        HeroStar = other.HeroStar;
      }
      skills_.Add(other.skills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroStar = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsBattlePara : pb::IMessage<WsBattlePara> {
    private static readonly pb::MessageParser<WsBattlePara> _parser = new pb::MessageParser<WsBattlePara>(() => new WsBattlePara());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsBattlePara> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsBattlePara() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsBattlePara(WsBattlePara other) : this() {
      atkOffX_ = other.atkOffX_;
      atkOffY_ = other.atkOffY_;
      defOffX_ = other.defOffX_;
      defOffY_ = other.defOffY_;
      atkDir_ = other.atkDir_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsBattlePara Clone() {
      return new WsBattlePara(this);
    }

    /// <summary>Field number for the "atk_off_x" field.</summary>
    public const int AtkOffXFieldNumber = 1;
    private int atkOffX_;
    /// <summary>
    /// 攻方偏移x(客户端发送)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkOffX {
      get { return atkOffX_; }
      set {
        atkOffX_ = value;
      }
    }

    /// <summary>Field number for the "atk_off_y" field.</summary>
    public const int AtkOffYFieldNumber = 2;
    private int atkOffY_;
    /// <summary>
    /// 攻方偏移y(客户端发送)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AtkOffY {
      get { return atkOffY_; }
      set {
        atkOffY_ = value;
      }
    }

    /// <summary>Field number for the "def_off_x" field.</summary>
    public const int DefOffXFieldNumber = 3;
    private int defOffX_;
    /// <summary>
    /// 守方偏移x(客户端发送)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefOffX {
      get { return defOffX_; }
      set {
        defOffX_ = value;
      }
    }

    /// <summary>Field number for the "def_off_y" field.</summary>
    public const int DefOffYFieldNumber = 4;
    private int defOffY_;
    /// <summary>
    /// 守方偏移y(客户端发送)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefOffY {
      get { return defOffY_; }
      set {
        defOffY_ = value;
      }
    }

    /// <summary>Field number for the "atk_dir" field.</summary>
    public const int AtkDirFieldNumber = 5;
    private uint atkDir_;
    /// <summary>
    /// 攻击方向(1.从左(默认) 2.从右 3.从上 4.从下)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtkDir {
      get { return atkDir_; }
      set {
        atkDir_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsBattlePara);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsBattlePara other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AtkOffX != other.AtkOffX) return false;
      if (AtkOffY != other.AtkOffY) return false;
      if (DefOffX != other.DefOffX) return false;
      if (DefOffY != other.DefOffY) return false;
      if (AtkDir != other.AtkDir) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AtkOffX != 0) hash ^= AtkOffX.GetHashCode();
      if (AtkOffY != 0) hash ^= AtkOffY.GetHashCode();
      if (DefOffX != 0) hash ^= DefOffX.GetHashCode();
      if (DefOffY != 0) hash ^= DefOffY.GetHashCode();
      if (AtkDir != 0) hash ^= AtkDir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AtkOffX != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AtkOffX);
      }
      if (AtkOffY != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AtkOffY);
      }
      if (DefOffX != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefOffX);
      }
      if (DefOffY != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefOffY);
      }
      if (AtkDir != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AtkDir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AtkOffX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkOffX);
      }
      if (AtkOffY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AtkOffY);
      }
      if (DefOffX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefOffX);
      }
      if (DefOffY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefOffY);
      }
      if (AtkDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtkDir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsBattlePara other) {
      if (other == null) {
        return;
      }
      if (other.AtkOffX != 0) {
        AtkOffX = other.AtkOffX;
      }
      if (other.AtkOffY != 0) {
        AtkOffY = other.AtkOffY;
      }
      if (other.DefOffX != 0) {
        DefOffX = other.DefOffX;
      }
      if (other.DefOffY != 0) {
        DefOffY = other.DefOffY;
      }
      if (other.AtkDir != 0) {
        AtkDir = other.AtkDir;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AtkOffX = input.ReadInt32();
            break;
          }
          case 16: {
            AtkOffY = input.ReadInt32();
            break;
          }
          case 24: {
            DefOffX = input.ReadInt32();
            break;
          }
          case 32: {
            DefOffY = input.ReadInt32();
            break;
          }
          case 40: {
            AtkDir = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// zhwl 部队的士兵信息
  /// </summary>
  public sealed partial class Soldier : pb::IMessage<Soldier> {
    private static readonly pb::MessageParser<Soldier> _parser = new pb::MessageParser<Soldier>(() => new Soldier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Soldier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier(Soldier other) : this() {
      soldierId_ = other.soldierId_;
      soldierNum_ = other.soldierNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier Clone() {
      return new Soldier(this);
    }

    /// <summary>Field number for the "soldierId" field.</summary>
    public const int SoldierIdFieldNumber = 1;
    private uint soldierId_;
    /// <summary>
    ///士兵id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoldierId {
      get { return soldierId_; }
      set {
        soldierId_ = value;
      }
    }

    /// <summary>Field number for the "soldierNum" field.</summary>
    public const int SoldierNumFieldNumber = 2;
    private uint soldierNum_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoldierNum {
      get { return soldierNum_; }
      set {
        soldierNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Soldier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Soldier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoldierId != other.SoldierId) return false;
      if (SoldierNum != other.SoldierNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoldierId != 0) hash ^= SoldierId.GetHashCode();
      if (SoldierNum != 0) hash ^= SoldierNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoldierId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SoldierId);
      }
      if (SoldierNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SoldierNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoldierId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoldierId);
      }
      if (SoldierNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoldierNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Soldier other) {
      if (other == null) {
        return;
      }
      if (other.SoldierId != 0) {
        SoldierId = other.SoldierId;
      }
      if (other.SoldierNum != 0) {
        SoldierNum = other.SoldierNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoldierId = input.ReadUInt32();
            break;
          }
          case 16: {
            SoldierNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///统帅和士兵二选一
  /// </summary>
  public sealed partial class TroopUnit : pb::IMessage<TroopUnit> {
    private static readonly pb::MessageParser<TroopUnit> _parser = new pb::MessageParser<TroopUnit>(() => new TroopUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopUnit(TroopUnit other) : this() {
      leaderId_ = other.leaderId_;
      soldiers1_ = other.soldiers1_.Clone();
      pos_ = other.pos_;
      group_ = other.group_;
      leaderStar_ = other.leaderStar_;
      leaderLvId_ = other.leaderLvId_;
      armyId_ = other.armyId_;
      bornX_ = other.bornX_;
      bornY_ = other.bornY_;
      hp_ = other.hp_;
      hpMax_ = other.hpMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopUnit Clone() {
      return new TroopUnit(this);
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 1;
    private uint leaderId_;
    /// <summary>
    ///统帅ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "soldiers1" field.</summary>
    public const int Soldiers1FieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.Soldier> _repeated_soldiers1_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.Soldier.Parser);
    private readonly pbc::RepeatedField<global::SLG.Soldier> soldiers1_ = new pbc::RepeatedField<global::SLG.Soldier>();
    /// <summary>
    ///士兵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.Soldier> Soldiers1 {
      get { return soldiers1_; }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private uint pos_;
    /// <summary>
    ///位置（1到9代表9个格的位置）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 4;
    private uint group_;
    /// <summary>
    ///组数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "leaderStar" field.</summary>
    public const int LeaderStarFieldNumber = 5;
    private uint leaderStar_;
    /// <summary>
    ///统帅星级ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderStar {
      get { return leaderStar_; }
      set {
        leaderStar_ = value;
      }
    }

    /// <summary>Field number for the "leaderLvId" field.</summary>
    public const int LeaderLvIdFieldNumber = 6;
    private uint leaderLvId_;
    /// <summary>
    ///统帅等级ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderLvId {
      get { return leaderLvId_; }
      set {
        leaderLvId_ = value;
      }
    }

    /// <summary>Field number for the "armyId" field.</summary>
    public const int ArmyIdFieldNumber = 7;
    private uint armyId_;
    /// <summary>
    /// 所在部队id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ArmyId {
      get { return armyId_; }
      set {
        armyId_ = value;
      }
    }

    /// <summary>Field number for the "bornX" field.</summary>
    public const int BornXFieldNumber = 8;
    private uint bornX_;
    /// <summary>
    /// 出生点x坐标(读表)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BornX {
      get { return bornX_; }
      set {
        bornX_ = value;
      }
    }

    /// <summary>Field number for the "bornY" field.</summary>
    public const int BornYFieldNumber = 9;
    private uint bornY_;
    /// <summary>
    /// 出生点y坐标(读表)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BornY {
      get { return bornY_; }
      set {
        bornY_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 10;
    private int hp_;
    /// <summary>
    /// 当前值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "hp_max" field.</summary>
    public const int HpMaxFieldNumber = 11;
    private int hpMax_;
    /// <summary>
    /// 上限值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpMax {
      get { return hpMax_; }
      set {
        hpMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaderId != other.LeaderId) return false;
      if(!soldiers1_.Equals(other.soldiers1_)) return false;
      if (Pos != other.Pos) return false;
      if (Group != other.Group) return false;
      if (LeaderStar != other.LeaderStar) return false;
      if (LeaderLvId != other.LeaderLvId) return false;
      if (ArmyId != other.ArmyId) return false;
      if (BornX != other.BornX) return false;
      if (BornY != other.BornY) return false;
      if (Hp != other.Hp) return false;
      if (HpMax != other.HpMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaderId != 0) hash ^= LeaderId.GetHashCode();
      hash ^= soldiers1_.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (Group != 0) hash ^= Group.GetHashCode();
      if (LeaderStar != 0) hash ^= LeaderStar.GetHashCode();
      if (LeaderLvId != 0) hash ^= LeaderLvId.GetHashCode();
      if (ArmyId != 0) hash ^= ArmyId.GetHashCode();
      if (BornX != 0) hash ^= BornX.GetHashCode();
      if (BornY != 0) hash ^= BornY.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (HpMax != 0) hash ^= HpMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LeaderId);
      }
      soldiers1_.WriteTo(output, _repeated_soldiers1_codec);
      if (Pos != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Pos);
      }
      if (Group != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Group);
      }
      if (LeaderStar != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LeaderStar);
      }
      if (LeaderLvId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LeaderLvId);
      }
      if (ArmyId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ArmyId);
      }
      if (BornX != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BornX);
      }
      if (BornY != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(BornY);
      }
      if (Hp != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Hp);
      }
      if (HpMax != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HpMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderId);
      }
      size += soldiers1_.CalculateSize(_repeated_soldiers1_codec);
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (LeaderStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderStar);
      }
      if (LeaderLvId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderLvId);
      }
      if (ArmyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ArmyId);
      }
      if (BornX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BornX);
      }
      if (BornY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BornY);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (HpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopUnit other) {
      if (other == null) {
        return;
      }
      if (other.LeaderId != 0) {
        LeaderId = other.LeaderId;
      }
      soldiers1_.Add(other.soldiers1_);
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.LeaderStar != 0) {
        LeaderStar = other.LeaderStar;
      }
      if (other.LeaderLvId != 0) {
        LeaderLvId = other.LeaderLvId;
      }
      if (other.ArmyId != 0) {
        ArmyId = other.ArmyId;
      }
      if (other.BornX != 0) {
        BornX = other.BornX;
      }
      if (other.BornY != 0) {
        BornY = other.BornY;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.HpMax != 0) {
        HpMax = other.HpMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LeaderId = input.ReadUInt32();
            break;
          }
          case 18: {
            soldiers1_.AddEntriesFrom(input, _repeated_soldiers1_codec);
            break;
          }
          case 24: {
            Pos = input.ReadUInt32();
            break;
          }
          case 32: {
            Group = input.ReadUInt32();
            break;
          }
          case 40: {
            LeaderStar = input.ReadUInt32();
            break;
          }
          case 48: {
            LeaderLvId = input.ReadUInt32();
            break;
          }
          case 56: {
            ArmyId = input.ReadUInt32();
            break;
          }
          case 64: {
            BornX = input.ReadUInt32();
            break;
          }
          case 72: {
            BornY = input.ReadUInt32();
            break;
          }
          case 80: {
            Hp = input.ReadInt32();
            break;
          }
          case 88: {
            HpMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗玩家信息
  /// </summary>
  public sealed partial class BattleRoleData : pb::IMessage<BattleRoleData> {
    private static readonly pb::MessageParser<BattleRoleData> _parser = new pb::MessageParser<BattleRoleData>(() => new BattleRoleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleRoleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoleData(BattleRoleData other) : this() {
      roleId_ = other.roleId_;
      group_ = other.group_;
      element_ = other.element_.Clone();
      army_ = other.army_.Clone();
      troopId_ = other.troopId_;
      atktype_ = other.atktype_;
      roletype_ = other.roletype_;
      offX_ = other.offX_;
      offY_ = other.offY_;
      techAttrs_ = other.techAttrs_.Clone();
      mskills_ = other.mskills_.Clone();
      heroSkills_ = other.heroSkills_.Clone();
      autoAssign_ = other.autoAssign_;
      mainskills_ = other.mainskills_.Clone();
      assist_ = other.assist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleRoleData Clone() {
      return new BattleRoleData(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::SLG.EBatGroup group_ = global::SLG.EBatGroup.BatGroupNull;
    /// <summary>
    /// 阵营(EBatGroup) 1：红方（攻击方） 2：蓝方（防守方）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.EBatGroup Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.MapElement> _repeated_element_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.MapElement.Parser);
    private readonly pbc::RepeatedField<global::SLG.MapElement> element_ = new pbc::RepeatedField<global::SLG.MapElement>();
    /// <summary>
    /// 地块信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.MapElement> Element {
      get { return element_; }
    }

    /// <summary>Field number for the "army" field.</summary>
    public const int ArmyFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SLG.TroopUnit> _repeated_army_codec
        = pb::FieldCodec.ForMessage(34, global::SLG.TroopUnit.Parser);
    private readonly pbc::RepeatedField<global::SLG.TroopUnit> army_ = new pbc::RepeatedField<global::SLG.TroopUnit>();
    /// <summary>
    /// 出兵信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.TroopUnit> Army {
      get { return army_; }
    }

    /// <summary>Field number for the "troopId" field.</summary>
    public const int TroopIdFieldNumber = 5;
    private ulong troopId_;
    /// <summary>
    /// 军队ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "atktype" field.</summary>
    public const int AtktypeFieldNumber = 6;
    private int atktype_;
    /// <summary>
    /// 1.主城 2.部队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Atktype {
      get { return atktype_; }
      set {
        atktype_ = value;
      }
    }

    /// <summary>Field number for the "roletype" field.</summary>
    public const int RoletypeFieldNumber = 7;
    private int roletype_;
    /// <summary>
    /// 1.玩家 2.野怪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roletype {
      get { return roletype_; }
      set {
        roletype_ = value;
      }
    }

    /// <summary>Field number for the "off_x" field.</summary>
    public const int OffXFieldNumber = 8;
    private int offX_;
    /// <summary>
    /// 偏移x(客户端发送)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffX {
      get { return offX_; }
      set {
        offX_ = value;
      }
    }

    /// <summary>Field number for the "off_y" field.</summary>
    public const int OffYFieldNumber = 9;
    private int offY_;
    /// <summary>
    /// 偏移y(客户端发送)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OffY {
      get { return offY_; }
      set {
        offY_ = value;
      }
    }

    /// <summary>Field number for the "tech_attrs" field.</summary>
    public const int TechAttrsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::SLG.AttrInc> _repeated_techAttrs_codec
        = pb::FieldCodec.ForMessage(82, global::SLG.AttrInc.Parser);
    private readonly pbc::RepeatedField<global::SLG.AttrInc> techAttrs_ = new pbc::RepeatedField<global::SLG.AttrInc>();
    /// <summary>
    /// 科技带入属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.AttrInc> TechAttrs {
      get { return techAttrs_; }
    }

    /// <summary>Field number for the "mskills" field.</summary>
    public const int MskillsFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_mskills_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> mskills_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 主炮技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Mskills {
      get { return mskills_; }
    }

    /// <summary>Field number for the "hero_skills" field.</summary>
    public const int HeroSkillsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::SLG.BattleHeroSkill> _repeated_heroSkills_codec
        = pb::FieldCodec.ForMessage(98, global::SLG.BattleHeroSkill.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleHeroSkill> heroSkills_ = new pbc::RepeatedField<global::SLG.BattleHeroSkill>();
    /// <summary>
    /// 英雄技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleHeroSkill> HeroSkills {
      get { return heroSkills_; }
    }

    /// <summary>Field number for the "auto_assign" field.</summary>
    public const int AutoAssignFieldNumber = 13;
    private int autoAssign_;
    /// <summary>
    /// 0 手动放 1 自动放(默认)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AutoAssign {
      get { return autoAssign_; }
      set {
        autoAssign_ = value;
      }
    }

    /// <summary>Field number for the "mainskills" field.</summary>
    public const int MainskillsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SLG.BatMainSkillInfo> _repeated_mainskills_codec
        = pb::FieldCodec.ForMessage(114, global::SLG.BatMainSkillInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.BatMainSkillInfo> mainskills_ = new pbc::RepeatedField<global::SLG.BatMainSkillInfo>();
    /// <summary>
    /// 主炮技能信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BatMainSkillInfo> Mainskills {
      get { return mainskills_; }
    }

    /// <summary>Field number for the "assist" field.</summary>
    public const int AssistFieldNumber = 15;
    private int assist_;
    /// <summary>
    ///协助进入战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Assist {
      get { return assist_; }
      set {
        assist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleRoleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleRoleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (Group != other.Group) return false;
      if(!element_.Equals(other.element_)) return false;
      if(!army_.Equals(other.army_)) return false;
      if (TroopId != other.TroopId) return false;
      if (Atktype != other.Atktype) return false;
      if (Roletype != other.Roletype) return false;
      if (OffX != other.OffX) return false;
      if (OffY != other.OffY) return false;
      if(!techAttrs_.Equals(other.techAttrs_)) return false;
      if(!mskills_.Equals(other.mskills_)) return false;
      if(!heroSkills_.Equals(other.heroSkills_)) return false;
      if (AutoAssign != other.AutoAssign) return false;
      if(!mainskills_.Equals(other.mainskills_)) return false;
      if (Assist != other.Assist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (Group != global::SLG.EBatGroup.BatGroupNull) hash ^= Group.GetHashCode();
      hash ^= element_.GetHashCode();
      hash ^= army_.GetHashCode();
      if (TroopId != 0UL) hash ^= TroopId.GetHashCode();
      if (Atktype != 0) hash ^= Atktype.GetHashCode();
      if (Roletype != 0) hash ^= Roletype.GetHashCode();
      if (OffX != 0) hash ^= OffX.GetHashCode();
      if (OffY != 0) hash ^= OffY.GetHashCode();
      hash ^= techAttrs_.GetHashCode();
      hash ^= mskills_.GetHashCode();
      hash ^= heroSkills_.GetHashCode();
      if (AutoAssign != 0) hash ^= AutoAssign.GetHashCode();
      hash ^= mainskills_.GetHashCode();
      if (Assist != 0) hash ^= Assist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Group != global::SLG.EBatGroup.BatGroupNull) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Group);
      }
      element_.WriteTo(output, _repeated_element_codec);
      army_.WriteTo(output, _repeated_army_codec);
      if (TroopId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TroopId);
      }
      if (Atktype != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Atktype);
      }
      if (Roletype != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Roletype);
      }
      if (OffX != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OffX);
      }
      if (OffY != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OffY);
      }
      techAttrs_.WriteTo(output, _repeated_techAttrs_codec);
      mskills_.WriteTo(output, _repeated_mskills_codec);
      heroSkills_.WriteTo(output, _repeated_heroSkills_codec);
      if (AutoAssign != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AutoAssign);
      }
      mainskills_.WriteTo(output, _repeated_mainskills_codec);
      if (Assist != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Assist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Group != global::SLG.EBatGroup.BatGroupNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
      }
      size += element_.CalculateSize(_repeated_element_codec);
      size += army_.CalculateSize(_repeated_army_codec);
      if (TroopId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TroopId);
      }
      if (Atktype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Atktype);
      }
      if (Roletype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roletype);
      }
      if (OffX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffX);
      }
      if (OffY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OffY);
      }
      size += techAttrs_.CalculateSize(_repeated_techAttrs_codec);
      size += mskills_.CalculateSize(_repeated_mskills_codec);
      size += heroSkills_.CalculateSize(_repeated_heroSkills_codec);
      if (AutoAssign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AutoAssign);
      }
      size += mainskills_.CalculateSize(_repeated_mainskills_codec);
      if (Assist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleRoleData other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.Group != global::SLG.EBatGroup.BatGroupNull) {
        Group = other.Group;
      }
      element_.Add(other.element_);
      army_.Add(other.army_);
      if (other.TroopId != 0UL) {
        TroopId = other.TroopId;
      }
      if (other.Atktype != 0) {
        Atktype = other.Atktype;
      }
      if (other.Roletype != 0) {
        Roletype = other.Roletype;
      }
      if (other.OffX != 0) {
        OffX = other.OffX;
      }
      if (other.OffY != 0) {
        OffY = other.OffY;
      }
      techAttrs_.Add(other.techAttrs_);
      mskills_.Add(other.mskills_);
      heroSkills_.Add(other.heroSkills_);
      if (other.AutoAssign != 0) {
        AutoAssign = other.AutoAssign;
      }
      mainskills_.Add(other.mainskills_);
      if (other.Assist != 0) {
        Assist = other.Assist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Group = (global::SLG.EBatGroup) input.ReadEnum();
            break;
          }
          case 26: {
            element_.AddEntriesFrom(input, _repeated_element_codec);
            break;
          }
          case 34: {
            army_.AddEntriesFrom(input, _repeated_army_codec);
            break;
          }
          case 40: {
            TroopId = input.ReadUInt64();
            break;
          }
          case 48: {
            Atktype = input.ReadInt32();
            break;
          }
          case 56: {
            Roletype = input.ReadInt32();
            break;
          }
          case 64: {
            OffX = input.ReadInt32();
            break;
          }
          case 72: {
            OffY = input.ReadInt32();
            break;
          }
          case 82: {
            techAttrs_.AddEntriesFrom(input, _repeated_techAttrs_codec);
            break;
          }
          case 90:
          case 88: {
            mskills_.AddEntriesFrom(input, _repeated_mskills_codec);
            break;
          }
          case 98: {
            heroSkills_.AddEntriesFrom(input, _repeated_heroSkills_codec);
            break;
          }
          case 104: {
            AutoAssign = input.ReadInt32();
            break;
          }
          case 114: {
            mainskills_.AddEntriesFrom(input, _repeated_mainskills_codec);
            break;
          }
          case 120: {
            Assist = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗数据
  /// </summary>
  public sealed partial class BattleData : pb::IMessage<BattleData> {
    private static readonly pb::MessageParser<BattleData> _parser = new pb::MessageParser<BattleData>(() => new BattleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleData(BattleData other) : this() {
      sid_ = other.sid_;
      battleTabid_ = other.battleTabid_;
      roles_ = other.roles_.Clone();
      atkDir_ = other.atkDir_;
      battleType_ = other.battleType_;
      battlePhase_ = other.battlePhase_;
      battleMaxphase_ = other.battleMaxphase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleData Clone() {
      return new BattleData(this);
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 1;
    private string sid_ = "";
    /// <summary>
    /// 服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battle_tabid" field.</summary>
    public const int BattleTabidFieldNumber = 2;
    private uint battleTabid_;
    /// <summary>
    /// 暂时不填写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleTabid {
      get { return battleTabid_; }
      set {
        battleTabid_ = value;
      }
    }

    /// <summary>Field number for the "roles" field.</summary>
    public const int RolesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.BattleRoleData> _repeated_roles_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.BattleRoleData.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleRoleData> roles_ = new pbc::RepeatedField<global::SLG.BattleRoleData>();
    /// <summary>
    /// 战斗玩家数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleRoleData> Roles {
      get { return roles_; }
    }

    /// <summary>Field number for the "atk_dir" field.</summary>
    public const int AtkDirFieldNumber = 4;
    private uint atkDir_;
    /// <summary>
    /// 攻击方向(1.从左(默认) 2.从右 3.从上 4.从下)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtkDir {
      get { return atkDir_; }
      set {
        atkDir_ = value;
      }
    }

    /// <summary>Field number for the "battle_type" field.</summary>
    public const int BattleTypeFieldNumber = 5;
    private uint battleType_;
    /// <summary>
    /// 战斗类型(1 pvp 2 推图pve 3 大地图pve)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "battle_phase" field.</summary>
    public const int BattlePhaseFieldNumber = 6;
    private uint battlePhase_;
    /// <summary>
    ///连续多场战斗的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattlePhase {
      get { return battlePhase_; }
      set {
        battlePhase_ = value;
      }
    }

    /// <summary>Field number for the "battle_maxphase" field.</summary>
    public const int BattleMaxphaseFieldNumber = 7;
    private uint battleMaxphase_;
    /// <summary>
    ///连续多场战斗总场次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleMaxphase {
      get { return battleMaxphase_; }
      set {
        battleMaxphase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sid != other.Sid) return false;
      if (BattleTabid != other.BattleTabid) return false;
      if(!roles_.Equals(other.roles_)) return false;
      if (AtkDir != other.AtkDir) return false;
      if (BattleType != other.BattleType) return false;
      if (BattlePhase != other.BattlePhase) return false;
      if (BattleMaxphase != other.BattleMaxphase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (BattleTabid != 0) hash ^= BattleTabid.GetHashCode();
      hash ^= roles_.GetHashCode();
      if (AtkDir != 0) hash ^= AtkDir.GetHashCode();
      if (BattleType != 0) hash ^= BattleType.GetHashCode();
      if (BattlePhase != 0) hash ^= BattlePhase.GetHashCode();
      if (BattleMaxphase != 0) hash ^= BattleMaxphase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sid);
      }
      if (BattleTabid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BattleTabid);
      }
      roles_.WriteTo(output, _repeated_roles_codec);
      if (AtkDir != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AtkDir);
      }
      if (BattleType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BattleType);
      }
      if (BattlePhase != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BattlePhase);
      }
      if (BattleMaxphase != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(BattleMaxphase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (BattleTabid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleTabid);
      }
      size += roles_.CalculateSize(_repeated_roles_codec);
      if (AtkDir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtkDir);
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleType);
      }
      if (BattlePhase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattlePhase);
      }
      if (BattleMaxphase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleMaxphase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleData other) {
      if (other == null) {
        return;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      if (other.BattleTabid != 0) {
        BattleTabid = other.BattleTabid;
      }
      roles_.Add(other.roles_);
      if (other.AtkDir != 0) {
        AtkDir = other.AtkDir;
      }
      if (other.BattleType != 0) {
        BattleType = other.BattleType;
      }
      if (other.BattlePhase != 0) {
        BattlePhase = other.BattlePhase;
      }
      if (other.BattleMaxphase != 0) {
        BattleMaxphase = other.BattleMaxphase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sid = input.ReadString();
            break;
          }
          case 16: {
            BattleTabid = input.ReadUInt32();
            break;
          }
          case 26: {
            roles_.AddEntriesFrom(input, _repeated_roles_codec);
            break;
          }
          case 32: {
            AtkDir = input.ReadUInt32();
            break;
          }
          case 40: {
            BattleType = input.ReadUInt32();
            break;
          }
          case 48: {
            BattlePhase = input.ReadUInt32();
            break;
          }
          case 56: {
            BattleMaxphase = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 发给客户端的战斗数据
  /// </summary>
  public sealed partial class BattleDataClient : pb::IMessage<BattleDataClient> {
    private static readonly pb::MessageParser<BattleDataClient> _parser = new pb::MessageParser<BattleDataClient>(() => new BattleDataClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleDataClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDataClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDataClient(BattleDataClient other) : this() {
      battleId_ = other.battleId_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      srcLen_ = other.srcLen_;
      frameData_ = other.frameData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleDataClient Clone() {
      return new BattleDataClient(this);
    }

    /// <summary>Field number for the "battle_Id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::SLG.BattleData data_;
    /// <summary>
    /// 战斗数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.BattleData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "src_len" field.</summary>
    public const int SrcLenFieldNumber = 3;
    private uint srcLen_;
    /// <summary>
    /// 压缩前数据长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcLen {
      get { return srcLen_; }
      set {
        srcLen_ = value;
      }
    }

    /// <summary>Field number for the "frame_data" field.</summary>
    public const int FrameDataFieldNumber = 4;
    private pb::ByteString frameData_ = pb::ByteString.Empty;
    /// <summary>
    /// 一帧数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FrameData {
      get { return frameData_; }
      set {
        frameData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleDataClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleDataClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (SrcLen != other.SrcLen) return false;
      if (FrameData != other.FrameData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (SrcLen != 0) hash ^= SrcLen.GetHashCode();
      if (FrameData.Length != 0) hash ^= FrameData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (SrcLen != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SrcLen);
      }
      if (FrameData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(FrameData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (SrcLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcLen);
      }
      if (FrameData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FrameData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleDataClient other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::SLG.BattleData();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.SrcLen != 0) {
        SrcLen = other.SrcLen;
      }
      if (other.FrameData.Length != 0) {
        FrameData = other.FrameData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::SLG.BattleData();
            }
            input.ReadMessage(Data);
            break;
          }
          case 24: {
            SrcLen = input.ReadUInt32();
            break;
          }
          case 34: {
            FrameData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleExitSoldier : pb::IMessage<BattleExitSoldier> {
    private static readonly pb::MessageParser<BattleExitSoldier> _parser = new pb::MessageParser<BattleExitSoldier>(() => new BattleExitSoldier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleExitSoldier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitSoldier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitSoldier(BattleExitSoldier other) : this() {
      sol_ = other.sol_ != null ? other.sol_.Clone() : null;
      pos_ = other.pos_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitSoldier Clone() {
      return new BattleExitSoldier(this);
    }

    /// <summary>Field number for the "sol" field.</summary>
    public const int SolFieldNumber = 1;
    private global::SLG.Soldier sol_;
    /// <summary>
    /// 兵种信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.Soldier Sol {
      get { return sol_; }
      set {
        sol_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private uint pos_;
    /// <summary>
    /// 位置信息（进入战斗时传入）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleExitSoldier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleExitSoldier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sol, other.Sol)) return false;
      if (Pos != other.Pos) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sol_ != null) hash ^= Sol.GetHashCode();
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sol_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sol);
      }
      if (Pos != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sol);
      }
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleExitSoldier other) {
      if (other == null) {
        return;
      }
      if (other.sol_ != null) {
        if (sol_ == null) {
          Sol = new global::SLG.Soldier();
        }
        Sol.MergeFrom(other.Sol);
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sol_ == null) {
              Sol = new global::SLG.Soldier();
            }
            input.ReadMessage(Sol);
            break;
          }
          case 16: {
            Pos = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleExitBuild : pb::IMessage<BattleExitBuild> {
    private static readonly pb::MessageParser<BattleExitBuild> _parser = new pb::MessageParser<BattleExitBuild>(() => new BattleExitBuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleExitBuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitBuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitBuild(BattleExitBuild other) : this() {
      planeSerial_ = other.planeSerial_;
      hp_ = other.hp_;
      hpMax_ = other.hpMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitBuild Clone() {
      return new BattleExitBuild(this);
    }

    /// <summary>Field number for the "plane_serial" field.</summary>
    public const int PlaneSerialFieldNumber = 1;
    private int planeSerial_;
    /// <summary>
    /// 地块唯一序列号(手动生成 从1递增即可,防御方继续递增)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaneSerial {
      get { return planeSerial_; }
      set {
        planeSerial_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    /// <summary>
    /// 当前值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "hp_max" field.</summary>
    public const int HpMaxFieldNumber = 3;
    private int hpMax_;
    /// <summary>
    /// 上限值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpMax {
      get { return hpMax_; }
      set {
        hpMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleExitBuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleExitBuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlaneSerial != other.PlaneSerial) return false;
      if (Hp != other.Hp) return false;
      if (HpMax != other.HpMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlaneSerial != 0) hash ^= PlaneSerial.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (HpMax != 0) hash ^= HpMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaneSerial != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaneSerial);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (HpMax != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaneSerial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaneSerial);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (HpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleExitBuild other) {
      if (other == null) {
        return;
      }
      if (other.PlaneSerial != 0) {
        PlaneSerial = other.PlaneSerial;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.HpMax != 0) {
        HpMax = other.HpMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlaneSerial = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 24: {
            HpMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleExitHero : pb::IMessage<BattleExitHero> {
    private static readonly pb::MessageParser<BattleExitHero> _parser = new pb::MessageParser<BattleExitHero>(() => new BattleExitHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleExitHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitHero(BattleExitHero other) : this() {
      heroLv_ = other.heroLv_;
      heroStar_ = other.heroStar_;
      hp_ = other.hp_;
      hpMax_ = other.hpMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitHero Clone() {
      return new BattleExitHero(this);
    }

    /// <summary>Field number for the "hero_lv" field.</summary>
    public const int HeroLvFieldNumber = 1;
    private int heroLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroLv {
      get { return heroLv_; }
      set {
        heroLv_ = value;
      }
    }

    /// <summary>Field number for the "hero_star" field.</summary>
    public const int HeroStarFieldNumber = 2;
    private int heroStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroStar {
      get { return heroStar_; }
      set {
        heroStar_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private int hp_;
    /// <summary>
    /// 当前值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "hp_max" field.</summary>
    public const int HpMaxFieldNumber = 4;
    private int hpMax_;
    /// <summary>
    /// 上限值，初始数据从表读取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpMax {
      get { return hpMax_; }
      set {
        hpMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleExitHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleExitHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroLv != other.HeroLv) return false;
      if (HeroStar != other.HeroStar) return false;
      if (Hp != other.Hp) return false;
      if (HpMax != other.HpMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroLv != 0) hash ^= HeroLv.GetHashCode();
      if (HeroStar != 0) hash ^= HeroStar.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (HpMax != 0) hash ^= HpMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroLv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroLv);
      }
      if (HeroStar != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HeroStar);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Hp);
      }
      if (HpMax != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HpMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroLv);
      }
      if (HeroStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroStar);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (HpMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleExitHero other) {
      if (other == null) {
        return;
      }
      if (other.HeroLv != 0) {
        HeroLv = other.HeroLv;
      }
      if (other.HeroStar != 0) {
        HeroStar = other.HeroStar;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.HpMax != 0) {
        HpMax = other.HpMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HeroLv = input.ReadInt32();
            break;
          }
          case 16: {
            HeroStar = input.ReadInt32();
            break;
          }
          case 24: {
            Hp = input.ReadInt32();
            break;
          }
          case 32: {
            HpMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleExitSkill : pb::IMessage<BattleExitSkill> {
    private static readonly pb::MessageParser<BattleExitSkill> _parser = new pb::MessageParser<BattleExitSkill>(() => new BattleExitSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleExitSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitSkill(BattleExitSkill other) : this() {
      skillTid_ = other.skillTid_;
      leftTimes_ = other.leftTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitSkill Clone() {
      return new BattleExitSkill(this);
    }

    /// <summary>Field number for the "skill_tid" field.</summary>
    public const int SkillTidFieldNumber = 1;
    private int skillTid_;
    /// <summary>
    /// 表格id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillTid {
      get { return skillTid_; }
      set {
        skillTid_ = value;
      }
    }

    /// <summary>Field number for the "left_times" field.</summary>
    public const int LeftTimesFieldNumber = 2;
    private int leftTimes_;
    /// <summary>
    /// 剩余次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTimes {
      get { return leftTimes_; }
      set {
        leftTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleExitSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleExitSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SkillTid != other.SkillTid) return false;
      if (LeftTimes != other.LeftTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SkillTid != 0) hash ^= SkillTid.GetHashCode();
      if (LeftTimes != 0) hash ^= LeftTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillTid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillTid);
      }
      if (LeftTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillTid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillTid);
      }
      if (LeftTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleExitSkill other) {
      if (other == null) {
        return;
      }
      if (other.SkillTid != 0) {
        SkillTid = other.SkillTid;
      }
      if (other.LeftTimes != 0) {
        LeftTimes = other.LeftTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SkillTid = input.ReadInt32();
            break;
          }
          case 16: {
            LeftTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗退出玩家信息
  /// </summary>
  public sealed partial class BattleExitRoleData : pb::IMessage<BattleExitRoleData> {
    private static readonly pb::MessageParser<BattleExitRoleData> _parser = new pb::MessageParser<BattleExitRoleData>(() => new BattleExitRoleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleExitRoleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitRoleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitRoleData(BattleExitRoleData other) : this() {
      roleId_ = other.roleId_;
      group_ = other.group_;
      leftex_ = other.leftex_.Clone();
      hurtedex_ = other.hurtedex_.Clone();
      heavyex_ = other.heavyex_.Clone();
      deadex_ = other.deadex_.Clone();
      lostRadio_ = other.lostRadio_;
      atktype_ = other.atktype_;
      roletype_ = other.roletype_;
      mainGunSkillTimes_ = other.mainGunSkillTimes_;
      destroyBuildNum_ = other.destroyBuildNum_;
      useSkillTimes_ = other.useSkillTimes_.Clone();
      builds_ = other.builds_.Clone();
      heros_ = other.heros_.Clone();
      mainskills_ = other.mainskills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleExitRoleData Clone() {
      return new BattleExitRoleData(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    /// <summary>
    /// 玩家唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 2;
    private global::SLG.EBatGroup group_ = global::SLG.EBatGroup.BatGroupNull;
    /// <summary>
    /// 阵营(EBatGroup) 1：红方（攻击方） 2：蓝方（防守方）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.EBatGroup Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "leftex" field.</summary>
    public const int LeftexFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.BattleExitSoldier> _repeated_leftex_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.BattleExitSoldier.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitSoldier> leftex_ = new pbc::RepeatedField<global::SLG.BattleExitSoldier>();
    /// <summary>
    /// 带位置 剩余兵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitSoldier> Leftex {
      get { return leftex_; }
    }

    /// <summary>Field number for the "hurtedex" field.</summary>
    public const int HurtedexFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SLG.BattleExitSoldier> _repeated_hurtedex_codec
        = pb::FieldCodec.ForMessage(34, global::SLG.BattleExitSoldier.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitSoldier> hurtedex_ = new pbc::RepeatedField<global::SLG.BattleExitSoldier>();
    /// <summary>
    /// 带位置 轻伤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitSoldier> Hurtedex {
      get { return hurtedex_; }
    }

    /// <summary>Field number for the "heavyex" field.</summary>
    public const int HeavyexFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SLG.BattleExitSoldier> _repeated_heavyex_codec
        = pb::FieldCodec.ForMessage(42, global::SLG.BattleExitSoldier.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitSoldier> heavyex_ = new pbc::RepeatedField<global::SLG.BattleExitSoldier>();
    /// <summary>
    /// 带位置 重伤
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitSoldier> Heavyex {
      get { return heavyex_; }
    }

    /// <summary>Field number for the "deadex" field.</summary>
    public const int DeadexFieldNumber = 6;
    private static readonly pb::FieldCodec<global::SLG.BattleExitSoldier> _repeated_deadex_codec
        = pb::FieldCodec.ForMessage(50, global::SLG.BattleExitSoldier.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitSoldier> deadex_ = new pbc::RepeatedField<global::SLG.BattleExitSoldier>();
    /// <summary>
    /// 带位置 死兵
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitSoldier> Deadex {
      get { return deadex_; }
    }

    /// <summary>Field number for the "lost_radio" field.</summary>
    public const int LostRadioFieldNumber = 7;
    private int lostRadio_;
    /// <summary>
    /// 损失比例
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LostRadio {
      get { return lostRadio_; }
      set {
        lostRadio_ = value;
      }
    }

    /// <summary>Field number for the "atktype" field.</summary>
    public const int AtktypeFieldNumber = 8;
    private int atktype_;
    /// <summary>
    /// 1.主城 2.部队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Atktype {
      get { return atktype_; }
      set {
        atktype_ = value;
      }
    }

    /// <summary>Field number for the "roletype" field.</summary>
    public const int RoletypeFieldNumber = 9;
    private int roletype_;
    /// <summary>
    /// 1.玩家 2.野怪
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roletype {
      get { return roletype_; }
      set {
        roletype_ = value;
      }
    }

    /// <summary>Field number for the "mainGunSkillTimes" field.</summary>
    public const int MainGunSkillTimesFieldNumber = 10;
    private int mainGunSkillTimes_;
    /// <summary>
    ///使用主炮技能次数（[skillId,useNum,...]）(废弃)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainGunSkillTimes {
      get { return mainGunSkillTimes_; }
      set {
        mainGunSkillTimes_ = value;
      }
    }

    /// <summary>Field number for the "destroyBuildNum" field.</summary>
    public const int DestroyBuildNumFieldNumber = 11;
    private int destroyBuildNum_;
    /// <summary>
    ///摧毁建筑数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestroyBuildNum {
      get { return destroyBuildNum_; }
      set {
        destroyBuildNum_ = value;
      }
    }

    /// <summary>Field number for the "useSkillTimes" field.</summary>
    public const int UseSkillTimesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::SLG.KeyValuePair> _repeated_useSkillTimes_codec
        = pb::FieldCodec.ForMessage(98, global::SLG.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::SLG.KeyValuePair> useSkillTimes_ = new pbc::RepeatedField<global::SLG.KeyValuePair>();
    /// <summary>
    ///技能次数（[&lt;skillId, useTimes>]）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.KeyValuePair> UseSkillTimes {
      get { return useSkillTimes_; }
    }

    /// <summary>Field number for the "builds" field.</summary>
    public const int BuildsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SLG.BattleExitBuild> _repeated_builds_codec
        = pb::FieldCodec.ForMessage(106, global::SLG.BattleExitBuild.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitBuild> builds_ = new pbc::RepeatedField<global::SLG.BattleExitBuild>();
    /// <summary>
    /// 建筑状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitBuild> Builds {
      get { return builds_; }
    }

    /// <summary>Field number for the "heros" field.</summary>
    public const int HerosFieldNumber = 14;
    private static readonly pb::FieldCodec<global::SLG.BattleExitHero> _repeated_heros_codec
        = pb::FieldCodec.ForMessage(114, global::SLG.BattleExitHero.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitHero> heros_ = new pbc::RepeatedField<global::SLG.BattleExitHero>();
    /// <summary>
    /// 英雄状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitHero> Heros {
      get { return heros_; }
    }

    /// <summary>Field number for the "mainskills" field.</summary>
    public const int MainskillsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::SLG.BattleExitSkill> _repeated_mainskills_codec
        = pb::FieldCodec.ForMessage(122, global::SLG.BattleExitSkill.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitSkill> mainskills_ = new pbc::RepeatedField<global::SLG.BattleExitSkill>();
    /// <summary>
    /// 主炮技能状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitSkill> Mainskills {
      get { return mainskills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleExitRoleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleExitRoleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (Group != other.Group) return false;
      if(!leftex_.Equals(other.leftex_)) return false;
      if(!hurtedex_.Equals(other.hurtedex_)) return false;
      if(!heavyex_.Equals(other.heavyex_)) return false;
      if(!deadex_.Equals(other.deadex_)) return false;
      if (LostRadio != other.LostRadio) return false;
      if (Atktype != other.Atktype) return false;
      if (Roletype != other.Roletype) return false;
      if (MainGunSkillTimes != other.MainGunSkillTimes) return false;
      if (DestroyBuildNum != other.DestroyBuildNum) return false;
      if(!useSkillTimes_.Equals(other.useSkillTimes_)) return false;
      if(!builds_.Equals(other.builds_)) return false;
      if(!heros_.Equals(other.heros_)) return false;
      if(!mainskills_.Equals(other.mainskills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (Group != global::SLG.EBatGroup.BatGroupNull) hash ^= Group.GetHashCode();
      hash ^= leftex_.GetHashCode();
      hash ^= hurtedex_.GetHashCode();
      hash ^= heavyex_.GetHashCode();
      hash ^= deadex_.GetHashCode();
      if (LostRadio != 0) hash ^= LostRadio.GetHashCode();
      if (Atktype != 0) hash ^= Atktype.GetHashCode();
      if (Roletype != 0) hash ^= Roletype.GetHashCode();
      if (MainGunSkillTimes != 0) hash ^= MainGunSkillTimes.GetHashCode();
      if (DestroyBuildNum != 0) hash ^= DestroyBuildNum.GetHashCode();
      hash ^= useSkillTimes_.GetHashCode();
      hash ^= builds_.GetHashCode();
      hash ^= heros_.GetHashCode();
      hash ^= mainskills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (Group != global::SLG.EBatGroup.BatGroupNull) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Group);
      }
      leftex_.WriteTo(output, _repeated_leftex_codec);
      hurtedex_.WriteTo(output, _repeated_hurtedex_codec);
      heavyex_.WriteTo(output, _repeated_heavyex_codec);
      deadex_.WriteTo(output, _repeated_deadex_codec);
      if (LostRadio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LostRadio);
      }
      if (Atktype != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Atktype);
      }
      if (Roletype != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Roletype);
      }
      if (MainGunSkillTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MainGunSkillTimes);
      }
      if (DestroyBuildNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(DestroyBuildNum);
      }
      useSkillTimes_.WriteTo(output, _repeated_useSkillTimes_codec);
      builds_.WriteTo(output, _repeated_builds_codec);
      heros_.WriteTo(output, _repeated_heros_codec);
      mainskills_.WriteTo(output, _repeated_mainskills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (Group != global::SLG.EBatGroup.BatGroupNull) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
      }
      size += leftex_.CalculateSize(_repeated_leftex_codec);
      size += hurtedex_.CalculateSize(_repeated_hurtedex_codec);
      size += heavyex_.CalculateSize(_repeated_heavyex_codec);
      size += deadex_.CalculateSize(_repeated_deadex_codec);
      if (LostRadio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LostRadio);
      }
      if (Atktype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Atktype);
      }
      if (Roletype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roletype);
      }
      if (MainGunSkillTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainGunSkillTimes);
      }
      if (DestroyBuildNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestroyBuildNum);
      }
      size += useSkillTimes_.CalculateSize(_repeated_useSkillTimes_codec);
      size += builds_.CalculateSize(_repeated_builds_codec);
      size += heros_.CalculateSize(_repeated_heros_codec);
      size += mainskills_.CalculateSize(_repeated_mainskills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleExitRoleData other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.Group != global::SLG.EBatGroup.BatGroupNull) {
        Group = other.Group;
      }
      leftex_.Add(other.leftex_);
      hurtedex_.Add(other.hurtedex_);
      heavyex_.Add(other.heavyex_);
      deadex_.Add(other.deadex_);
      if (other.LostRadio != 0) {
        LostRadio = other.LostRadio;
      }
      if (other.Atktype != 0) {
        Atktype = other.Atktype;
      }
      if (other.Roletype != 0) {
        Roletype = other.Roletype;
      }
      if (other.MainGunSkillTimes != 0) {
        MainGunSkillTimes = other.MainGunSkillTimes;
      }
      if (other.DestroyBuildNum != 0) {
        DestroyBuildNum = other.DestroyBuildNum;
      }
      useSkillTimes_.Add(other.useSkillTimes_);
      builds_.Add(other.builds_);
      heros_.Add(other.heros_);
      mainskills_.Add(other.mainskills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            Group = (global::SLG.EBatGroup) input.ReadEnum();
            break;
          }
          case 26: {
            leftex_.AddEntriesFrom(input, _repeated_leftex_codec);
            break;
          }
          case 34: {
            hurtedex_.AddEntriesFrom(input, _repeated_hurtedex_codec);
            break;
          }
          case 42: {
            heavyex_.AddEntriesFrom(input, _repeated_heavyex_codec);
            break;
          }
          case 50: {
            deadex_.AddEntriesFrom(input, _repeated_deadex_codec);
            break;
          }
          case 56: {
            LostRadio = input.ReadInt32();
            break;
          }
          case 64: {
            Atktype = input.ReadInt32();
            break;
          }
          case 72: {
            Roletype = input.ReadInt32();
            break;
          }
          case 80: {
            MainGunSkillTimes = input.ReadInt32();
            break;
          }
          case 88: {
            DestroyBuildNum = input.ReadInt32();
            break;
          }
          case 98: {
            useSkillTimes_.AddEntriesFrom(input, _repeated_useSkillTimes_codec);
            break;
          }
          case 106: {
            builds_.AddEntriesFrom(input, _repeated_builds_codec);
            break;
          }
          case 114: {
            heros_.AddEntriesFrom(input, _repeated_heros_codec);
            break;
          }
          case 122: {
            mainskills_.AddEntriesFrom(input, _repeated_mainskills_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhaseBattleResult : pb::IMessage<PhaseBattleResult> {
    private static readonly pb::MessageParser<PhaseBattleResult> _parser = new pb::MessageParser<PhaseBattleResult>(() => new PhaseBattleResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhaseBattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseBattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseBattleResult(PhaseBattleResult other) : this() {
      battleId_ = other.battleId_;
      phase_ = other.phase_;
      element_ = other.element_.Clone();
      army_ = other.army_.Clone();
      assist_ = other.assist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhaseBattleResult Clone() {
      return new PhaseBattleResult(this);
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private int battleId_;
    /// <summary>
    ///战斗ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 2;
    private int phase_;
    /// <summary>
    ///战斗的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.MapElement> _repeated_element_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.MapElement.Parser);
    private readonly pbc::RepeatedField<global::SLG.MapElement> element_ = new pbc::RepeatedField<global::SLG.MapElement>();
    /// <summary>
    /// 地块信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.MapElement> Element {
      get { return element_; }
    }

    /// <summary>Field number for the "army" field.</summary>
    public const int ArmyFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SLG.TroopUnit> _repeated_army_codec
        = pb::FieldCodec.ForMessage(34, global::SLG.TroopUnit.Parser);
    private readonly pbc::RepeatedField<global::SLG.TroopUnit> army_ = new pbc::RepeatedField<global::SLG.TroopUnit>();
    /// <summary>
    /// 出兵信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.TroopUnit> Army {
      get { return army_; }
    }

    /// <summary>Field number for the "assist" field.</summary>
    public const int AssistFieldNumber = 5;
    private int assist_;
    /// <summary>
    ///协助进入战斗
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Assist {
      get { return assist_; }
      set {
        assist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhaseBattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhaseBattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (Phase != other.Phase) return false;
      if(!element_.Equals(other.element_)) return false;
      if(!army_.Equals(other.army_)) return false;
      if (Assist != other.Assist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      hash ^= element_.GetHashCode();
      hash ^= army_.GetHashCode();
      if (Assist != 0) hash ^= Assist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleId);
      }
      if (Phase != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Phase);
      }
      element_.WriteTo(output, _repeated_element_codec);
      army_.WriteTo(output, _repeated_army_codec);
      if (Assist != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Assist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
      }
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      size += element_.CalculateSize(_repeated_element_codec);
      size += army_.CalculateSize(_repeated_army_codec);
      if (Assist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhaseBattleResult other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      element_.Add(other.element_);
      army_.Add(other.army_);
      if (other.Assist != 0) {
        Assist = other.Assist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadInt32();
            break;
          }
          case 16: {
            Phase = input.ReadInt32();
            break;
          }
          case 26: {
            element_.AddEntriesFrom(input, _repeated_element_codec);
            break;
          }
          case 34: {
            army_.AddEntriesFrom(input, _repeated_army_codec);
            break;
          }
          case 40: {
            Assist = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NextPhaseBattle : pb::IMessage<NextPhaseBattle> {
    private static readonly pb::MessageParser<NextPhaseBattle> _parser = new pb::MessageParser<NextPhaseBattle>(() => new NextPhaseBattle());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextPhaseBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextPhaseBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextPhaseBattle(NextPhaseBattle other) : this() {
      battleId_ = other.battleId_;
      phase_ = other.phase_;
      battlePara_ = other.battlePara_ != null ? other.battlePara_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextPhaseBattle Clone() {
      return new NextPhaseBattle(this);
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private int battleId_;
    /// <summary>
    ///战斗ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 2;
    private int phase_;
    /// <summary>
    ///战斗的阶段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "battlePara" field.</summary>
    public const int BattleParaFieldNumber = 3;
    private global::SLG.WsBattlePara battlePara_;
    /// <summary>
    ///拼接信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsBattlePara BattlePara {
      get { return battlePara_; }
      set {
        battlePara_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextPhaseBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextPhaseBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (Phase != other.Phase) return false;
      if (!object.Equals(BattlePara, other.BattlePara)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (battlePara_ != null) hash ^= BattlePara.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleId);
      }
      if (Phase != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Phase);
      }
      if (battlePara_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BattlePara);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
      }
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Phase);
      }
      if (battlePara_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattlePara);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextPhaseBattle other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.battlePara_ != null) {
        if (battlePara_ == null) {
          BattlePara = new global::SLG.WsBattlePara();
        }
        BattlePara.MergeFrom(other.BattlePara);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadInt32();
            break;
          }
          case 16: {
            Phase = input.ReadInt32();
            break;
          }
          case 26: {
            if (battlePara_ == null) {
              BattlePara = new global::SLG.WsBattlePara();
            }
            input.ReadMessage(BattlePara);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗结果
  /// </summary>
  public sealed partial class BattleResult : pb::IMessage<BattleResult> {
    private static readonly pb::MessageParser<BattleResult> _parser = new pb::MessageParser<BattleResult>(() => new BattleResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult(BattleResult other) : this() {
      battleId_ = other.battleId_;
      result_ = other.result_;
      exitRoles_ = other.exitRoles_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleResult Clone() {
      return new BattleResult(this);
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private uint result_;
    /// <summary>
    /// 胜利方阵营：0无结果 1攻击方胜 2防守方胜
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "exit_roles" field.</summary>
    public const int ExitRolesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.BattleExitRoleData> _repeated_exitRoles_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.BattleExitRoleData.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleExitRoleData> exitRoles_ = new pbc::RepeatedField<global::SLG.BattleExitRoleData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleExitRoleData> ExitRoles {
      get { return exitRoles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (Result != other.Result) return false;
      if(!exitRoles_.Equals(other.exitRoles_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= exitRoles_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Result);
      }
      exitRoles_.WriteTo(output, _repeated_exitRoles_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      size += exitRoles_.CalculateSize(_repeated_exitRoles_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleResult other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      exitRoles_.Add(other.exitRoles_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            Result = input.ReadUInt32();
            break;
          }
          case 26: {
            exitRoles_.AddEntriesFrom(input, _repeated_exitRoles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleBlockInfo : pb::IMessage<BattleBlockInfo> {
    private static readonly pb::MessageParser<BattleBlockInfo> _parser = new pb::MessageParser<BattleBlockInfo>(() => new BattleBlockInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleBlockInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBlockInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBlockInfo(BattleBlockInfo other) : this() {
      element_ = other.element_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleBlockInfo Clone() {
      return new BattleBlockInfo(this);
    }

    /// <summary>Field number for the "element" field.</summary>
    public const int ElementFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.MapElement> _repeated_element_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.MapElement.Parser);
    private readonly pbc::RepeatedField<global::SLG.MapElement> element_ = new pbc::RepeatedField<global::SLG.MapElement>();
    /// <summary>
    /// 地块信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.MapElement> Element {
      get { return element_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleBlockInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleBlockInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!element_.Equals(other.element_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= element_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      element_.WriteTo(output, _repeated_element_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += element_.CalculateSize(_repeated_element_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleBlockInfo other) {
      if (other == null) {
        return;
      }
      element_.Add(other.element_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            element_.AddEntriesFrom(input, _repeated_element_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuickShot : pb::IMessage<QuickShot> {
    private static readonly pb::MessageParser<QuickShot> _parser = new pb::MessageParser<QuickShot>(() => new QuickShot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuickShot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickShot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickShot(QuickShot other) : this() {
      battleId_ = other.battleId_;
      srcLen_ = other.srcLen_;
      frameData_ = other.frameData_;
      syncRids_ = other.syncRids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickShot Clone() {
      return new QuickShot(this);
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "src_len" field.</summary>
    public const int SrcLenFieldNumber = 2;
    private uint srcLen_;
    /// <summary>
    /// 压缩前数据长度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SrcLen {
      get { return srcLen_; }
      set {
        srcLen_ = value;
      }
    }

    /// <summary>Field number for the "frame_data" field.</summary>
    public const int FrameDataFieldNumber = 3;
    private pb::ByteString frameData_ = pb::ByteString.Empty;
    /// <summary>
    /// 压缩后一帧数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FrameData {
      get { return frameData_; }
      set {
        frameData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sync_rids" field.</summary>
    public const int SyncRidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_syncRids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> syncRids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 需要同步的玩家rids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SyncRids {
      get { return syncRids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuickShot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuickShot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (SrcLen != other.SrcLen) return false;
      if (FrameData != other.FrameData) return false;
      if(!syncRids_.Equals(other.syncRids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (SrcLen != 0) hash ^= SrcLen.GetHashCode();
      if (FrameData.Length != 0) hash ^= FrameData.GetHashCode();
      hash ^= syncRids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (SrcLen != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SrcLen);
      }
      if (FrameData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(FrameData);
      }
      syncRids_.WriteTo(output, _repeated_syncRids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (SrcLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SrcLen);
      }
      if (FrameData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FrameData);
      }
      size += syncRids_.CalculateSize(_repeated_syncRids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuickShot other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.SrcLen != 0) {
        SrcLen = other.SrcLen;
      }
      if (other.FrameData.Length != 0) {
        FrameData = other.FrameData;
      }
      syncRids_.Add(other.syncRids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            SrcLen = input.ReadUInt32();
            break;
          }
          case 26: {
            FrameData = input.ReadBytes();
            break;
          }
          case 34:
          case 32: {
            syncRids_.AddEntriesFrom(input, _repeated_syncRids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗帧同步
  /// </summary>
  public sealed partial class BattleSyncFrameOps : pb::IMessage<BattleSyncFrameOps> {
    private static readonly pb::MessageParser<BattleSyncFrameOps> _parser = new pb::MessageParser<BattleSyncFrameOps>(() => new BattleSyncFrameOps());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleSyncFrameOps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSyncFrameOps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSyncFrameOps(BattleSyncFrameOps other) : this() {
      battleId_ = other.battleId_;
      frameId_ = other.frameId_;
      roleId_ = other.roleId_;
      opType_ = other.opType_;
      opParams_ = other.opParams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleSyncFrameOps Clone() {
      return new BattleSyncFrameOps(this);
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private uint frameId_;
    /// <summary>
    /// 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    /// <summary>
    /// 玩家唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 4;
    private uint opType_;
    /// <summary>
    /// 操作类型(EBatFrameOpT)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "op_params" field.</summary>
    public const int OpParamsFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_opParams_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> opParams_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 操作参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OpParams {
      get { return opParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleSyncFrameOps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleSyncFrameOps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (FrameId != other.FrameId) return false;
      if (RoleId != other.RoleId) return false;
      if (OpType != other.OpType) return false;
      if(!opParams_.Equals(other.opParams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (FrameId != 0) hash ^= FrameId.GetHashCode();
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      hash ^= opParams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (FrameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      if (OpType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OpType);
      }
      opParams_.WriteTo(output, _repeated_opParams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      size += opParams_.CalculateSize(_repeated_opParams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleSyncFrameOps other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.FrameId != 0) {
        FrameId = other.FrameId;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      opParams_.Add(other.opParams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameId = input.ReadUInt32();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 32: {
            OpType = input.ReadUInt32();
            break;
          }
          case 42:
          case 40: {
            opParams_.AddEntriesFrom(input, _repeated_opParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求帧数据
  /// </summary>
  public sealed partial class ReqBattleFrameData : pb::IMessage<ReqBattleFrameData> {
    private static readonly pb::MessageParser<ReqBattleFrameData> _parser = new pb::MessageParser<ReqBattleFrameData>(() => new ReqBattleFrameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReqBattleFrameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBattleFrameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBattleFrameData(ReqBattleFrameData other) : this() {
      battleId_ = other.battleId_;
      frameId_ = other.frameId_;
      roleId_ = other.roleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReqBattleFrameData Clone() {
      return new ReqBattleFrameData(this);
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private uint frameId_;
    /// <summary>
    /// 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    /// <summary>
    /// 玩家唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReqBattleFrameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReqBattleFrameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (FrameId != other.FrameId) return false;
      if (RoleId != other.RoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (FrameId != 0) hash ^= FrameId.GetHashCode();
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (FrameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReqBattleFrameData other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.FrameId != 0) {
        FrameId = other.FrameId;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameId = input.ReadUInt32();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 战斗帧操作
  /// </summary>
  public sealed partial class BattleFrameOp : pb::IMessage<BattleFrameOp> {
    private static readonly pb::MessageParser<BattleFrameOp> _parser = new pb::MessageParser<BattleFrameOp>(() => new BattleFrameOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleFrameOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleFrameOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleFrameOp(BattleFrameOp other) : this() {
      frameId_ = other.frameId_;
      roleId_ = other.roleId_;
      opType_ = other.opType_;
      opParams_ = other.opParams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleFrameOp Clone() {
      return new BattleFrameOp(this);
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private uint frameId_;
    /// <summary>
    /// 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    /// <summary>
    /// 玩家唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 3;
    private uint opType_;
    /// <summary>
    /// 操作类型(EBatFrameOpT)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "op_params" field.</summary>
    public const int OpParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_opParams_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> opParams_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 操作参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> OpParams {
      get { return opParams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleFrameOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleFrameOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameId != other.FrameId) return false;
      if (RoleId != other.RoleId) return false;
      if (OpType != other.OpType) return false;
      if(!opParams_.Equals(other.opParams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameId != 0) hash ^= FrameId.GetHashCode();
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      hash ^= opParams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameId);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (OpType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OpType);
      }
      opParams_.WriteTo(output, _repeated_opParams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      size += opParams_.CalculateSize(_repeated_opParams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleFrameOp other) {
      if (other == null) {
        return;
      }
      if (other.FrameId != 0) {
        FrameId = other.FrameId;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      opParams_.Add(other.opParams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameId = input.ReadUInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 24: {
            OpType = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            opParams_.AddEntriesFrom(input, _repeated_opParams_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 响应帧数据
  /// </summary>
  public sealed partial class ResponseBattleFrameData : pb::IMessage<ResponseBattleFrameData> {
    private static readonly pb::MessageParser<ResponseBattleFrameData> _parser = new pb::MessageParser<ResponseBattleFrameData>(() => new ResponseBattleFrameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseBattleFrameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseBattleFrameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseBattleFrameData(ResponseBattleFrameData other) : this() {
      battleId_ = other.battleId_;
      frameId_ = other.frameId_;
      ops_ = other.ops_.Clone();
      opcode_ = other.opcode_;
      deltaNum_ = other.deltaNum_;
      syncRids_ = other.syncRids_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseBattleFrameData Clone() {
      return new ResponseBattleFrameData(this);
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private uint frameId_;
    /// <summary>
    /// 帧号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.BattleFrameOp> _repeated_ops_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.BattleFrameOp.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleFrameOp> ops_ = new pbc::RepeatedField<global::SLG.BattleFrameOp>();
    /// <summary>
    /// 请求帧和返回帧之间的关键帧操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleFrameOp> Ops {
      get { return ops_; }
    }

    /// <summary>Field number for the "opcode" field.</summary>
    public const int OpcodeFieldNumber = 4;
    private uint opcode_;
    /// <summary>
    /// 返回操作码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Opcode {
      get { return opcode_; }
      set {
        opcode_ = value;
      }
    }

    /// <summary>Field number for the "delta_num" field.</summary>
    public const int DeltaNumFieldNumber = 5;
    private uint deltaNum_;
    /// <summary>
    /// 相差的帧数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeltaNum {
      get { return deltaNum_; }
      set {
        deltaNum_ = value;
      }
    }

    /// <summary>Field number for the "sync_rids" field.</summary>
    public const int SyncRidsFieldNumber = 6;
    private static readonly pb::FieldCodec<ulong> _repeated_syncRids_codec
        = pb::FieldCodec.ForUInt64(50);
    private readonly pbc::RepeatedField<ulong> syncRids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 需要同步的玩家rids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SyncRids {
      get { return syncRids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseBattleFrameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseBattleFrameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if (FrameId != other.FrameId) return false;
      if(!ops_.Equals(other.ops_)) return false;
      if (Opcode != other.Opcode) return false;
      if (DeltaNum != other.DeltaNum) return false;
      if(!syncRids_.Equals(other.syncRids_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (FrameId != 0) hash ^= FrameId.GetHashCode();
      hash ^= ops_.GetHashCode();
      if (Opcode != 0) hash ^= Opcode.GetHashCode();
      if (DeltaNum != 0) hash ^= DeltaNum.GetHashCode();
      hash ^= syncRids_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      if (FrameId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FrameId);
      }
      ops_.WriteTo(output, _repeated_ops_codec);
      if (Opcode != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Opcode);
      }
      if (DeltaNum != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DeltaNum);
      }
      syncRids_.WriteTo(output, _repeated_syncRids_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameId);
      }
      size += ops_.CalculateSize(_repeated_ops_codec);
      if (Opcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Opcode);
      }
      if (DeltaNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeltaNum);
      }
      size += syncRids_.CalculateSize(_repeated_syncRids_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseBattleFrameData other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.FrameId != 0) {
        FrameId = other.FrameId;
      }
      ops_.Add(other.ops_);
      if (other.Opcode != 0) {
        Opcode = other.Opcode;
      }
      if (other.DeltaNum != 0) {
        DeltaNum = other.DeltaNum;
      }
      syncRids_.Add(other.syncRids_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 16: {
            FrameId = input.ReadUInt32();
            break;
          }
          case 26: {
            ops_.AddEntriesFrom(input, _repeated_ops_codec);
            break;
          }
          case 32: {
            Opcode = input.ReadUInt32();
            break;
          }
          case 40: {
            DeltaNum = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            syncRids_.AddEntriesFrom(input, _repeated_syncRids_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器广播帧数据包
  /// </summary>
  public sealed partial class BroadcastFrames : pb::IMessage<BroadcastFrames> {
    private static readonly pb::MessageParser<BroadcastFrames> _parser = new pb::MessageParser<BroadcastFrames>(() => new BroadcastFrames());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastFrames> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBattleReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastFrames() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastFrames(BroadcastFrames other) : this() {
      battleId_ = other.battleId_;
      ops_ = other.ops_.Clone();
      frameBound_ = other.frameBound_;
      syncRids_ = other.syncRids_.Clone();
      winGroup_ = other.winGroup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastFrames Clone() {
      return new BroadcastFrames(this);
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private uint battleId_;
    /// <summary>
    /// 战斗实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.BattleFrameOp> _repeated_ops_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.BattleFrameOp.Parser);
    private readonly pbc::RepeatedField<global::SLG.BattleFrameOp> ops_ = new pbc::RepeatedField<global::SLG.BattleFrameOp>();
    /// <summary>
    /// 帧数据打包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BattleFrameOp> Ops {
      get { return ops_; }
    }

    /// <summary>Field number for the "frame_bound" field.</summary>
    public const int FrameBoundFieldNumber = 3;
    private uint frameBound_;
    /// <summary>
    /// 帧数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameBound {
      get { return frameBound_; }
      set {
        frameBound_ = value;
      }
    }

    /// <summary>Field number for the "sync_rids" field.</summary>
    public const int SyncRidsFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong> _repeated_syncRids_codec
        = pb::FieldCodec.ForUInt64(34);
    private readonly pbc::RepeatedField<ulong> syncRids_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 需要同步的玩家rids
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> SyncRids {
      get { return syncRids_; }
    }

    /// <summary>Field number for the "win_group" field.</summary>
    public const int WinGroupFieldNumber = 5;
    private uint winGroup_;
    /// <summary>
    /// 胜利方(容错用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinGroup {
      get { return winGroup_; }
      set {
        winGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastFrames);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastFrames other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattleId != other.BattleId) return false;
      if(!ops_.Equals(other.ops_)) return false;
      if (FrameBound != other.FrameBound) return false;
      if(!syncRids_.Equals(other.syncRids_)) return false;
      if (WinGroup != other.WinGroup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      hash ^= ops_.GetHashCode();
      if (FrameBound != 0) hash ^= FrameBound.GetHashCode();
      hash ^= syncRids_.GetHashCode();
      if (WinGroup != 0) hash ^= WinGroup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattleId);
      }
      ops_.WriteTo(output, _repeated_ops_codec);
      if (FrameBound != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FrameBound);
      }
      syncRids_.WriteTo(output, _repeated_syncRids_codec);
      if (WinGroup != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(WinGroup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattleId);
      }
      size += ops_.CalculateSize(_repeated_ops_codec);
      if (FrameBound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameBound);
      }
      size += syncRids_.CalculateSize(_repeated_syncRids_codec);
      if (WinGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinGroup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastFrames other) {
      if (other == null) {
        return;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      ops_.Add(other.ops_);
      if (other.FrameBound != 0) {
        FrameBound = other.FrameBound;
      }
      syncRids_.Add(other.syncRids_);
      if (other.WinGroup != 0) {
        WinGroup = other.WinGroup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattleId = input.ReadUInt32();
            break;
          }
          case 18: {
            ops_.AddEntriesFrom(input, _repeated_ops_codec);
            break;
          }
          case 24: {
            FrameBound = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            syncRids_.AddEntriesFrom(input, _repeated_syncRids_codec);
            break;
          }
          case 40: {
            WinGroup = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
