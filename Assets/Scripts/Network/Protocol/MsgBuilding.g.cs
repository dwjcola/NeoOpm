// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_building.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_building.proto</summary>
  public static partial class MsgBuildingReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_building.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgBuildingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJtc2dfYnVpbGRpbmcucHJvdG8SA1NMRxoJbXNnLnByb3RvIkUKDUJ1aWxk",
            "QXR0ckluZm8SEgoKYnVpbGRpbmdJZBgBIAEoBRIQCghhdHRyVHlwZRgCIAEo",
            "BRIOCgZpbnRWYWwYAyADKAUizAEKDEJ1aWxkaW5nSW5mbxISCgpidWlsZGlu",
            "Z0lkGAEgASgFEhUKDWJ1aWxkaW5nVGJsSWQYAiABKAUSDQoFbGV2ZWwYAyAB",
            "KAUSEQoJcXVldWVUeXBlGAQgASgFEhIKCmZpbmlzaFRpbWUYBSABKAMSDgoG",
            "YWN0aXZlGAYgASgFEhIKCnByb2R1Y3RBcmcYByADKAQSIQoFYXR0cnMYCCAD",
            "KAsyEi5TTEcuQnVpbGRBdHRySW5mbxIUCgxxdWV1ZVRpbWVMZW4YCSABKAUi",
            "SQoJQmxvY2tJbmZvEgoKAmlkGAEgASgFEgsKA3RpZBgCIAEoBRIJCgF4GAMg",
            "ASgFEgkKAXkYBCABKAUSDQoFbGV2ZWwYBSABKAUi8gIKDUJ1aWxkaW5nc0lu",
            "Zm8SJAoJYnVpbGRpbmdzGAEgAygLMhEuU0xHLkJ1aWxkaW5nSW5mbxIeCgZi",
            "bG9ja3MYAiADKAsyDi5TTEcuQmxvY2tJbmZvEi0KEHRlY2hub2xvZ3lMZXZl",
            "bHMYAyABKAsyEy5TTEcuVGVjaG5vbG9neUluZm8SJQoLcmVjcnVpdEluZm8Y",
            "BCABKAsyEC5TTEcuUmVjcnVpdEluZm8SFAoMYmFnQmxvY2tzSWRzGAUgAygF",
            "EhQKDGJhZ0Jsb2NrTnVtcxgGIAMoBRITCgt3b3VuZGVkSW5mbxgHIAMoBRIp",
            "CgxhdHRyc0luY0luZm8YCCADKAsyEy5TTEcuUGxheWVyQXR0cnNJbmMSFQoN",
            "bWFpbkd1blNraWxscxgJIAMoBRIUCgxhY3RpdmVTa2lsbHMYCiADKAUSLAoN",
            "YmFnQmxvY2tJdGVtcxgLIAEoCzIVLlNMRy5iYWdCbG9ja0l0ZW1MaXN0IkMK",
            "EEJ1aWxkaW5nc0FsbFBsYW4SDQoFY3VySWQYASABKAUSIAoFcGxhbnMYAiAD",
            "KAsyES5TTEcuQnVpbGRpbmdQbGFuIkQKEEJ1aWxkaW5nUGxhbkl0ZW0SCwoD",
            "dGlkGAEgASgFEgkKAXgYAiABKAUSCQoBeRgDIAEoBRINCgVsZXZlbBgEIAEo",
            "BSI/CgxCdWlsZGluZ1BsYW4SCgoCaWQYASABKAUSIwoEcGxhbhgCIAMoCzIV",
            "LlNMRy5CdWlsZGluZ1BsYW5JdGVtInQKDkNoYW5nZVNjZW5lUmVzEhEKCWRl",
            "bElkTGlzdBgBIAMoBRIkCgxjaGFuZ2VCbG9ja3MYAiADKAsyDi5TTEcuQmxv",
            "Y2tJbmZvEikKDmNoYW5nZUJhZ0l0ZW1zGAMgAygLMhEuU0xHLmJhZ0Jsb2Nr",
            "SXRlbSIsChBMb2dpbkJ1aWxkaW5nUmVxEgsKA3VpZBgBIAEoAxILCgNzaWQY",
            "AiABKAkiNwoOVGVjaG5vbG9neUluZm8SJQoKdGVjaExldmVscxgBIAMoCzIR",
            "LlNMRy5LZXlWYWx1ZVBhaXIiQwoNUmVjcnVpdE9wdGlvbhITCgtyZWNydWl0",
            "VHlwZRgBIAEoBRINCgV0aW1lcxgCIAEoBRIOCgZpc0ZyZWUYAyABKAUiUgoO",
            "QWNjZWxlcmF0ZUluZm8SEgoKYnVpbGRpbmdJZBgBIAEoBRIOCgZpdGVtSWQY",
            "AiADKAUSDwoHaXRlbU51bRgDIAMoBRILCgNidXkYBCABKAUiQAoJUXVldWVJ",
            "bmZvEhIKCmJ1aWxkaW5nSWQYASABKAUSDQoFcVR5cGUYAiABKAUSEAoIcXVl",
            "dWVBcmcYAyADKAUilQEKC1JlY3J1aXRJbmZvEhcKD2NvbW1vbkZyZWVUaW1l",
            "cxgBIAEoBRITCgt1c2VGcmVlVGltZRgCIAEoAxITCgtoYXNIaWdoRnJlZRgD",
            "IAEoBRIXCg9nZXROZXh0SGlnaEZyZWUYBCABKAMSFQoNY29tbW9uTm90U2hv",
            "dxgFIAEoBRITCgtoaWdoTm90U2hvdxgGIAEoBSJaCgpSZWNydWl0UmVzEiMK",
            "CWdhaW5JdGVtcxgBIAMoCzIQLlNMRy5SZWNydWl0R2FpbhInCgtyZWNydWl0",
            "SW5mbxgCIAEoCzISLlNMRy5SZWNydWl0T3B0aW9uIj4KC1JlY3J1aXRHYWlu",
            "Eg8KB3RibFR5cGUYASABKAUSDQoFdGJsSWQYAiABKAUSDwoHZ2Fpbk51bRgD",
            "IAEoBSJECglUcmFpbkluZm8SEQoJc29sZGllcklkGAEgASgFEhAKCHRyYWlu",
            "TnVtGAIgASgFEhIKCmJ1aWxkaW5nSWQYAyABKAUiQQoMUmVzb3VyY2VJbmZv",
            "EhAKCHBsYXllcklkGAEgASgDEg8KB3Jlc1R5cGUYAiABKAUSDgoGYWRkVmFs",
            "GAMgASgFIm0KEENvbW1vbkNoYW5nZUluZm8SEAoIcGxheWVySWQYASABKAMS",
            "DQoFdGJsSWQYAiABKAUSDgoGYWRkVmFsGAMgASgFEhQKDGNoYW5nZVJlYXNv",
            "bhgEIAEoBRISCgpyZWFzb25QYXJtGAUgASgFIj0KE0dldFByb2R1Y3RSZXN1",
            "bHRBbGwSJgoHZ2V0SW5mbxgBIAMoCzIVLlNMRy5HZXRQcm9kdWN0UmVzdWx0",
            "IjsKEEdldFByb2R1Y3RSZXN1bHQSEgoKYnVpbGRpbmdJZBgBIAEoBRITCgtw",
            "cm9kdWN0SW5mbxgCIAMoBSIyCg1CdWlsZGluZ0F0dHJzEiEKBWF0dHJzGAEg",
            "AygLMhIuU0xHLkJ1aWxkQXR0ckluZm8iRQoMU29sZGllcnNJbmZvEhAKCHBs",
            "YXllcklkGAEgASgDEiMKCHNvbGRpZXJzGAIgAygLMhEuU0xHLktleVZhbHVl",
            "UGFpciIxCg1QbGF5ZXJSZXF1ZXN0EhAKCHBsYXllcklkGAEgASgDEg4KBnJl",
            "cUFyZxgCIAEoBSI4ChBiYWdCbG9ja0l0ZW1MaXN0EiQKCWJsb2NrSXRlbRgB",
            "IAMoCzIRLlNMRy5iYWdCbG9ja0l0ZW0iSQoMYmFnQmxvY2tJdGVtEhIKCmJs",
            "b2NrTGV2ZWwYASABKAUSEQoJYmxvY2tUeXBlGAIgASgFEhIKCmJsb2NrQ291",
            "bnQYAyABKAUiRQoPQ29tcG9zZUJhY2tMaXN0EiQKCWJsb2NrSXRlbRgBIAMo",
            "CzIRLlNMRy5iYWdCbG9ja0l0ZW0SDAoEY29kZRgCIAEoBSJMChFTZW5kVHVy",
            "cmV0UmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoAxIlCgp0dXJyZXRJdGVtGAIg",
            "ASgLMhEuU0xHLmJhZ0Jsb2NrSXRlbSJMCg5HbUdldE5ld1R1cnJldBIQCgh0",
            "dXJyZXRJZBgBIAEoBRITCgt0dXJyZXRMZXZlbBgCIAEoBRITCgt0dXJyZXRD",
            "b3VudBgDIAEoBSI4CgtDb21wb3NlSW5mbxISCgp0dXJyZXRUeXBlGAEgASgF",
            "EhUKDWNvbXBvc2VNYXhMdmwYAiABKAUiNwoRQ29tcG9zZVR1cnJldEluZm8S",
            "EAoIYmxvY2tJZDEYASABKAUSEAoIYmxvY2tJZDIYAiABKAUq0gIKEUJ1aWxk",
            "aW5nQXR0cmlidXRlEgkKBVN0YXJ0EAASDgoKRm9vZF9ZaWVsZBABEg4KCldv",
            "b2RfWWllbGQQAhIOCgpJcm9uX1lpZWxkEAMSEAoMU2lsdmVyX1lpZWxkEAQS",
            "DwoLRm9vZF9Wb2x1bWUQBRIPCgtXb29kX1ZvbHVtZRAGEg8KC0lyb25fVm9s",
            "dW1lEAcSEQoNU2lsdmVyX1ZvbHVtZRAIEhAKDEZvb2RfUHJvdGVjdBAJEhAK",
            "DFdvb2RfUHJvdGVjdBAKEhAKDElyb25fUHJvdGVjdBALEhIKDlNpbHZlcl9Q",
            "cm90ZWN0EAwSEwoPSG9zcGl0YWxfVm9sdW1lEA0SFQoRTGV2ZWxVcF9RdWV1",
            "ZVRpbWUQDhIbChdUcmFpbl9Tb2xkaWVyX1F1ZXVlVGltZRAPEhcKE1Jlc2Vh",
            "cmNoX1F1ZXVlX1RpbWUQECrMAQoTQnVpbGRpbmdBdHRySW5jVHlwZRIRCg1B",
            "dHRyX0luY19Ob25lEAASFAoPRm9vZF9ZaWVsZF9QZXJjEK4CEhQKD1dvb2Rf",
            "WWllbGRfUGVyYxCvAhIUCg9Jcm9uX1lpZWxkX1BlcmMQsAISFgoRU2lsdmVy",
            "X1lpZWxkX1BlcmMQsQISFQoQVHJhaW5fU3BlZWRfUGVyYxCtAhIYChNSZXNl",
            "YXJjaF9TcGVlZF9QZXJjELICEhcKEkxldmVsVXBfU3BlZWRfUGVyYxCzAipd",
            "ChZCdWlsZEF0dHJJbmNTb3VyY2VUeXBlEhMKD0luY19Tb3VyY2VfTm9uZRAA",
            "Eg4KClRlY2hub2xvZ3kQARIMCghVc2VfSXRlbRACEhAKDFNlbGZfTGV2ZWxV",
            "cBADKj0KFUJ1aWxkQXR0clVwZGF0ZVJlYXNvbhITCg9VcGRhdGVBdHRyX05v",
            "bmUQABIPCgtCdWlsZExldmVVcBABKk4KClF1ZXVlX1R5cGUSCAoETm9uZRAA",
            "EgkKBUJ1aWxkEAESDAoIUmVzZWFyY2gQAhIJCgVUcmFpbhADEgkKBVRyZWF0",
            "EAQSBwoDQWxsEAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SLG.MsgReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.BuildingAttribute), typeof(global::SLG.BuildingAttrIncType), typeof(global::SLG.BuildAttrIncSourceType), typeof(global::SLG.BuildAttrUpdateReason), typeof(global::SLG.Queue_Type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildAttrInfo), global::SLG.BuildAttrInfo.Parser, new[]{ "BuildingId", "AttrType", "IntVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildingInfo), global::SLG.BuildingInfo.Parser, new[]{ "BuildingId", "BuildingTblId", "Level", "QueueType", "FinishTime", "Active", "ProductArg", "Attrs", "QueueTimeLen" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BlockInfo), global::SLG.BlockInfo.Parser, new[]{ "Id", "Tid", "X", "Y", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildingsInfo), global::SLG.BuildingsInfo.Parser, new[]{ "Buildings", "Blocks", "TechnologyLevels", "RecruitInfo", "BagBlocksIds", "BagBlockNums", "WoundedInfo", "AttrsIncInfo", "MainGunSkills", "ActiveSkills", "BagBlockItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildingsAllPlan), global::SLG.BuildingsAllPlan.Parser, new[]{ "CurId", "Plans" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildingPlanItem), global::SLG.BuildingPlanItem.Parser, new[]{ "Tid", "X", "Y", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildingPlan), global::SLG.BuildingPlan.Parser, new[]{ "Id", "Plan" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ChangeSceneRes), global::SLG.ChangeSceneRes.Parser, new[]{ "DelIdList", "ChangeBlocks", "ChangeBagItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.LoginBuildingReq), global::SLG.LoginBuildingReq.Parser, new[]{ "Uid", "Sid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TechnologyInfo), global::SLG.TechnologyInfo.Parser, new[]{ "TechLevels" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.RecruitOption), global::SLG.RecruitOption.Parser, new[]{ "RecruitType", "Times", "IsFree" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.AccelerateInfo), global::SLG.AccelerateInfo.Parser, new[]{ "BuildingId", "ItemId", "ItemNum", "Buy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.QueueInfo), global::SLG.QueueInfo.Parser, new[]{ "BuildingId", "QType", "QueueArg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.RecruitInfo), global::SLG.RecruitInfo.Parser, new[]{ "CommonFreeTimes", "UseFreeTime", "HasHighFree", "GetNextHighFree", "CommonNotShow", "HighNotShow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.RecruitRes), global::SLG.RecruitRes.Parser, new[]{ "GainItems", "RecruitInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.RecruitGain), global::SLG.RecruitGain.Parser, new[]{ "TblType", "TblId", "GainNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TrainInfo), global::SLG.TrainInfo.Parser, new[]{ "SoldierId", "TrainNum", "BuildingId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ResourceInfo), global::SLG.ResourceInfo.Parser, new[]{ "PlayerId", "ResType", "AddVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CommonChangeInfo), global::SLG.CommonChangeInfo.Parser, new[]{ "PlayerId", "TblId", "AddVal", "ChangeReason", "ReasonParm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetProductResultAll), global::SLG.GetProductResultAll.Parser, new[]{ "GetInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetProductResult), global::SLG.GetProductResult.Parser, new[]{ "BuildingId", "ProductInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuildingAttrs), global::SLG.BuildingAttrs.Parser, new[]{ "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SoldiersInfo), global::SLG.SoldiersInfo.Parser, new[]{ "PlayerId", "Soldiers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerRequest), global::SLG.PlayerRequest.Parser, new[]{ "PlayerId", "ReqArg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.bagBlockItemList), global::SLG.bagBlockItemList.Parser, new[]{ "BlockItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.bagBlockItem), global::SLG.bagBlockItem.Parser, new[]{ "BlockLevel", "BlockType", "BlockCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ComposeBackList), global::SLG.ComposeBackList.Parser, new[]{ "BlockItem", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SendTurretRequest), global::SLG.SendTurretRequest.Parser, new[]{ "PlayerId", "TurretItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GmGetNewTurret), global::SLG.GmGetNewTurret.Parser, new[]{ "TurretId", "TurretLevel", "TurretCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ComposeInfo), global::SLG.ComposeInfo.Parser, new[]{ "TurretType", "ComposeMaxLvl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ComposeTurretInfo), global::SLG.ComposeTurretInfo.Parser, new[]{ "BlockId1", "BlockId2" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BuildingAttribute {
    [pbr::OriginalName("Start")] Start = 0,
    /// <summary>
    ///单位时间内资源产量
    /// </summary>
    [pbr::OriginalName("Food_Yield")] FoodYield = 1,
    /// <summary>
    ///木材
    /// </summary>
    [pbr::OriginalName("Wood_Yield")] WoodYield = 2,
    /// <summary>
    ///黑铁
    /// </summary>
    [pbr::OriginalName("Iron_Yield")] IronYield = 3,
    /// <summary>
    ///秘银
    /// </summary>
    [pbr::OriginalName("Silver_Yield")] SilverYield = 4,
    /// <summary>
    ///资源建筑最大容量
    /// </summary>
    [pbr::OriginalName("Food_Volume")] FoodVolume = 5,
    /// <summary>
    ///木材
    /// </summary>
    [pbr::OriginalName("Wood_Volume")] WoodVolume = 6,
    /// <summary>
    ///黑铁
    /// </summary>
    [pbr::OriginalName("Iron_Volume")] IronVolume = 7,
    /// <summary>
    ///秘银
    /// </summary>
    [pbr::OriginalName("Silver_Volume")] SilverVolume = 8,
    /// <summary>
    ///仓库资源保护量
    /// </summary>
    [pbr::OriginalName("Food_Protect")] FoodProtect = 9,
    /// <summary>
    ///木材
    /// </summary>
    [pbr::OriginalName("Wood_Protect")] WoodProtect = 10,
    /// <summary>
    ///黑铁
    /// </summary>
    [pbr::OriginalName("Iron_Protect")] IronProtect = 11,
    /// <summary>
    ///秘银
    /// </summary>
    [pbr::OriginalName("Silver_Protect")] SilverProtect = 12,
    /// <summary>
    ///医院容量
    /// </summary>
    [pbr::OriginalName("Hospital_Volume")] HospitalVolume = 13,
    /// <summary>
    ///队列相关建筑属性 - 队列时长
    /// </summary>
    [pbr::OriginalName("LevelUp_QueueTime")] LevelUpQueueTime = 14,
    /// <summary>
    ///练兵队列
    /// </summary>
    [pbr::OriginalName("Train_Soldier_QueueTime")] TrainSoldierQueueTime = 15,
    /// <summary>
    ///研究队列 
    /// </summary>
    [pbr::OriginalName("Research_Queue_Time")] ResearchQueueTime = 16,
  }

  /// <summary>
  ///建筑属性加成类型（对应属性表中ServerID列）
  /// </summary>
  public enum BuildingAttrIncType {
    [pbr::OriginalName("Attr_Inc_None")] AttrIncNone = 0,
    /// <summary>
    ///资源单位时间内产量百分比加成
    /// </summary>
    [pbr::OriginalName("Food_Yield_Perc")] FoodYieldPerc = 302,
    [pbr::OriginalName("Wood_Yield_Perc")] WoodYieldPerc = 303,
    [pbr::OriginalName("Iron_Yield_Perc")] IronYieldPerc = 304,
    [pbr::OriginalName("Silver_Yield_Perc")] SilverYieldPerc = 305,
    /// <summary>
    ///队列用时百分比减少
    /// </summary>
    [pbr::OriginalName("Train_Speed_Perc")] TrainSpeedPerc = 301,
    [pbr::OriginalName("Research_Speed_Perc")] ResearchSpeedPerc = 306,
    [pbr::OriginalName("LevelUp_Speed_Perc")] LevelUpSpeedPerc = 307,
  }

  /// <summary>
  ///建筑属性加成来源
  /// </summary>
  public enum BuildAttrIncSourceType {
    [pbr::OriginalName("Inc_Source_None")] IncSourceNone = 0,
    /// <summary>
    ///科技
    /// </summary>
    [pbr::OriginalName("Technology")] Technology = 1,
    /// <summary>
    ///使用道具
    /// </summary>
    [pbr::OriginalName("Use_Item")] UseItem = 2,
    /// <summary>
    ///建筑自身升级使基础值发生变化
    /// </summary>
    [pbr::OriginalName("Self_LevelUp")] SelfLevelUp = 3,
  }

  /// <summary>
  ///触发建筑属性更新的事件类型
  /// </summary>
  public enum BuildAttrUpdateReason {
    [pbr::OriginalName("UpdateAttr_None")] UpdateAttrNone = 0,
    [pbr::OriginalName("BuildLeveUp")] BuildLeveUp = 1,
  }

  public enum Queue_Type {
    /// <summary>
    ///不在队列中
    /// </summary>
    [pbr::OriginalName("None")] None = 0,
    /// <summary>
    ///建造队列（升级）
    /// </summary>
    [pbr::OriginalName("Build")] Build = 1,
    /// <summary>
    ///研究队列
    /// </summary>
    [pbr::OriginalName("Research")] Research = 2,
    /// <summary>
    ///训练队列
    /// </summary>
    [pbr::OriginalName("Train")] Train = 3,
    /// <summary>
    ///医疗队列
    /// </summary>
    [pbr::OriginalName("Treat")] Treat = 4,
    /// <summary>
    ///任意队列
    /// </summary>
    [pbr::OriginalName("All")] All = 9,
  }

  #endregion

  #region Messages
  public sealed partial class BuildAttrInfo : pb::IMessage<BuildAttrInfo> {
    private static readonly pb::MessageParser<BuildAttrInfo> _parser = new pb::MessageParser<BuildAttrInfo>(() => new BuildAttrInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildAttrInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildAttrInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildAttrInfo(BuildAttrInfo other) : this() {
      buildingId_ = other.buildingId_;
      attrType_ = other.attrType_;
      intVal_ = other.intVal_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildAttrInfo Clone() {
      return new BuildAttrInfo(this);
    }

    /// <summary>Field number for the "buildingId" field.</summary>
    public const int BuildingIdFieldNumber = 1;
    private int buildingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = value;
      }
    }

    /// <summary>Field number for the "attrType" field.</summary>
    public const int AttrTypeFieldNumber = 2;
    private int attrType_;
    /// <summary>
    ///对应BuildingAttribute中的值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrType {
      get { return attrType_; }
      set {
        attrType_ = value;
      }
    }

    /// <summary>Field number for the "intVal" field.</summary>
    public const int IntValFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_intVal_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> intVal_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///[finAttrVal] / [abs, percInc, percDec]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IntVal {
      get { return intVal_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildAttrInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildAttrInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingId != other.BuildingId) return false;
      if (AttrType != other.AttrType) return false;
      if(!intVal_.Equals(other.intVal_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingId != 0) hash ^= BuildingId.GetHashCode();
      if (AttrType != 0) hash ^= AttrType.GetHashCode();
      hash ^= intVal_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildingId);
      }
      if (AttrType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttrType);
      }
      intVal_.WriteTo(output, _repeated_intVal_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingId);
      }
      if (AttrType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrType);
      }
      size += intVal_.CalculateSize(_repeated_intVal_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildAttrInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuildingId != 0) {
        BuildingId = other.BuildingId;
      }
      if (other.AttrType != 0) {
        AttrType = other.AttrType;
      }
      intVal_.Add(other.intVal_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuildingId = input.ReadInt32();
            break;
          }
          case 16: {
            AttrType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            intVal_.AddEntriesFrom(input, _repeated_intVal_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingInfo : pb::IMessage<BuildingInfo> {
    private static readonly pb::MessageParser<BuildingInfo> _parser = new pb::MessageParser<BuildingInfo>(() => new BuildingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingInfo(BuildingInfo other) : this() {
      buildingId_ = other.buildingId_;
      buildingTblId_ = other.buildingTblId_;
      level_ = other.level_;
      queueType_ = other.queueType_;
      finishTime_ = other.finishTime_;
      active_ = other.active_;
      productArg_ = other.productArg_.Clone();
      attrs_ = other.attrs_.Clone();
      queueTimeLen_ = other.queueTimeLen_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingInfo Clone() {
      return new BuildingInfo(this);
    }

    /// <summary>Field number for the "buildingId" field.</summary>
    public const int BuildingIdFieldNumber = 1;
    private int buildingId_;
    /// <summary>
    ///buildingId = blockId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = value;
      }
    }

    /// <summary>Field number for the "buildingTblId" field.</summary>
    public const int BuildingTblIdFieldNumber = 2;
    private int buildingTblId_;
    /// <summary>
    ///Building表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingTblId {
      get { return buildingTblId_; }
      set {
        buildingTblId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///建筑等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "queueType" field.</summary>
    public const int QueueTypeFieldNumber = 4;
    private int queueType_;
    /// <summary>
    ///当前所处的队列类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueType {
      get { return queueType_; }
      set {
        queueType_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 5;
    private long finishTime_;
    /// <summary>
    ///队列倒计时结束时间戳(ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 6;
    private int active_;
    /// <summary>
    ///活跃标记（是否被摆放出来）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "productArg" field.</summary>
    public const int ProductArgFieldNumber = 7;
    private static readonly pb::FieldCodec<ulong> _repeated_productArg_codec
        = pb::FieldCodec.ForUInt64(58);
    private readonly pbc::RepeatedField<ulong> productArg_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///（倒计时中）队列/（结束）产出参数：研究 - techId, 练兵 - [soldierTblId,trainNum], 医院 - [soldierTblId,treatNum], 资源建筑 - [当前存量, 上次领取产出时间戳]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ProductArg {
      get { return productArg_; }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SLG.BuildAttrInfo> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(66, global::SLG.BuildAttrInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.BuildAttrInfo> attrs_ = new pbc::RepeatedField<global::SLG.BuildAttrInfo>();
    /// <summary>
    ///各类建筑属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BuildAttrInfo> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "queueTimeLen" field.</summary>
    public const int QueueTimeLenFieldNumber = 9;
    private int queueTimeLen_;
    /// <summary>
    ///队列总时长（秒）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QueueTimeLen {
      get { return queueTimeLen_; }
      set {
        queueTimeLen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingId != other.BuildingId) return false;
      if (BuildingTblId != other.BuildingTblId) return false;
      if (Level != other.Level) return false;
      if (QueueType != other.QueueType) return false;
      if (FinishTime != other.FinishTime) return false;
      if (Active != other.Active) return false;
      if(!productArg_.Equals(other.productArg_)) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if (QueueTimeLen != other.QueueTimeLen) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingId != 0) hash ^= BuildingId.GetHashCode();
      if (BuildingTblId != 0) hash ^= BuildingTblId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (QueueType != 0) hash ^= QueueType.GetHashCode();
      if (FinishTime != 0L) hash ^= FinishTime.GetHashCode();
      if (Active != 0) hash ^= Active.GetHashCode();
      hash ^= productArg_.GetHashCode();
      hash ^= attrs_.GetHashCode();
      if (QueueTimeLen != 0) hash ^= QueueTimeLen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildingId);
      }
      if (BuildingTblId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BuildingTblId);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (QueueType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(QueueType);
      }
      if (FinishTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FinishTime);
      }
      if (Active != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Active);
      }
      productArg_.WriteTo(output, _repeated_productArg_codec);
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (QueueTimeLen != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(QueueTimeLen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingId);
      }
      if (BuildingTblId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingTblId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (QueueType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueueType);
      }
      if (FinishTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime);
      }
      if (Active != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Active);
      }
      size += productArg_.CalculateSize(_repeated_productArg_codec);
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (QueueTimeLen != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QueueTimeLen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuildingId != 0) {
        BuildingId = other.BuildingId;
      }
      if (other.BuildingTblId != 0) {
        BuildingTblId = other.BuildingTblId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.QueueType != 0) {
        QueueType = other.QueueType;
      }
      if (other.FinishTime != 0L) {
        FinishTime = other.FinishTime;
      }
      if (other.Active != 0) {
        Active = other.Active;
      }
      productArg_.Add(other.productArg_);
      attrs_.Add(other.attrs_);
      if (other.QueueTimeLen != 0) {
        QueueTimeLen = other.QueueTimeLen;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuildingId = input.ReadInt32();
            break;
          }
          case 16: {
            BuildingTblId = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            QueueType = input.ReadInt32();
            break;
          }
          case 40: {
            FinishTime = input.ReadInt64();
            break;
          }
          case 48: {
            Active = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            productArg_.AddEntriesFrom(input, _repeated_productArg_codec);
            break;
          }
          case 66: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 72: {
            QueueTimeLen = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockInfo : pb::IMessage<BlockInfo> {
    private static readonly pb::MessageParser<BlockInfo> _parser = new pb::MessageParser<BlockInfo>(() => new BlockInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo(BlockInfo other) : this() {
      id_ = other.id_;
      tid_ = other.tid_;
      x_ = other.x_;
      y_ = other.y_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo Clone() {
      return new BlockInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private int tid_;
    /// <summary>
    ///table id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Tid != other.Tid) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tid);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tid = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingsInfo : pb::IMessage<BuildingsInfo> {
    private static readonly pb::MessageParser<BuildingsInfo> _parser = new pb::MessageParser<BuildingsInfo>(() => new BuildingsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingsInfo(BuildingsInfo other) : this() {
      buildings_ = other.buildings_.Clone();
      blocks_ = other.blocks_.Clone();
      technologyLevels_ = other.technologyLevels_ != null ? other.technologyLevels_.Clone() : null;
      recruitInfo_ = other.recruitInfo_ != null ? other.recruitInfo_.Clone() : null;
      bagBlocksIds_ = other.bagBlocksIds_.Clone();
      bagBlockNums_ = other.bagBlockNums_.Clone();
      woundedInfo_ = other.woundedInfo_.Clone();
      attrsIncInfo_ = other.attrsIncInfo_.Clone();
      mainGunSkills_ = other.mainGunSkills_.Clone();
      activeSkills_ = other.activeSkills_.Clone();
      bagBlockItems_ = other.bagBlockItems_ != null ? other.bagBlockItems_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingsInfo Clone() {
      return new BuildingsInfo(this);
    }

    /// <summary>Field number for the "buildings" field.</summary>
    public const int BuildingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.BuildingInfo> _repeated_buildings_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.BuildingInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.BuildingInfo> buildings_ = new pbc::RepeatedField<global::SLG.BuildingInfo>();
    /// <summary>
    ///建筑信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BuildingInfo> Buildings {
      get { return buildings_; }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.BlockInfo> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.BlockInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.BlockInfo> blocks_ = new pbc::RepeatedField<global::SLG.BlockInfo>();
    /// <summary>
    ///地块信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BlockInfo> Blocks {
      get { return blocks_; }
    }

    /// <summary>Field number for the "technologyLevels" field.</summary>
    public const int TechnologyLevelsFieldNumber = 3;
    private global::SLG.TechnologyInfo technologyLevels_;
    /// <summary>
    ///科研等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.TechnologyInfo TechnologyLevels {
      get { return technologyLevels_; }
      set {
        technologyLevels_ = value;
      }
    }

    /// <summary>Field number for the "recruitInfo" field.</summary>
    public const int RecruitInfoFieldNumber = 4;
    private global::SLG.RecruitInfo recruitInfo_;
    /// <summary>
    ///酒馆招募信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.RecruitInfo RecruitInfo {
      get { return recruitInfo_; }
      set {
        recruitInfo_ = value;
      }
    }

    /// <summary>Field number for the "bagBlocksIds" field.</summary>
    public const int BagBlocksIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_bagBlocksIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> bagBlocksIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///背包中地块tblId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BagBlocksIds {
      get { return bagBlocksIds_; }
    }

    /// <summary>Field number for the "bagBlockNums" field.</summary>
    public const int BagBlockNumsFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_bagBlockNums_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> bagBlockNums_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///背包中地块数目（顺序上下对应）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BagBlockNums {
      get { return bagBlockNums_; }
    }

    /// <summary>Field number for the "woundedInfo" field.</summary>
    public const int WoundedInfoFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_woundedInfo_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> woundedInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///医院伤员信息[soldierTblId,Num]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> WoundedInfo {
      get { return woundedInfo_; }
    }

    /// <summary>Field number for the "attrsIncInfo" field.</summary>
    public const int AttrsIncInfoFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SLG.PlayerAttrsInc> _repeated_attrsIncInfo_codec
        = pb::FieldCodec.ForMessage(66, global::SLG.PlayerAttrsInc.Parser);
    private readonly pbc::RepeatedField<global::SLG.PlayerAttrsInc> attrsIncInfo_ = new pbc::RepeatedField<global::SLG.PlayerAttrsInc>();
    /// <summary>
    ///建筑模块提供的各类型属性加成信息（下标标识属性大类型：index + 1 = type (Attribute_Type_Top) ）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PlayerAttrsInc> AttrsIncInfo {
      get { return attrsIncInfo_; }
    }

    /// <summary>Field number for the "mainGunSkills" field.</summary>
    public const int MainGunSkillsFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_mainGunSkills_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> mainGunSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已解锁的主炮技能（最高等级）表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MainGunSkills {
      get { return mainGunSkills_; }
    }

    /// <summary>Field number for the "activeSkills" field.</summary>
    public const int ActiveSkillsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_activeSkills_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> activeSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///上阵主炮技能，长度为4，下标标识位置，值为对应选择的技能id，为0表示未选择（手动移除过且未用新的替换会这样）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActiveSkills {
      get { return activeSkills_; }
    }

    /// <summary>Field number for the "bagBlockItems" field.</summary>
    public const int BagBlockItemsFieldNumber = 11;
    private global::SLG.bagBlockItemList bagBlockItems_;
    /// <summary>
    ///背包中地块的相关信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.bagBlockItemList BagBlockItems {
      get { return bagBlockItems_; }
      set {
        bagBlockItems_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!buildings_.Equals(other.buildings_)) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      if (!object.Equals(TechnologyLevels, other.TechnologyLevels)) return false;
      if (!object.Equals(RecruitInfo, other.RecruitInfo)) return false;
      if(!bagBlocksIds_.Equals(other.bagBlocksIds_)) return false;
      if(!bagBlockNums_.Equals(other.bagBlockNums_)) return false;
      if(!woundedInfo_.Equals(other.woundedInfo_)) return false;
      if(!attrsIncInfo_.Equals(other.attrsIncInfo_)) return false;
      if(!mainGunSkills_.Equals(other.mainGunSkills_)) return false;
      if(!activeSkills_.Equals(other.activeSkills_)) return false;
      if (!object.Equals(BagBlockItems, other.BagBlockItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= buildings_.GetHashCode();
      hash ^= blocks_.GetHashCode();
      if (technologyLevels_ != null) hash ^= TechnologyLevels.GetHashCode();
      if (recruitInfo_ != null) hash ^= RecruitInfo.GetHashCode();
      hash ^= bagBlocksIds_.GetHashCode();
      hash ^= bagBlockNums_.GetHashCode();
      hash ^= woundedInfo_.GetHashCode();
      hash ^= attrsIncInfo_.GetHashCode();
      hash ^= mainGunSkills_.GetHashCode();
      hash ^= activeSkills_.GetHashCode();
      if (bagBlockItems_ != null) hash ^= BagBlockItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      buildings_.WriteTo(output, _repeated_buildings_codec);
      blocks_.WriteTo(output, _repeated_blocks_codec);
      if (technologyLevels_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TechnologyLevels);
      }
      if (recruitInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecruitInfo);
      }
      bagBlocksIds_.WriteTo(output, _repeated_bagBlocksIds_codec);
      bagBlockNums_.WriteTo(output, _repeated_bagBlockNums_codec);
      woundedInfo_.WriteTo(output, _repeated_woundedInfo_codec);
      attrsIncInfo_.WriteTo(output, _repeated_attrsIncInfo_codec);
      mainGunSkills_.WriteTo(output, _repeated_mainGunSkills_codec);
      activeSkills_.WriteTo(output, _repeated_activeSkills_codec);
      if (bagBlockItems_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(BagBlockItems);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += buildings_.CalculateSize(_repeated_buildings_codec);
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      if (technologyLevels_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TechnologyLevels);
      }
      if (recruitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecruitInfo);
      }
      size += bagBlocksIds_.CalculateSize(_repeated_bagBlocksIds_codec);
      size += bagBlockNums_.CalculateSize(_repeated_bagBlockNums_codec);
      size += woundedInfo_.CalculateSize(_repeated_woundedInfo_codec);
      size += attrsIncInfo_.CalculateSize(_repeated_attrsIncInfo_codec);
      size += mainGunSkills_.CalculateSize(_repeated_mainGunSkills_codec);
      size += activeSkills_.CalculateSize(_repeated_activeSkills_codec);
      if (bagBlockItems_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BagBlockItems);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingsInfo other) {
      if (other == null) {
        return;
      }
      buildings_.Add(other.buildings_);
      blocks_.Add(other.blocks_);
      if (other.technologyLevels_ != null) {
        if (technologyLevels_ == null) {
          TechnologyLevels = new global::SLG.TechnologyInfo();
        }
        TechnologyLevels.MergeFrom(other.TechnologyLevels);
      }
      if (other.recruitInfo_ != null) {
        if (recruitInfo_ == null) {
          RecruitInfo = new global::SLG.RecruitInfo();
        }
        RecruitInfo.MergeFrom(other.RecruitInfo);
      }
      bagBlocksIds_.Add(other.bagBlocksIds_);
      bagBlockNums_.Add(other.bagBlockNums_);
      woundedInfo_.Add(other.woundedInfo_);
      attrsIncInfo_.Add(other.attrsIncInfo_);
      mainGunSkills_.Add(other.mainGunSkills_);
      activeSkills_.Add(other.activeSkills_);
      if (other.bagBlockItems_ != null) {
        if (bagBlockItems_ == null) {
          BagBlockItems = new global::SLG.bagBlockItemList();
        }
        BagBlockItems.MergeFrom(other.BagBlockItems);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            buildings_.AddEntriesFrom(input, _repeated_buildings_codec);
            break;
          }
          case 18: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
          case 26: {
            if (technologyLevels_ == null) {
              TechnologyLevels = new global::SLG.TechnologyInfo();
            }
            input.ReadMessage(TechnologyLevels);
            break;
          }
          case 34: {
            if (recruitInfo_ == null) {
              RecruitInfo = new global::SLG.RecruitInfo();
            }
            input.ReadMessage(RecruitInfo);
            break;
          }
          case 42:
          case 40: {
            bagBlocksIds_.AddEntriesFrom(input, _repeated_bagBlocksIds_codec);
            break;
          }
          case 50:
          case 48: {
            bagBlockNums_.AddEntriesFrom(input, _repeated_bagBlockNums_codec);
            break;
          }
          case 58:
          case 56: {
            woundedInfo_.AddEntriesFrom(input, _repeated_woundedInfo_codec);
            break;
          }
          case 66: {
            attrsIncInfo_.AddEntriesFrom(input, _repeated_attrsIncInfo_codec);
            break;
          }
          case 74:
          case 72: {
            mainGunSkills_.AddEntriesFrom(input, _repeated_mainGunSkills_codec);
            break;
          }
          case 82:
          case 80: {
            activeSkills_.AddEntriesFrom(input, _repeated_activeSkills_codec);
            break;
          }
          case 90: {
            if (bagBlockItems_ == null) {
              BagBlockItems = new global::SLG.bagBlockItemList();
            }
            input.ReadMessage(BagBlockItems);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingsAllPlan : pb::IMessage<BuildingsAllPlan> {
    private static readonly pb::MessageParser<BuildingsAllPlan> _parser = new pb::MessageParser<BuildingsAllPlan>(() => new BuildingsAllPlan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingsAllPlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingsAllPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingsAllPlan(BuildingsAllPlan other) : this() {
      curId_ = other.curId_;
      plans_ = other.plans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingsAllPlan Clone() {
      return new BuildingsAllPlan(this);
    }

    /// <summary>Field number for the "curId" field.</summary>
    public const int CurIdFieldNumber = 1;
    private int curId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurId {
      get { return curId_; }
      set {
        curId_ = value;
      }
    }

    /// <summary>Field number for the "plans" field.</summary>
    public const int PlansFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.BuildingPlan> _repeated_plans_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.BuildingPlan.Parser);
    private readonly pbc::RepeatedField<global::SLG.BuildingPlan> plans_ = new pbc::RepeatedField<global::SLG.BuildingPlan>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BuildingPlan> Plans {
      get { return plans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingsAllPlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingsAllPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurId != other.CurId) return false;
      if(!plans_.Equals(other.plans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurId != 0) hash ^= CurId.GetHashCode();
      hash ^= plans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurId);
      }
      plans_.WriteTo(output, _repeated_plans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurId);
      }
      size += plans_.CalculateSize(_repeated_plans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingsAllPlan other) {
      if (other == null) {
        return;
      }
      if (other.CurId != 0) {
        CurId = other.CurId;
      }
      plans_.Add(other.plans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurId = input.ReadInt32();
            break;
          }
          case 18: {
            plans_.AddEntriesFrom(input, _repeated_plans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingPlanItem : pb::IMessage<BuildingPlanItem> {
    private static readonly pb::MessageParser<BuildingPlanItem> _parser = new pb::MessageParser<BuildingPlanItem>(() => new BuildingPlanItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingPlanItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingPlanItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingPlanItem(BuildingPlanItem other) : this() {
      tid_ = other.tid_;
      x_ = other.x_;
      y_ = other.y_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingPlanItem Clone() {
      return new BuildingPlanItem(this);
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingPlanItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingPlanItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tid != other.Tid) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tid);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingPlanItem other) {
      if (other == null) {
        return;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tid = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
          case 32: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingPlan : pb::IMessage<BuildingPlan> {
    private static readonly pb::MessageParser<BuildingPlan> _parser = new pb::MessageParser<BuildingPlan>(() => new BuildingPlan());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingPlan> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingPlan() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingPlan(BuildingPlan other) : this() {
      id_ = other.id_;
      plan_ = other.plan_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingPlan Clone() {
      return new BuildingPlan(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "plan" field.</summary>
    public const int PlanFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.BuildingPlanItem> _repeated_plan_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.BuildingPlanItem.Parser);
    private readonly pbc::RepeatedField<global::SLG.BuildingPlanItem> plan_ = new pbc::RepeatedField<global::SLG.BuildingPlanItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BuildingPlanItem> Plan {
      get { return plan_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingPlan);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingPlan other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!plan_.Equals(other.plan_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= plan_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      plan_.WriteTo(output, _repeated_plan_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += plan_.CalculateSize(_repeated_plan_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingPlan other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      plan_.Add(other.plan_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            plan_.AddEntriesFrom(input, _repeated_plan_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeSceneRes : pb::IMessage<ChangeSceneRes> {
    private static readonly pb::MessageParser<ChangeSceneRes> _parser = new pb::MessageParser<ChangeSceneRes>(() => new ChangeSceneRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSceneRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSceneRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSceneRes(ChangeSceneRes other) : this() {
      delIdList_ = other.delIdList_.Clone();
      changeBlocks_ = other.changeBlocks_.Clone();
      changeBagItems_ = other.changeBagItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSceneRes Clone() {
      return new ChangeSceneRes(this);
    }

    /// <summary>Field number for the "delIdList" field.</summary>
    public const int DelIdListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_delIdList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> delIdList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DelIdList {
      get { return delIdList_; }
    }

    /// <summary>Field number for the "changeBlocks" field.</summary>
    public const int ChangeBlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.BlockInfo> _repeated_changeBlocks_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.BlockInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.BlockInfo> changeBlocks_ = new pbc::RepeatedField<global::SLG.BlockInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BlockInfo> ChangeBlocks {
      get { return changeBlocks_; }
    }

    /// <summary>Field number for the "changeBagItems" field.</summary>
    public const int ChangeBagItemsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.bagBlockItem> _repeated_changeBagItems_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.bagBlockItem.Parser);
    private readonly pbc::RepeatedField<global::SLG.bagBlockItem> changeBagItems_ = new pbc::RepeatedField<global::SLG.bagBlockItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.bagBlockItem> ChangeBagItems {
      get { return changeBagItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSceneRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSceneRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!delIdList_.Equals(other.delIdList_)) return false;
      if(!changeBlocks_.Equals(other.changeBlocks_)) return false;
      if(!changeBagItems_.Equals(other.changeBagItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= delIdList_.GetHashCode();
      hash ^= changeBlocks_.GetHashCode();
      hash ^= changeBagItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      delIdList_.WriteTo(output, _repeated_delIdList_codec);
      changeBlocks_.WriteTo(output, _repeated_changeBlocks_codec);
      changeBagItems_.WriteTo(output, _repeated_changeBagItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += delIdList_.CalculateSize(_repeated_delIdList_codec);
      size += changeBlocks_.CalculateSize(_repeated_changeBlocks_codec);
      size += changeBagItems_.CalculateSize(_repeated_changeBagItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSceneRes other) {
      if (other == null) {
        return;
      }
      delIdList_.Add(other.delIdList_);
      changeBlocks_.Add(other.changeBlocks_);
      changeBagItems_.Add(other.changeBagItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            delIdList_.AddEntriesFrom(input, _repeated_delIdList_codec);
            break;
          }
          case 18: {
            changeBlocks_.AddEntriesFrom(input, _repeated_changeBlocks_codec);
            break;
          }
          case 26: {
            changeBagItems_.AddEntriesFrom(input, _repeated_changeBagItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginBuildingReq : pb::IMessage<LoginBuildingReq> {
    private static readonly pb::MessageParser<LoginBuildingReq> _parser = new pb::MessageParser<LoginBuildingReq>(() => new LoginBuildingReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginBuildingReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginBuildingReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginBuildingReq(LoginBuildingReq other) : this() {
      uid_ = other.uid_;
      sid_ = other.sid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginBuildingReq Clone() {
      return new LoginBuildingReq(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 2;
    private string sid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sid {
      get { return sid_; }
      set {
        sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginBuildingReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginBuildingReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Sid != other.Sid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0L) hash ^= Uid.GetHashCode();
      if (Sid.Length != 0) hash ^= Sid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Sid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Sid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Sid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginBuildingReq other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0L) {
        Uid = other.Uid;
      }
      if (other.Sid.Length != 0) {
        Sid = other.Sid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Sid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TechnologyInfo : pb::IMessage<TechnologyInfo> {
    private static readonly pb::MessageParser<TechnologyInfo> _parser = new pb::MessageParser<TechnologyInfo>(() => new TechnologyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TechnologyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TechnologyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TechnologyInfo(TechnologyInfo other) : this() {
      techLevels_ = other.techLevels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TechnologyInfo Clone() {
      return new TechnologyInfo(this);
    }

    /// <summary>Field number for the "techLevels" field.</summary>
    public const int TechLevelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.KeyValuePair> _repeated_techLevels_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::SLG.KeyValuePair> techLevels_ = new pbc::RepeatedField<global::SLG.KeyValuePair>();
    /// <summary>
    ///科技等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.KeyValuePair> TechLevels {
      get { return techLevels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TechnologyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TechnologyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!techLevels_.Equals(other.techLevels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= techLevels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      techLevels_.WriteTo(output, _repeated_techLevels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += techLevels_.CalculateSize(_repeated_techLevels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TechnologyInfo other) {
      if (other == null) {
        return;
      }
      techLevels_.Add(other.techLevels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            techLevels_.AddEntriesFrom(input, _repeated_techLevels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecruitOption : pb::IMessage<RecruitOption> {
    private static readonly pb::MessageParser<RecruitOption> _parser = new pb::MessageParser<RecruitOption>(() => new RecruitOption());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecruitOption> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitOption() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitOption(RecruitOption other) : this() {
      recruitType_ = other.recruitType_;
      times_ = other.times_;
      isFree_ = other.isFree_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitOption Clone() {
      return new RecruitOption(this);
    }

    /// <summary>Field number for the "recruitType" field.</summary>
    public const int RecruitTypeFieldNumber = 1;
    private int recruitType_;
    /// <summary>
    ///招募类型 - 1.普通 2.高级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecruitType {
      get { return recruitType_; }
      set {
        recruitType_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    /// <summary>
    ///次数类型 - 1.单次 2.多次
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "isFree" field.</summary>
    public const int IsFreeFieldNumber = 3;
    private int isFree_;
    /// <summary>
    ///1.使用免费次数 2.消耗道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IsFree {
      get { return isFree_; }
      set {
        isFree_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecruitOption);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecruitOption other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecruitType != other.RecruitType) return false;
      if (Times != other.Times) return false;
      if (IsFree != other.IsFree) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecruitType != 0) hash ^= RecruitType.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (IsFree != 0) hash ^= IsFree.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecruitType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RecruitType);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (IsFree != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IsFree);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecruitType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecruitType);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (IsFree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IsFree);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecruitOption other) {
      if (other == null) {
        return;
      }
      if (other.RecruitType != 0) {
        RecruitType = other.RecruitType;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.IsFree != 0) {
        IsFree = other.IsFree;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecruitType = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 24: {
            IsFree = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccelerateInfo : pb::IMessage<AccelerateInfo> {
    private static readonly pb::MessageParser<AccelerateInfo> _parser = new pb::MessageParser<AccelerateInfo>(() => new AccelerateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccelerateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccelerateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccelerateInfo(AccelerateInfo other) : this() {
      buildingId_ = other.buildingId_;
      itemId_ = other.itemId_.Clone();
      itemNum_ = other.itemNum_.Clone();
      buy_ = other.buy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccelerateInfo Clone() {
      return new AccelerateInfo(this);
    }

    /// <summary>Field number for the "buildingId" field.</summary>
    public const int BuildingIdFieldNumber = 1;
    private int buildingId_;
    /// <summary>
    ///要加速哪个建筑的队列
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = value;
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_itemId_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> itemId_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///道具id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemId {
      get { return itemId_; }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_itemNum_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> itemNum_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ItemNum {
      get { return itemNum_; }
    }

    /// <summary>Field number for the "buy" field.</summary>
    public const int BuyFieldNumber = 4;
    private int buy_;
    /// <summary>
    ///为1时 - 道具不足时先购买再加速
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Buy {
      get { return buy_; }
      set {
        buy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccelerateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccelerateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingId != other.BuildingId) return false;
      if(!itemId_.Equals(other.itemId_)) return false;
      if(!itemNum_.Equals(other.itemNum_)) return false;
      if (Buy != other.Buy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingId != 0) hash ^= BuildingId.GetHashCode();
      hash ^= itemId_.GetHashCode();
      hash ^= itemNum_.GetHashCode();
      if (Buy != 0) hash ^= Buy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildingId);
      }
      itemId_.WriteTo(output, _repeated_itemId_codec);
      itemNum_.WriteTo(output, _repeated_itemNum_codec);
      if (Buy != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Buy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingId);
      }
      size += itemId_.CalculateSize(_repeated_itemId_codec);
      size += itemNum_.CalculateSize(_repeated_itemNum_codec);
      if (Buy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Buy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccelerateInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuildingId != 0) {
        BuildingId = other.BuildingId;
      }
      itemId_.Add(other.itemId_);
      itemNum_.Add(other.itemNum_);
      if (other.Buy != 0) {
        Buy = other.Buy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuildingId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            itemId_.AddEntriesFrom(input, _repeated_itemId_codec);
            break;
          }
          case 26:
          case 24: {
            itemNum_.AddEntriesFrom(input, _repeated_itemNum_codec);
            break;
          }
          case 32: {
            Buy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueueInfo : pb::IMessage<QueueInfo> {
    private static readonly pb::MessageParser<QueueInfo> _parser = new pb::MessageParser<QueueInfo>(() => new QueueInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueInfo(QueueInfo other) : this() {
      buildingId_ = other.buildingId_;
      qType_ = other.qType_;
      queueArg_ = other.queueArg_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueInfo Clone() {
      return new QueueInfo(this);
    }

    /// <summary>Field number for the "buildingId" field.</summary>
    public const int BuildingIdFieldNumber = 1;
    private int buildingId_;
    /// <summary>
    ///所属建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = value;
      }
    }

    /// <summary>Field number for the "qType" field.</summary>
    public const int QTypeFieldNumber = 2;
    private int qType_;
    /// <summary>
    ///队列类型（Queue_Type）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QType {
      get { return qType_; }
      set {
        qType_ = value;
      }
    }

    /// <summary>Field number for the "queueArg" field.</summary>
    public const int QueueArgFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_queueArg_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> queueArg_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///（倒计时中）队列/（结束）产出参数：研究 - techId, 练兵 - [soldierTblId,trainNum]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> QueueArg {
      get { return queueArg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingId != other.BuildingId) return false;
      if (QType != other.QType) return false;
      if(!queueArg_.Equals(other.queueArg_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingId != 0) hash ^= BuildingId.GetHashCode();
      if (QType != 0) hash ^= QType.GetHashCode();
      hash ^= queueArg_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildingId);
      }
      if (QType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(QType);
      }
      queueArg_.WriteTo(output, _repeated_queueArg_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingId);
      }
      if (QType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QType);
      }
      size += queueArg_.CalculateSize(_repeated_queueArg_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueInfo other) {
      if (other == null) {
        return;
      }
      if (other.BuildingId != 0) {
        BuildingId = other.BuildingId;
      }
      if (other.QType != 0) {
        QType = other.QType;
      }
      queueArg_.Add(other.queueArg_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuildingId = input.ReadInt32();
            break;
          }
          case 16: {
            QType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            queueArg_.AddEntriesFrom(input, _repeated_queueArg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecruitInfo : pb::IMessage<RecruitInfo> {
    private static readonly pb::MessageParser<RecruitInfo> _parser = new pb::MessageParser<RecruitInfo>(() => new RecruitInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecruitInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitInfo(RecruitInfo other) : this() {
      commonFreeTimes_ = other.commonFreeTimes_;
      useFreeTime_ = other.useFreeTime_;
      hasHighFree_ = other.hasHighFree_;
      getNextHighFree_ = other.getNextHighFree_;
      commonNotShow_ = other.commonNotShow_;
      highNotShow_ = other.highNotShow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitInfo Clone() {
      return new RecruitInfo(this);
    }

    /// <summary>Field number for the "commonFreeTimes" field.</summary>
    public const int CommonFreeTimesFieldNumber = 1;
    private int commonFreeTimes_;
    /// <summary>
    ///本日剩余免费普通招募次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommonFreeTimes {
      get { return commonFreeTimes_; }
      set {
        commonFreeTimes_ = value;
      }
    }

    /// <summary>Field number for the "useFreeTime" field.</summary>
    public const int UseFreeTimeFieldNumber = 2;
    private long useFreeTime_;
    /// <summary>
    ///下次普通免费可用时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UseFreeTime {
      get { return useFreeTime_; }
      set {
        useFreeTime_ = value;
      }
    }

    /// <summary>Field number for the "hasHighFree" field.</summary>
    public const int HasHighFreeFieldNumber = 3;
    private int hasHighFree_;
    /// <summary>
    ///当前是否有高级招募免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasHighFree {
      get { return hasHighFree_; }
      set {
        hasHighFree_ = value;
      }
    }

    /// <summary>Field number for the "getNextHighFree" field.</summary>
    public const int GetNextHighFreeFieldNumber = 4;
    private long getNextHighFree_;
    /// <summary>
    ///下次获取高级免费次数时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GetNextHighFree {
      get { return getNextHighFree_; }
      set {
        getNextHighFree_ = value;
      }
    }

    /// <summary>Field number for the "commonNotShow" field.</summary>
    public const int CommonNotShowFieldNumber = 5;
    private int commonNotShow_;
    /// <summary>
    ///1 - 本日不再提示 - 普通
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommonNotShow {
      get { return commonNotShow_; }
      set {
        commonNotShow_ = value;
      }
    }

    /// <summary>Field number for the "highNotShow" field.</summary>
    public const int HighNotShowFieldNumber = 6;
    private int highNotShow_;
    /// <summary>
    ///1 - 本日不再提示 - 高级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HighNotShow {
      get { return highNotShow_; }
      set {
        highNotShow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecruitInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecruitInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommonFreeTimes != other.CommonFreeTimes) return false;
      if (UseFreeTime != other.UseFreeTime) return false;
      if (HasHighFree != other.HasHighFree) return false;
      if (GetNextHighFree != other.GetNextHighFree) return false;
      if (CommonNotShow != other.CommonNotShow) return false;
      if (HighNotShow != other.HighNotShow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommonFreeTimes != 0) hash ^= CommonFreeTimes.GetHashCode();
      if (UseFreeTime != 0L) hash ^= UseFreeTime.GetHashCode();
      if (HasHighFree != 0) hash ^= HasHighFree.GetHashCode();
      if (GetNextHighFree != 0L) hash ^= GetNextHighFree.GetHashCode();
      if (CommonNotShow != 0) hash ^= CommonNotShow.GetHashCode();
      if (HighNotShow != 0) hash ^= HighNotShow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommonFreeTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CommonFreeTimes);
      }
      if (UseFreeTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UseFreeTime);
      }
      if (HasHighFree != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HasHighFree);
      }
      if (GetNextHighFree != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GetNextHighFree);
      }
      if (CommonNotShow != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CommonNotShow);
      }
      if (HighNotShow != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(HighNotShow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommonFreeTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommonFreeTimes);
      }
      if (UseFreeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UseFreeTime);
      }
      if (HasHighFree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasHighFree);
      }
      if (GetNextHighFree != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GetNextHighFree);
      }
      if (CommonNotShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommonNotShow);
      }
      if (HighNotShow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HighNotShow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecruitInfo other) {
      if (other == null) {
        return;
      }
      if (other.CommonFreeTimes != 0) {
        CommonFreeTimes = other.CommonFreeTimes;
      }
      if (other.UseFreeTime != 0L) {
        UseFreeTime = other.UseFreeTime;
      }
      if (other.HasHighFree != 0) {
        HasHighFree = other.HasHighFree;
      }
      if (other.GetNextHighFree != 0L) {
        GetNextHighFree = other.GetNextHighFree;
      }
      if (other.CommonNotShow != 0) {
        CommonNotShow = other.CommonNotShow;
      }
      if (other.HighNotShow != 0) {
        HighNotShow = other.HighNotShow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CommonFreeTimes = input.ReadInt32();
            break;
          }
          case 16: {
            UseFreeTime = input.ReadInt64();
            break;
          }
          case 24: {
            HasHighFree = input.ReadInt32();
            break;
          }
          case 32: {
            GetNextHighFree = input.ReadInt64();
            break;
          }
          case 40: {
            CommonNotShow = input.ReadInt32();
            break;
          }
          case 48: {
            HighNotShow = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecruitRes : pb::IMessage<RecruitRes> {
    private static readonly pb::MessageParser<RecruitRes> _parser = new pb::MessageParser<RecruitRes>(() => new RecruitRes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecruitRes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitRes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitRes(RecruitRes other) : this() {
      gainItems_ = other.gainItems_.Clone();
      recruitInfo_ = other.recruitInfo_ != null ? other.recruitInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitRes Clone() {
      return new RecruitRes(this);
    }

    /// <summary>Field number for the "gainItems" field.</summary>
    public const int GainItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.RecruitGain> _repeated_gainItems_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.RecruitGain.Parser);
    private readonly pbc::RepeatedField<global::SLG.RecruitGain> gainItems_ = new pbc::RepeatedField<global::SLG.RecruitGain>();
    /// <summary>
    ///本次招募所得
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.RecruitGain> GainItems {
      get { return gainItems_; }
    }

    /// <summary>Field number for the "recruitInfo" field.</summary>
    public const int RecruitInfoFieldNumber = 2;
    private global::SLG.RecruitOption recruitInfo_;
    /// <summary>
    ///本次招募的基本信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.RecruitOption RecruitInfo {
      get { return recruitInfo_; }
      set {
        recruitInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecruitRes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecruitRes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gainItems_.Equals(other.gainItems_)) return false;
      if (!object.Equals(RecruitInfo, other.RecruitInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gainItems_.GetHashCode();
      if (recruitInfo_ != null) hash ^= RecruitInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gainItems_.WriteTo(output, _repeated_gainItems_codec);
      if (recruitInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RecruitInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gainItems_.CalculateSize(_repeated_gainItems_codec);
      if (recruitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecruitInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecruitRes other) {
      if (other == null) {
        return;
      }
      gainItems_.Add(other.gainItems_);
      if (other.recruitInfo_ != null) {
        if (recruitInfo_ == null) {
          RecruitInfo = new global::SLG.RecruitOption();
        }
        RecruitInfo.MergeFrom(other.RecruitInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gainItems_.AddEntriesFrom(input, _repeated_gainItems_codec);
            break;
          }
          case 18: {
            if (recruitInfo_ == null) {
              RecruitInfo = new global::SLG.RecruitOption();
            }
            input.ReadMessage(RecruitInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecruitGain : pb::IMessage<RecruitGain> {
    private static readonly pb::MessageParser<RecruitGain> _parser = new pb::MessageParser<RecruitGain>(() => new RecruitGain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecruitGain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitGain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitGain(RecruitGain other) : this() {
      tblType_ = other.tblType_;
      tblId_ = other.tblId_;
      gainNum_ = other.gainNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecruitGain Clone() {
      return new RecruitGain(this);
    }

    /// <summary>Field number for the "tblType" field.</summary>
    public const int TblTypeFieldNumber = 1;
    private int tblType_;
    /// <summary>
    ///读哪张表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TblType {
      get { return tblType_; }
      set {
        tblType_ = value;
      }
    }

    /// <summary>Field number for the "tblId" field.</summary>
    public const int TblIdFieldNumber = 2;
    private int tblId_;
    /// <summary>
    ///表id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TblId {
      get { return tblId_; }
      set {
        tblId_ = value;
      }
    }

    /// <summary>Field number for the "gainNum" field.</summary>
    public const int GainNumFieldNumber = 3;
    private int gainNum_;
    /// <summary>
    ///获取数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GainNum {
      get { return gainNum_; }
      set {
        gainNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecruitGain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecruitGain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TblType != other.TblType) return false;
      if (TblId != other.TblId) return false;
      if (GainNum != other.GainNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TblType != 0) hash ^= TblType.GetHashCode();
      if (TblId != 0) hash ^= TblId.GetHashCode();
      if (GainNum != 0) hash ^= GainNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TblType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TblType);
      }
      if (TblId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TblId);
      }
      if (GainNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GainNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TblType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TblType);
      }
      if (TblId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TblId);
      }
      if (GainNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GainNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecruitGain other) {
      if (other == null) {
        return;
      }
      if (other.TblType != 0) {
        TblType = other.TblType;
      }
      if (other.TblId != 0) {
        TblId = other.TblId;
      }
      if (other.GainNum != 0) {
        GainNum = other.GainNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TblType = input.ReadInt32();
            break;
          }
          case 16: {
            TblId = input.ReadInt32();
            break;
          }
          case 24: {
            GainNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrainInfo : pb::IMessage<TrainInfo> {
    private static readonly pb::MessageParser<TrainInfo> _parser = new pb::MessageParser<TrainInfo>(() => new TrainInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrainInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainInfo(TrainInfo other) : this() {
      soldierId_ = other.soldierId_;
      trainNum_ = other.trainNum_;
      buildingId_ = other.buildingId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrainInfo Clone() {
      return new TrainInfo(this);
    }

    /// <summary>Field number for the "soldierId" field.</summary>
    public const int SoldierIdFieldNumber = 1;
    private int soldierId_;
    /// <summary>
    ///兵种表id（类型等级复合）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SoldierId {
      get { return soldierId_; }
      set {
        soldierId_ = value;
      }
    }

    /// <summary>Field number for the "trainNum" field.</summary>
    public const int TrainNumFieldNumber = 2;
    private int trainNum_;
    /// <summary>
    ///要训练的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainNum {
      get { return trainNum_; }
      set {
        trainNum_ = value;
      }
    }

    /// <summary>Field number for the "buildingId" field.</summary>
    public const int BuildingIdFieldNumber = 3;
    private int buildingId_;
    /// <summary>
    ///在哪个建筑上进行
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrainInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrainInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SoldierId != other.SoldierId) return false;
      if (TrainNum != other.TrainNum) return false;
      if (BuildingId != other.BuildingId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SoldierId != 0) hash ^= SoldierId.GetHashCode();
      if (TrainNum != 0) hash ^= TrainNum.GetHashCode();
      if (BuildingId != 0) hash ^= BuildingId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SoldierId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SoldierId);
      }
      if (TrainNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TrainNum);
      }
      if (BuildingId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuildingId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SoldierId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SoldierId);
      }
      if (TrainNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainNum);
      }
      if (BuildingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrainInfo other) {
      if (other == null) {
        return;
      }
      if (other.SoldierId != 0) {
        SoldierId = other.SoldierId;
      }
      if (other.TrainNum != 0) {
        TrainNum = other.TrainNum;
      }
      if (other.BuildingId != 0) {
        BuildingId = other.BuildingId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SoldierId = input.ReadInt32();
            break;
          }
          case 16: {
            TrainNum = input.ReadInt32();
            break;
          }
          case 24: {
            BuildingId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceInfo : pb::IMessage<ResourceInfo> {
    private static readonly pb::MessageParser<ResourceInfo> _parser = new pb::MessageParser<ResourceInfo>(() => new ResourceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceInfo(ResourceInfo other) : this() {
      playerId_ = other.playerId_;
      resType_ = other.resType_;
      addVal_ = other.addVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceInfo Clone() {
      return new ResourceInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "resType" field.</summary>
    public const int ResTypeFieldNumber = 2;
    private int resType_;
    /// <summary>
    ///资源类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResType {
      get { return resType_; }
      set {
        resType_ = value;
      }
    }

    /// <summary>Field number for the "addVal" field.</summary>
    public const int AddValFieldNumber = 3;
    private int addVal_;
    /// <summary>
    ///改变数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddVal {
      get { return addVal_; }
      set {
        addVal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ResType != other.ResType) return false;
      if (AddVal != other.AddVal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (ResType != 0) hash ^= ResType.GetHashCode();
      if (AddVal != 0) hash ^= AddVal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (ResType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResType);
      }
      if (AddVal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (ResType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResType);
      }
      if (AddVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.ResType != 0) {
        ResType = other.ResType;
      }
      if (other.AddVal != 0) {
        AddVal = other.AddVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            ResType = input.ReadInt32();
            break;
          }
          case 24: {
            AddVal = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommonChangeInfo : pb::IMessage<CommonChangeInfo> {
    private static readonly pb::MessageParser<CommonChangeInfo> _parser = new pb::MessageParser<CommonChangeInfo>(() => new CommonChangeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonChangeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonChangeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonChangeInfo(CommonChangeInfo other) : this() {
      playerId_ = other.playerId_;
      tblId_ = other.tblId_;
      addVal_ = other.addVal_;
      changeReason_ = other.changeReason_;
      reasonParm_ = other.reasonParm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonChangeInfo Clone() {
      return new CommonChangeInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "tblId" field.</summary>
    public const int TblIdFieldNumber = 2;
    private int tblId_;
    /// <summary>
    ///与之关联的表id - item, soldier, hero ...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TblId {
      get { return tblId_; }
      set {
        tblId_ = value;
      }
    }

    /// <summary>Field number for the "addVal" field.</summary>
    public const int AddValFieldNumber = 3;
    private int addVal_;
    /// <summary>
    ///改变数目
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddVal {
      get { return addVal_; }
      set {
        addVal_ = value;
      }
    }

    /// <summary>Field number for the "changeReason" field.</summary>
    public const int ChangeReasonFieldNumber = 4;
    private int changeReason_;
    /// <summary>
    ///变化原因 - enum CommonInfoChangeReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeReason {
      get { return changeReason_; }
      set {
        changeReason_ = value;
      }
    }

    /// <summary>Field number for the "reasonParm" field.</summary>
    public const int ReasonParmFieldNumber = 5;
    private int reasonParm_;
    /// <summary>
    ///原因相关的二级参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReasonParm {
      get { return reasonParm_; }
      set {
        reasonParm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonChangeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonChangeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (TblId != other.TblId) return false;
      if (AddVal != other.AddVal) return false;
      if (ChangeReason != other.ChangeReason) return false;
      if (ReasonParm != other.ReasonParm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (TblId != 0) hash ^= TblId.GetHashCode();
      if (AddVal != 0) hash ^= AddVal.GetHashCode();
      if (ChangeReason != 0) hash ^= ChangeReason.GetHashCode();
      if (ReasonParm != 0) hash ^= ReasonParm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (TblId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TblId);
      }
      if (AddVal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AddVal);
      }
      if (ChangeReason != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ChangeReason);
      }
      if (ReasonParm != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReasonParm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (TblId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TblId);
      }
      if (AddVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddVal);
      }
      if (ChangeReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeReason);
      }
      if (ReasonParm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReasonParm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonChangeInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.TblId != 0) {
        TblId = other.TblId;
      }
      if (other.AddVal != 0) {
        AddVal = other.AddVal;
      }
      if (other.ChangeReason != 0) {
        ChangeReason = other.ChangeReason;
      }
      if (other.ReasonParm != 0) {
        ReasonParm = other.ReasonParm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            TblId = input.ReadInt32();
            break;
          }
          case 24: {
            AddVal = input.ReadInt32();
            break;
          }
          case 32: {
            ChangeReason = input.ReadInt32();
            break;
          }
          case 40: {
            ReasonParm = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProductResultAll : pb::IMessage<GetProductResultAll> {
    private static readonly pb::MessageParser<GetProductResultAll> _parser = new pb::MessageParser<GetProductResultAll>(() => new GetProductResultAll());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProductResultAll> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProductResultAll() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProductResultAll(GetProductResultAll other) : this() {
      getInfo_ = other.getInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProductResultAll Clone() {
      return new GetProductResultAll(this);
    }

    /// <summary>Field number for the "getInfo" field.</summary>
    public const int GetInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.GetProductResult> _repeated_getInfo_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.GetProductResult.Parser);
    private readonly pbc::RepeatedField<global::SLG.GetProductResult> getInfo_ = new pbc::RepeatedField<global::SLG.GetProductResult>();
    /// <summary>
    ///某个资源建筑的获取资源信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.GetProductResult> GetInfo {
      get { return getInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProductResultAll);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProductResultAll other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!getInfo_.Equals(other.getInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= getInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      getInfo_.WriteTo(output, _repeated_getInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += getInfo_.CalculateSize(_repeated_getInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProductResultAll other) {
      if (other == null) {
        return;
      }
      getInfo_.Add(other.getInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            getInfo_.AddEntriesFrom(input, _repeated_getInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProductResult : pb::IMessage<GetProductResult> {
    private static readonly pb::MessageParser<GetProductResult> _parser = new pb::MessageParser<GetProductResult>(() => new GetProductResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProductResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProductResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProductResult(GetProductResult other) : this() {
      buildingId_ = other.buildingId_;
      productInfo_ = other.productInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProductResult Clone() {
      return new GetProductResult(this);
    }

    /// <summary>Field number for the "buildingId" field.</summary>
    public const int BuildingIdFieldNumber = 1;
    private int buildingId_;
    /// <summary>
    ///获取自哪个建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuildingId {
      get { return buildingId_; }
      set {
        buildingId_ = value;
      }
    }

    /// <summary>Field number for the "productInfo" field.</summary>
    public const int ProductInfoFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_productInfo_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> productInfo_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///产出信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ProductInfo {
      get { return productInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProductResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProductResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuildingId != other.BuildingId) return false;
      if(!productInfo_.Equals(other.productInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuildingId != 0) hash ^= BuildingId.GetHashCode();
      hash ^= productInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuildingId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuildingId);
      }
      productInfo_.WriteTo(output, _repeated_productInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuildingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuildingId);
      }
      size += productInfo_.CalculateSize(_repeated_productInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProductResult other) {
      if (other == null) {
        return;
      }
      if (other.BuildingId != 0) {
        BuildingId = other.BuildingId;
      }
      productInfo_.Add(other.productInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuildingId = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            productInfo_.AddEntriesFrom(input, _repeated_productInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildingAttrs : pb::IMessage<BuildingAttrs> {
    private static readonly pb::MessageParser<BuildingAttrs> _parser = new pb::MessageParser<BuildingAttrs>(() => new BuildingAttrs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildingAttrs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingAttrs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingAttrs(BuildingAttrs other) : this() {
      attrs_ = other.attrs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildingAttrs Clone() {
      return new BuildingAttrs(this);
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.BuildAttrInfo> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.BuildAttrInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.BuildAttrInfo> attrs_ = new pbc::RepeatedField<global::SLG.BuildAttrInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.BuildAttrInfo> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildingAttrs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildingAttrs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attrs_.Equals(other.attrs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attrs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildingAttrs other) {
      if (other == null) {
        return;
      }
      attrs_.Add(other.attrs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoldiersInfo : pb::IMessage<SoldiersInfo> {
    private static readonly pb::MessageParser<SoldiersInfo> _parser = new pb::MessageParser<SoldiersInfo>(() => new SoldiersInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoldiersInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldiersInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldiersInfo(SoldiersInfo other) : this() {
      playerId_ = other.playerId_;
      soldiers_ = other.soldiers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldiersInfo Clone() {
      return new SoldiersInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "soldiers" field.</summary>
    public const int SoldiersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.KeyValuePair> _repeated_soldiers_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::SLG.KeyValuePair> soldiers_ = new pbc::RepeatedField<global::SLG.KeyValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.KeyValuePair> Soldiers {
      get { return soldiers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoldiersInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoldiersInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if(!soldiers_.Equals(other.soldiers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      hash ^= soldiers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      soldiers_.WriteTo(output, _repeated_soldiers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      size += soldiers_.CalculateSize(_repeated_soldiers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoldiersInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      soldiers_.Add(other.soldiers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            soldiers_.AddEntriesFrom(input, _repeated_soldiers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerRequest : pb::IMessage<PlayerRequest> {
    private static readonly pb::MessageParser<PlayerRequest> _parser = new pb::MessageParser<PlayerRequest>(() => new PlayerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequest(PlayerRequest other) : this() {
      playerId_ = other.playerId_;
      reqArg_ = other.reqArg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerRequest Clone() {
      return new PlayerRequest(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "reqArg" field.</summary>
    public const int ReqArgFieldNumber = 2;
    private int reqArg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqArg {
      get { return reqArg_; }
      set {
        reqArg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (ReqArg != other.ReqArg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (ReqArg != 0) hash ^= ReqArg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (ReqArg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReqArg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (ReqArg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqArg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.ReqArg != 0) {
        ReqArg = other.ReqArg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 16: {
            ReqArg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class bagBlockItemList : pb::IMessage<bagBlockItemList> {
    private static readonly pb::MessageParser<bagBlockItemList> _parser = new pb::MessageParser<bagBlockItemList>(() => new bagBlockItemList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bagBlockItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bagBlockItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bagBlockItemList(bagBlockItemList other) : this() {
      blockItem_ = other.blockItem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bagBlockItemList Clone() {
      return new bagBlockItemList(this);
    }

    /// <summary>Field number for the "blockItem" field.</summary>
    public const int BlockItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.bagBlockItem> _repeated_blockItem_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.bagBlockItem.Parser);
    private readonly pbc::RepeatedField<global::SLG.bagBlockItem> blockItem_ = new pbc::RepeatedField<global::SLG.bagBlockItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.bagBlockItem> BlockItem {
      get { return blockItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bagBlockItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bagBlockItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockItem_.Equals(other.blockItem_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockItem_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockItem_.WriteTo(output, _repeated_blockItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockItem_.CalculateSize(_repeated_blockItem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bagBlockItemList other) {
      if (other == null) {
        return;
      }
      blockItem_.Add(other.blockItem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            blockItem_.AddEntriesFrom(input, _repeated_blockItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class bagBlockItem : pb::IMessage<bagBlockItem> {
    private static readonly pb::MessageParser<bagBlockItem> _parser = new pb::MessageParser<bagBlockItem>(() => new bagBlockItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<bagBlockItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bagBlockItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bagBlockItem(bagBlockItem other) : this() {
      blockLevel_ = other.blockLevel_;
      blockType_ = other.blockType_;
      blockCount_ = other.blockCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bagBlockItem Clone() {
      return new bagBlockItem(this);
    }

    /// <summary>Field number for the "blockLevel" field.</summary>
    public const int BlockLevelFieldNumber = 1;
    private int blockLevel_;
    /// <summary>
    ///地块等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockLevel {
      get { return blockLevel_; }
      set {
        blockLevel_ = value;
      }
    }

    /// <summary>Field number for the "blockType" field.</summary>
    public const int BlockTypeFieldNumber = 2;
    private int blockType_;
    /// <summary>
    ///地块种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockType {
      get { return blockType_; }
      set {
        blockType_ = value;
      }
    }

    /// <summary>Field number for the "blockCount" field.</summary>
    public const int BlockCountFieldNumber = 3;
    private int blockCount_;
    /// <summary>
    ///地块数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockCount {
      get { return blockCount_; }
      set {
        blockCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as bagBlockItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(bagBlockItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockLevel != other.BlockLevel) return false;
      if (BlockType != other.BlockType) return false;
      if (BlockCount != other.BlockCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockLevel != 0) hash ^= BlockLevel.GetHashCode();
      if (BlockType != 0) hash ^= BlockType.GetHashCode();
      if (BlockCount != 0) hash ^= BlockCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockLevel);
      }
      if (BlockType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockType);
      }
      if (BlockCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlockCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockLevel);
      }
      if (BlockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockType);
      }
      if (BlockCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(bagBlockItem other) {
      if (other == null) {
        return;
      }
      if (other.BlockLevel != 0) {
        BlockLevel = other.BlockLevel;
      }
      if (other.BlockType != 0) {
        BlockType = other.BlockType;
      }
      if (other.BlockCount != 0) {
        BlockCount = other.BlockCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockLevel = input.ReadInt32();
            break;
          }
          case 16: {
            BlockType = input.ReadInt32();
            break;
          }
          case 24: {
            BlockCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComposeBackList : pb::IMessage<ComposeBackList> {
    private static readonly pb::MessageParser<ComposeBackList> _parser = new pb::MessageParser<ComposeBackList>(() => new ComposeBackList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComposeBackList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeBackList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeBackList(ComposeBackList other) : this() {
      blockItem_ = other.blockItem_.Clone();
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeBackList Clone() {
      return new ComposeBackList(this);
    }

    /// <summary>Field number for the "blockItem" field.</summary>
    public const int BlockItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.bagBlockItem> _repeated_blockItem_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.bagBlockItem.Parser);
    private readonly pbc::RepeatedField<global::SLG.bagBlockItem> blockItem_ = new pbc::RepeatedField<global::SLG.bagBlockItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.bagBlockItem> BlockItem {
      get { return blockItem_; }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComposeBackList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComposeBackList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blockItem_.Equals(other.blockItem_)) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blockItem_.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blockItem_.WriteTo(output, _repeated_blockItem_codec);
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blockItem_.CalculateSize(_repeated_blockItem_codec);
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComposeBackList other) {
      if (other == null) {
        return;
      }
      blockItem_.Add(other.blockItem_);
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            blockItem_.AddEntriesFrom(input, _repeated_blockItem_codec);
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendTurretRequest : pb::IMessage<SendTurretRequest> {
    private static readonly pb::MessageParser<SendTurretRequest> _parser = new pb::MessageParser<SendTurretRequest>(() => new SendTurretRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendTurretRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTurretRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTurretRequest(SendTurretRequest other) : this() {
      playerId_ = other.playerId_;
      turretItem_ = other.turretItem_ != null ? other.turretItem_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendTurretRequest Clone() {
      return new SendTurretRequest(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private long playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "turretItem" field.</summary>
    public const int TurretItemFieldNumber = 2;
    private global::SLG.bagBlockItem turretItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.bagBlockItem TurretItem {
      get { return turretItem_; }
      set {
        turretItem_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendTurretRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendTurretRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(TurretItem, other.TurretItem)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
      if (turretItem_ != null) hash ^= TurretItem.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (turretItem_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TurretItem);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      if (turretItem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TurretItem);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendTurretRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0L) {
        PlayerId = other.PlayerId;
      }
      if (other.turretItem_ != null) {
        if (turretItem_ == null) {
          TurretItem = new global::SLG.bagBlockItem();
        }
        TurretItem.MergeFrom(other.TurretItem);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 18: {
            if (turretItem_ == null) {
              TurretItem = new global::SLG.bagBlockItem();
            }
            input.ReadMessage(TurretItem);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GmGetNewTurret : pb::IMessage<GmGetNewTurret> {
    private static readonly pb::MessageParser<GmGetNewTurret> _parser = new pb::MessageParser<GmGetNewTurret>(() => new GmGetNewTurret());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GmGetNewTurret> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmGetNewTurret() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmGetNewTurret(GmGetNewTurret other) : this() {
      turretId_ = other.turretId_;
      turretLevel_ = other.turretLevel_;
      turretCount_ = other.turretCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GmGetNewTurret Clone() {
      return new GmGetNewTurret(this);
    }

    /// <summary>Field number for the "turretId" field.</summary>
    public const int TurretIdFieldNumber = 1;
    private int turretId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurretId {
      get { return turretId_; }
      set {
        turretId_ = value;
      }
    }

    /// <summary>Field number for the "turretLevel" field.</summary>
    public const int TurretLevelFieldNumber = 2;
    private int turretLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurretLevel {
      get { return turretLevel_; }
      set {
        turretLevel_ = value;
      }
    }

    /// <summary>Field number for the "turretCount" field.</summary>
    public const int TurretCountFieldNumber = 3;
    private int turretCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurretCount {
      get { return turretCount_; }
      set {
        turretCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GmGetNewTurret);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GmGetNewTurret other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurretId != other.TurretId) return false;
      if (TurretLevel != other.TurretLevel) return false;
      if (TurretCount != other.TurretCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurretId != 0) hash ^= TurretId.GetHashCode();
      if (TurretLevel != 0) hash ^= TurretLevel.GetHashCode();
      if (TurretCount != 0) hash ^= TurretCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurretId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TurretId);
      }
      if (TurretLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TurretLevel);
      }
      if (TurretCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TurretCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurretId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurretId);
      }
      if (TurretLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurretLevel);
      }
      if (TurretCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurretCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GmGetNewTurret other) {
      if (other == null) {
        return;
      }
      if (other.TurretId != 0) {
        TurretId = other.TurretId;
      }
      if (other.TurretLevel != 0) {
        TurretLevel = other.TurretLevel;
      }
      if (other.TurretCount != 0) {
        TurretCount = other.TurretCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TurretId = input.ReadInt32();
            break;
          }
          case 16: {
            TurretLevel = input.ReadInt32();
            break;
          }
          case 24: {
            TurretCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComposeInfo : pb::IMessage<ComposeInfo> {
    private static readonly pb::MessageParser<ComposeInfo> _parser = new pb::MessageParser<ComposeInfo>(() => new ComposeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComposeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeInfo(ComposeInfo other) : this() {
      turretType_ = other.turretType_;
      composeMaxLvl_ = other.composeMaxLvl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeInfo Clone() {
      return new ComposeInfo(this);
    }

    /// <summary>Field number for the "turretType" field.</summary>
    public const int TurretTypeFieldNumber = 1;
    private int turretType_;
    /// <summary>
    ///合成炮塔的种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurretType {
      get { return turretType_; }
      set {
        turretType_ = value;
      }
    }

    /// <summary>Field number for the "composeMaxLvl" field.</summary>
    public const int ComposeMaxLvlFieldNumber = 2;
    private int composeMaxLvl_;
    /// <summary>
    ///合成炮塔的最高等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComposeMaxLvl {
      get { return composeMaxLvl_; }
      set {
        composeMaxLvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComposeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComposeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TurretType != other.TurretType) return false;
      if (ComposeMaxLvl != other.ComposeMaxLvl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TurretType != 0) hash ^= TurretType.GetHashCode();
      if (ComposeMaxLvl != 0) hash ^= ComposeMaxLvl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TurretType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TurretType);
      }
      if (ComposeMaxLvl != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ComposeMaxLvl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TurretType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurretType);
      }
      if (ComposeMaxLvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComposeMaxLvl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComposeInfo other) {
      if (other == null) {
        return;
      }
      if (other.TurretType != 0) {
        TurretType = other.TurretType;
      }
      if (other.ComposeMaxLvl != 0) {
        ComposeMaxLvl = other.ComposeMaxLvl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TurretType = input.ReadInt32();
            break;
          }
          case 16: {
            ComposeMaxLvl = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComposeTurretInfo : pb::IMessage<ComposeTurretInfo> {
    private static readonly pb::MessageParser<ComposeTurretInfo> _parser = new pb::MessageParser<ComposeTurretInfo>(() => new ComposeTurretInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComposeTurretInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgBuildingReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeTurretInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeTurretInfo(ComposeTurretInfo other) : this() {
      blockId1_ = other.blockId1_;
      blockId2_ = other.blockId2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComposeTurretInfo Clone() {
      return new ComposeTurretInfo(this);
    }

    /// <summary>Field number for the "blockId1" field.</summary>
    public const int BlockId1FieldNumber = 1;
    private int blockId1_;
    /// <summary>
    ///合成后升级的炮塔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockId1 {
      get { return blockId1_; }
      set {
        blockId1_ = value;
      }
    }

    /// <summary>Field number for the "blockId2" field.</summary>
    public const int BlockId2FieldNumber = 2;
    private int blockId2_;
    /// <summary>
    ///合成时消耗掉的炮塔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockId2 {
      get { return blockId2_; }
      set {
        blockId2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComposeTurretInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComposeTurretInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockId1 != other.BlockId1) return false;
      if (BlockId2 != other.BlockId2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockId1 != 0) hash ^= BlockId1.GetHashCode();
      if (BlockId2 != 0) hash ^= BlockId2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockId1 != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockId1);
      }
      if (BlockId2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockId2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockId1);
      }
      if (BlockId2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockId2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComposeTurretInfo other) {
      if (other == null) {
        return;
      }
      if (other.BlockId1 != 0) {
        BlockId1 = other.BlockId1;
      }
      if (other.BlockId2 != 0) {
        BlockId2 = other.BlockId2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockId1 = input.ReadInt32();
            break;
          }
          case 16: {
            BlockId2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
