// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_chat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_chat.proto</summary>
  public static partial class MsgChatReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tc2dfY2hhdC5wcm90bxIDU0xHGgltc2cucHJvdG8aEG1zZ19mcmllbmQu",
            "cHJvdG8izQEKDlNpbmdsZUNoYXRJbmZvEh0KBGNLZXkYASABKAsyDy5TTEcu",
            "Q2hhbm5lbEtleRIPCgdncm91cElkGAIgASgFEg8KB2NvbnRlbnQYAyABKAkS",
            "EAoIc2VuZGVySWQYBCABKAQSDQoFYWltSWQYBSADKAQSEQoJdGltZVN0YW1w",
            "GAYgASgEEhAKCGluZm9UeXBlGAcgASgFEhIKCnNlbmRlck5hbWUYCCABKAkS",
            "DgoGb3BUeXBlGAkgASgNEhAKCGJsb2NrSWRzGAogAygEIi8KCUNoYXREYXRh",
            "cxIiCgVpdGVtcxgBIAMoCzITLlNMRy5TaW5nbGVDaGF0SW5mbyIaCgpDaGF0",
            "UmV0dXJuEgwKBGNvZGUYASABKAUibgoLQ2hhdFJlcXVlc3QSEwoLY2hhbm5l",
            "bFR5cGUYASABKAUSEgoKY2hhbm5lbEtleRgCIAEoBBIPCgdncm91cElkGAMg",
            "ASgFEhQKDGtlZXBDaGF0c051bRgEIAEoBRIPCgdyZXFTaXplGAUgASgFImgK",
            "EVBsYXllckluZm9Gb3JDaGF0EhAKCHBsYXllcklkGAEgASgEEg8KB3VuaW9u",
            "SWQYAiABKAQSEAoIZnJvbnRFbmQYAyABKAkSEAoIc2VydmVySWQYBCABKAUS",
            "DAoEbmFtZRgFIAEoCSIqCgtCbG9ja0lkTGlzdBIbCgZmcmllbmQYASADKAsy",
            "Cy5TTEcuRnJpZW5kInQKEVBsYXllckNoYW5uZWxEYXRhEi4KDmNoYW5uZWxS",
            "ZWNvcmRzGAEgAygLMhYuU0xHLlNpbmdsZUNoYW5uZWxEYXRhEiAKBmFpbUlk",
            "cxgCIAEoCzIQLlNMRy5VTG9uZ0lkTGlzdBINCgVmbGFncxgDIAMoBSLoAQoR",
            "U2luZ2xlQ2hhbm5lbERhdGESHQoEY0tleRgBIAEoCzIPLlNMRy5DaGFubmVs",
            "S2V5Eg8KB2dyb3VwSWQYAiABKAUSEQoJbmV3TXNnTnVtGAMgASgFEhMKC2xh",
            "c3RDb250ZW50GAQgASgJEg0KBWZsYWdzGAUgASgFEgwKBG5hbWUYBiABKAkS",
            "EQoJdGltZVN0YW1wGAcgASgEEiYKCW5vdGlmeU1zZxgIIAEoCzITLlNMRy5T",
            "aW5nbGVDaGF0SW5mbxIRCgljaGF0U3RhcnQYCSABKAUSEAoIY3JlYXRlSWQY",
            "CiABKAUiUAoSR3JvdXBPcGVyYXRpb25JbmZvEhsKBGdLZXkYASABKAsyDS5T",
            "TEcuR3JvdXBLZXkSDgoGb3BUeXBlGAIgASgFEg0KBWFpbUlkGAMgAygEIkkK",
            "CkJpdFNldEluZm8SGwoEZ0tleRgBIAEoCzINLlNMRy5Hcm91cEtleRIOCgZh",
            "aW1Qb3MYAiABKAUSDgoGYWltVmFsGAMgASgFIikKCkNoYW5uZWxLZXkSDQoF",
            "Y1R5cGUYASABKAUSDAoEY0tleRgCIAEoBCI6CghHcm91cEtleRIdCgRjS2V5",
            "GAEgASgLMg8uU0xHLkNoYW5uZWxLZXkSDwoHZ3JvdXBJZBgCIAEoBSJFCg9D",
            "cmVhdGVHcm91cEluZm8SEwoLY2hhbm5lbFR5cGUYASABKAUSDwoHbWVtYmVy",
            "cxgCIAMoBBIMCgRuYW1lGAMgASgJIjwKD01vZGlmeUdyb3VwSW5mbxIbCgRn",
            "S2V5GAEgASgLMg0uU0xHLkdyb3VwS2V5EgwKBG5hbWUYAiABKAkiVAoOVW5p",
            "b25DaGFubmVsT3ASEAoIcGxheWVySWQYASABKAQSDwoHdW5pb25JZBgCIAEo",
            "BBIOCgZvcFR5cGUYAyABKAUSDwoHb3RoZXJJZBgEIAEoBCJDChFHZXRNZW1i",
            "ZXJzSW5mb1JlcRIdCgRjS2V5GAEgASgLMg8uU0xHLkNoYW5uZWxLZXkSDwoH",
            "Z3JvdXBJZBgCIAEoBSIzChFHZXRNZW1iZXJzSW5mb1JzcBIeCgVwSW5mbxgB",
            "IAMoCzIPLlNMRy5QbGF5ZXJJbmZvIlgKClBsYXllckluZm8SEAoIcGxheWVy",
            "SWQYASABKAQSEgoKcGxheWVySWNvbhgCIAEoDRISCgpwbGF5ZXJOYW1lGAMg",
            "ASgJEhAKCGlzTWFzdGVyGAQgASgNIiQKEEdldE9uZVBsckZsYWdSZXESEAoI",
            "cGxheWVySWQYASABKAQiIAoQR2V0T25lUGxyRmxhZ1JzcBIMCgRmbGFnGAEg",
            "ASgFKkgKDk9wZXJhdGlvblRvQml0EgoKBk5vbmVPcBAAEgcKA1RvcBABEgkK",
            "BUJsb2NrEAISCgoGSWdub3JlEAMSCgoGRGVsZXRlEAQqmAEKEUNoYW5uZWxD",
            "aGFuZ2VUeXBlEg8KC0NoYW5nZV9Ob25lEAASDQoJSm9pbl9TZWxmEAESDwoL",
            "Sm9pbl9JbnZpdGUQAhINCglFeGl0X1NlbGYQAxINCglFeGl0X0tpY2sQBBIK",
            "CgZDcmVhdGUQBRILCgdEaXNtaXNzEAYSGwoXVW5pb25fTWVtYmVyX0pvYl9D",
            "aGFuZ2UQByq0AQoSR3JvdXBPcGVyYXRpb25UeXBlEhEKDUdyb3VwX09wU3Rh",
            "cnQQABINCglTZWxmX0V4aXQQARIPCgtJbnZpdGVfSm9pbhACEggKBEtpY2sQ",
            "AxIQCgxEaXNtaXNzR3JvdXAQBBISCg5Kb2luR3JvdXBfSW5pdBAFEhQKEEV4",
            "aXRfQW5kX0Rpc21pc3MQBhIOCgpOb3RpZnlfQWxsEAcSFQoRTW9kaWZ5X0dy",
            "b3VwX05hbWUQCCqLAQoSR3JvdXBEaXNtaXNzUmVhc29uEhcKE0Rpc21pc3NS",
            "ZWFzb25fU3RhcnQQABIRCg1NYXN0ZXJfQ2hvb3NlEAESDwoLTWFzdGVyX0xh",
            "Y2sQAhIPCgtHcm91cF9FbXB0eRADEhMKD05vdF9BY3RpdmVfTG9uZxAEEhIK",
            "DkNoYW5uZWxfUmVtb3ZlEAUqiQEKDkNoYXRfSW5mb19UeXBlEhYKEkNoYXRJ",
            "bmZvVHlwZV9CZWdpbhAAEgwKCFBfQ29tbW9uEAESDQoJUF9EeW5hbWljEAIS",
            "DwoLU19UaW1lU3RhbXAQAxIOCgpTX0dyb3VwX09wEAQSEAoMU19DaGFubmVs",
            "X09wEAUSDwoLUF9Ob3RpZnlBbGwQBmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SLG.MsgReflection.Descriptor, global::SLG.MsgFriendReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.OperationToBit), typeof(global::SLG.ChannelChangeType), typeof(global::SLG.GroupOperationType), typeof(global::SLG.GroupDismissReason), typeof(global::SLG.Chat_Info_Type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SingleChatInfo), global::SLG.SingleChatInfo.Parser, new[]{ "CKey", "GroupId", "Content", "SenderId", "AimId", "TimeStamp", "InfoType", "SenderName", "OpType", "BlockIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ChatDatas), global::SLG.ChatDatas.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ChatReturn), global::SLG.ChatReturn.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ChatRequest), global::SLG.ChatRequest.Parser, new[]{ "ChannelType", "ChannelKey", "GroupId", "KeepChatsNum", "ReqSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerInfoForChat), global::SLG.PlayerInfoForChat.Parser, new[]{ "PlayerId", "UnionId", "FrontEnd", "ServerId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BlockIdList), global::SLG.BlockIdList.Parser, new[]{ "Friend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerChannelData), global::SLG.PlayerChannelData.Parser, new[]{ "ChannelRecords", "AimIds", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SingleChannelData), global::SLG.SingleChannelData.Parser, new[]{ "CKey", "GroupId", "NewMsgNum", "LastContent", "Flags", "Name", "TimeStamp", "NotifyMsg", "ChatStart", "CreateId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GroupOperationInfo), global::SLG.GroupOperationInfo.Parser, new[]{ "GKey", "OpType", "AimId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BitSetInfo), global::SLG.BitSetInfo.Parser, new[]{ "GKey", "AimPos", "AimVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ChannelKey), global::SLG.ChannelKey.Parser, new[]{ "CType", "CKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GroupKey), global::SLG.GroupKey.Parser, new[]{ "CKey", "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CreateGroupInfo), global::SLG.CreateGroupInfo.Parser, new[]{ "ChannelType", "Members", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ModifyGroupInfo), global::SLG.ModifyGroupInfo.Parser, new[]{ "GKey", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionChannelOp), global::SLG.UnionChannelOp.Parser, new[]{ "PlayerId", "UnionId", "OpType", "OtherId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetMembersInfoReq), global::SLG.GetMembersInfoReq.Parser, new[]{ "CKey", "GroupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetMembersInfoRsp), global::SLG.GetMembersInfoRsp.Parser, new[]{ "PInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerInfo), global::SLG.PlayerInfo.Parser, new[]{ "PlayerId", "PlayerIcon", "PlayerName", "IsMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetOnePlrFlagReq), global::SLG.GetOnePlrFlagReq.Parser, new[]{ "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetOnePlrFlagRsp), global::SLG.GetOnePlrFlagRsp.Parser, new[]{ "Flag" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OperationToBit {
    /// <summary>
    ///对象：玩家/讨论组
    /// </summary>
    [pbr::OriginalName("NoneOp")] NoneOp = 0,
    /// <summary>
    ///置顶
    /// </summary>
    [pbr::OriginalName("Top")] Top = 1,
    /// <summary>
    ///屏蔽（不接收消息）
    /// </summary>
    [pbr::OriginalName("Block")] Block = 2,
    /// <summary>
    ///免打扰（接收但不提示）
    /// </summary>
    [pbr::OriginalName("Ignore")] Ignore = 3,
    /// <summary>
    ///删除（之后不发给客户端，再次显式请求后重置该位）
    /// </summary>
    [pbr::OriginalName("Delete")] Delete = 4,
  }

  public enum ChannelChangeType {
    [pbr::OriginalName("Change_None")] ChangeNone = 0,
    /// <summary>
    ///玩家发起
    /// </summary>
    [pbr::OriginalName("Join_Self")] JoinSelf = 1,
    /// <summary>
    ///a被b邀请加入
    /// </summary>
    [pbr::OriginalName("Join_Invite")] JoinInvite = 2,
    /// <summary>
    ///a自己退出
    /// </summary>
    [pbr::OriginalName("Exit_Self")] ExitSelf = 3,
    /// <summary>
    ///a被b踢出
    /// </summary>
    [pbr::OriginalName("Exit_Kick")] ExitKick = 4,
    /// <summary>
    ///系统进行
    /// </summary>
    [pbr::OriginalName("Create")] Create = 5,
    /// <summary>
    ///频道被解散
    /// </summary>
    [pbr::OriginalName("Dismiss")] Dismiss = 6,
    /// <summary>
    ///联盟频道相关
    /// </summary>
    [pbr::OriginalName("Union_Member_Job_Change")] UnionMemberJobChange = 7,
  }

  /// <summary>
  ///讨论组操作
  /// </summary>
  public enum GroupOperationType {
    [pbr::OriginalName("Group_OpStart")] GroupOpStart = 0,
    /// <summary>
    ///a主动退出讨论组
    /// </summary>
    [pbr::OriginalName("Self_Exit")] SelfExit = 1,
    /// <summary>
    ///a邀请b加入（不需要b选择拒绝/同意，直接加）
    /// </summary>
    [pbr::OriginalName("Invite_Join")] InviteJoin = 2,
    /// <summary>
    ///a踢b出讨论组
    /// </summary>
    [pbr::OriginalName("Kick")] Kick = 3,
    /// <summary>
    ///a解散讨论组
    /// </summary>
    [pbr::OriginalName("DismissGroup")] DismissGroup = 4,
    /// <summary>
    ///作为初始成员加入讨论组
    /// </summary>
    [pbr::OriginalName("JoinGroup_Init")] JoinGroupInit = 5,
    /// <summary>
    ///确认退出讨论组（最后一个（满足成为管理员条件的）成员退出后会导致讨论组被解散）
    /// </summary>
    [pbr::OriginalName("Exit_And_Dismiss")] ExitAndDismiss = 6,
    /// <summary>
    ///@所有人
    /// </summary>
    [pbr::OriginalName("Notify_All")] NotifyAll = 7,
    /// <summary>
    ///修改讨论组名字
    /// </summary>
    [pbr::OriginalName("Modify_Group_Name")] ModifyGroupName = 8,
  }

  /// <summary>
  ///讨论组解散原因
  /// </summary>
  public enum GroupDismissReason {
    [pbr::OriginalName("DismissReason_Start")] DismissReasonStart = 0,
    /// <summary>
    ///管理者选择解散
    /// </summary>
    [pbr::OriginalName("Master_Choose")] MasterChoose = 1,
    /// <summary>
    ///现有成员全不满足成为管理者的条件
    /// </summary>
    [pbr::OriginalName("Master_Lack")] MasterLack = 2,
    /// <summary>
    ///讨论组里没人了
    /// </summary>
    [pbr::OriginalName("Group_Empty")] GroupEmpty = 3,
    /// <summary>
    ///久不活跃，组被移除（给新的腾地方）
    /// </summary>
    [pbr::OriginalName("Not_Active_Long")] NotActiveLong = 4,
    /// <summary>
    ///所属频道被移除
    /// </summary>
    [pbr::OriginalName("Channel_Remove")] ChannelRemove = 5,
  }

  /// <summary>
  ///聊天消息类型
  /// </summary>
  public enum Chat_Info_Type {
    [pbr::OriginalName("ChatInfoType_Begin")] Begin = 0,
    [pbr::OriginalName("P_Common")] PCommon = 1,
    [pbr::OriginalName("P_Dynamic")] PDynamic = 2,
    [pbr::OriginalName("S_TimeStamp")] STimeStamp = 3,
    [pbr::OriginalName("S_Group_Op")] SGroupOp = 4,
    [pbr::OriginalName("S_Channel_Op")] SChannelOp = 5,
    /// <summary>
    ///@所有人       
    /// </summary>
    [pbr::OriginalName("P_NotifyAll")] PNotifyAll = 6,
  }

  #endregion

  #region Messages
  public sealed partial class SingleChatInfo : pb::IMessage<SingleChatInfo> {
    private static readonly pb::MessageParser<SingleChatInfo> _parser = new pb::MessageParser<SingleChatInfo>(() => new SingleChatInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleChatInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleChatInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleChatInfo(SingleChatInfo other) : this() {
      cKey_ = other.cKey_ != null ? other.cKey_.Clone() : null;
      groupId_ = other.groupId_;
      content_ = other.content_;
      senderId_ = other.senderId_;
      aimId_ = other.aimId_.Clone();
      timeStamp_ = other.timeStamp_;
      infoType_ = other.infoType_;
      senderName_ = other.senderName_;
      opType_ = other.opType_;
      blockIds_ = other.blockIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleChatInfo Clone() {
      return new SingleChatInfo(this);
    }

    /// <summary>Field number for the "cKey" field.</summary>
    public const int CKeyFieldNumber = 1;
    private global::SLG.ChannelKey cKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ChannelKey CKey {
      get { return cKey_; }
      set {
        cKey_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "senderId" field.</summary>
    public const int SenderIdFieldNumber = 4;
    private ulong senderId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SenderId {
      get { return senderId_; }
      set {
        senderId_ = value;
      }
    }

    /// <summary>Field number for the "aimId" field.</summary>
    public const int AimIdFieldNumber = 5;
    private static readonly pb::FieldCodec<ulong> _repeated_aimId_codec
        = pb::FieldCodec.ForUInt64(42);
    private readonly pbc::RepeatedField<ulong> aimId_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///@消息/传给客户端的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> AimId {
      get { return aimId_; }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private ulong timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "infoType" field.</summary>
    public const int InfoTypeFieldNumber = 7;
    private int infoType_;
    /// <summary>
    ///Chat_Info_Type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InfoType {
      get { return infoType_; }
      set {
        infoType_ = value;
      }
    }

    /// <summary>Field number for the "senderName" field.</summary>
    public const int SenderNameFieldNumber = 8;
    private string senderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 9;
    private uint opType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "blockIds" field.</summary>
    public const int BlockIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<ulong> _repeated_blockIds_codec
        = pb::FieldCodec.ForUInt64(82);
    private readonly pbc::RepeatedField<ulong> blockIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// 收不到该消息的玩家id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> BlockIds {
      get { return blockIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleChatInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleChatInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CKey, other.CKey)) return false;
      if (GroupId != other.GroupId) return false;
      if (Content != other.Content) return false;
      if (SenderId != other.SenderId) return false;
      if(!aimId_.Equals(other.aimId_)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (InfoType != other.InfoType) return false;
      if (SenderName != other.SenderName) return false;
      if (OpType != other.OpType) return false;
      if(!blockIds_.Equals(other.blockIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cKey_ != null) hash ^= CKey.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (SenderId != 0UL) hash ^= SenderId.GetHashCode();
      hash ^= aimId_.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (InfoType != 0) hash ^= InfoType.GetHashCode();
      if (SenderName.Length != 0) hash ^= SenderName.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      hash ^= blockIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CKey);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (SenderId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SenderId);
      }
      aimId_.WriteTo(output, _repeated_aimId_codec);
      if (TimeStamp != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TimeStamp);
      }
      if (InfoType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(InfoType);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SenderName);
      }
      if (OpType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(OpType);
      }
      blockIds_.WriteTo(output, _repeated_blockIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CKey);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (SenderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SenderId);
      }
      size += aimId_.CalculateSize(_repeated_aimId_codec);
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (InfoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InfoType);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OpType);
      }
      size += blockIds_.CalculateSize(_repeated_blockIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleChatInfo other) {
      if (other == null) {
        return;
      }
      if (other.cKey_ != null) {
        if (cKey_ == null) {
          CKey = new global::SLG.ChannelKey();
        }
        CKey.MergeFrom(other.CKey);
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.SenderId != 0UL) {
        SenderId = other.SenderId;
      }
      aimId_.Add(other.aimId_);
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.InfoType != 0) {
        InfoType = other.InfoType;
      }
      if (other.SenderName.Length != 0) {
        SenderName = other.SenderName;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      blockIds_.Add(other.blockIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cKey_ == null) {
              CKey = new global::SLG.ChannelKey();
            }
            input.ReadMessage(CKey);
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 32: {
            SenderId = input.ReadUInt64();
            break;
          }
          case 42:
          case 40: {
            aimId_.AddEntriesFrom(input, _repeated_aimId_codec);
            break;
          }
          case 48: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 56: {
            InfoType = input.ReadInt32();
            break;
          }
          case 66: {
            SenderName = input.ReadString();
            break;
          }
          case 72: {
            OpType = input.ReadUInt32();
            break;
          }
          case 82:
          case 80: {
            blockIds_.AddEntriesFrom(input, _repeated_blockIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatDatas : pb::IMessage<ChatDatas> {
    private static readonly pb::MessageParser<ChatDatas> _parser = new pb::MessageParser<ChatDatas>(() => new ChatDatas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatDatas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatDatas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatDatas(ChatDatas other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatDatas Clone() {
      return new ChatDatas(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.SingleChatInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.SingleChatInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.SingleChatInfo> items_ = new pbc::RepeatedField<global::SLG.SingleChatInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.SingleChatInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatDatas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatDatas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatDatas other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatReturn : pb::IMessage<ChatReturn> {
    private static readonly pb::MessageParser<ChatReturn> _parser = new pb::MessageParser<ChatReturn>(() => new ChatReturn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatReturn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatReturn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatReturn(ChatReturn other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatReturn Clone() {
      return new ChatReturn(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatReturn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatReturn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatReturn other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatRequest : pb::IMessage<ChatRequest> {
    private static readonly pb::MessageParser<ChatRequest> _parser = new pb::MessageParser<ChatRequest>(() => new ChatRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatRequest(ChatRequest other) : this() {
      channelType_ = other.channelType_;
      channelKey_ = other.channelKey_;
      groupId_ = other.groupId_;
      keepChatsNum_ = other.keepChatsNum_;
      reqSize_ = other.reqSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatRequest Clone() {
      return new ChatRequest(this);
    }

    /// <summary>Field number for the "channelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private int channelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "channelKey" field.</summary>
    public const int ChannelKeyFieldNumber = 2;
    private ulong channelKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelKey {
      get { return channelKey_; }
      set {
        channelKey_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 3;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "keepChatsNum" field.</summary>
    public const int KeepChatsNumFieldNumber = 4;
    private int keepChatsNum_;
    /// <summary>
    ///1.x>=0 : 正常获取以当前聊天数组 往前x条 的位置为 结尾 的若干条记录  2.x&lt;0 : 获取以最早的 未读@消息 开始往后 -(x-1) 条的位置为 起始 的若干条记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepChatsNum {
      get { return keepChatsNum_; }
      set {
        keepChatsNum_ = value;
      }
    }

    /// <summary>Field number for the "reqSize" field.</summary>
    public const int ReqSizeFieldNumber = 5;
    private int reqSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReqSize {
      get { return reqSize_; }
      set {
        reqSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if (ChannelKey != other.ChannelKey) return false;
      if (GroupId != other.GroupId) return false;
      if (KeepChatsNum != other.KeepChatsNum) return false;
      if (ReqSize != other.ReqSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
      if (ChannelKey != 0UL) hash ^= ChannelKey.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (KeepChatsNum != 0) hash ^= KeepChatsNum.GetHashCode();
      if (ReqSize != 0) hash ^= ReqSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelType);
      }
      if (ChannelKey != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChannelKey);
      }
      if (GroupId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupId);
      }
      if (KeepChatsNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(KeepChatsNum);
      }
      if (ReqSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReqSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelType);
      }
      if (ChannelKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelKey);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (KeepChatsNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepChatsNum);
      }
      if (ReqSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReqSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChannelType != 0) {
        ChannelType = other.ChannelType;
      }
      if (other.ChannelKey != 0UL) {
        ChannelKey = other.ChannelKey;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.KeepChatsNum != 0) {
        KeepChatsNum = other.KeepChatsNum;
      }
      if (other.ReqSize != 0) {
        ReqSize = other.ReqSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelKey = input.ReadUInt64();
            break;
          }
          case 24: {
            GroupId = input.ReadInt32();
            break;
          }
          case 32: {
            KeepChatsNum = input.ReadInt32();
            break;
          }
          case 40: {
            ReqSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfoForChat : pb::IMessage<PlayerInfoForChat> {
    private static readonly pb::MessageParser<PlayerInfoForChat> _parser = new pb::MessageParser<PlayerInfoForChat>(() => new PlayerInfoForChat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfoForChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoForChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoForChat(PlayerInfoForChat other) : this() {
      playerId_ = other.playerId_;
      unionId_ = other.unionId_;
      frontEnd_ = other.frontEnd_;
      serverId_ = other.serverId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfoForChat Clone() {
      return new PlayerInfoForChat(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private ulong unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "frontEnd" field.</summary>
    public const int FrontEndFieldNumber = 3;
    private string frontEnd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrontEnd {
      get { return frontEnd_; }
      set {
        frontEnd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfoForChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfoForChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (UnionId != other.UnionId) return false;
      if (FrontEnd != other.FrontEnd) return false;
      if (ServerId != other.ServerId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (FrontEnd.Length != 0) hash ^= FrontEnd.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (UnionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnionId);
      }
      if (FrontEnd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrontEnd);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (FrontEnd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrontEnd);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfoForChat other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.FrontEnd.Length != 0) {
        FrontEnd = other.FrontEnd;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 26: {
            FrontEnd = input.ReadString();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockIdList : pb::IMessage<BlockIdList> {
    private static readonly pb::MessageParser<BlockIdList> _parser = new pb::MessageParser<BlockIdList>(() => new BlockIdList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockIdList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockIdList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockIdList(BlockIdList other) : this() {
      friend_ = other.friend_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockIdList Clone() {
      return new BlockIdList(this);
    }

    /// <summary>Field number for the "friend" field.</summary>
    public const int FriendFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.Friend> _repeated_friend_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.Friend.Parser);
    private readonly pbc::RepeatedField<global::SLG.Friend> friend_ = new pbc::RepeatedField<global::SLG.Friend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.Friend> Friend {
      get { return friend_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockIdList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockIdList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!friend_.Equals(other.friend_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= friend_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      friend_.WriteTo(output, _repeated_friend_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += friend_.CalculateSize(_repeated_friend_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockIdList other) {
      if (other == null) {
        return;
      }
      friend_.Add(other.friend_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            friend_.AddEntriesFrom(input, _repeated_friend_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerChannelData : pb::IMessage<PlayerChannelData> {
    private static readonly pb::MessageParser<PlayerChannelData> _parser = new pb::MessageParser<PlayerChannelData>(() => new PlayerChannelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerChannelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChannelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChannelData(PlayerChannelData other) : this() {
      channelRecords_ = other.channelRecords_.Clone();
      aimIds_ = other.aimIds_ != null ? other.aimIds_.Clone() : null;
      flags_ = other.flags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerChannelData Clone() {
      return new PlayerChannelData(this);
    }

    /// <summary>Field number for the "channelRecords" field.</summary>
    public const int ChannelRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.SingleChannelData> _repeated_channelRecords_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.SingleChannelData.Parser);
    private readonly pbc::RepeatedField<global::SLG.SingleChannelData> channelRecords_ = new pbc::RepeatedField<global::SLG.SingleChannelData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.SingleChannelData> ChannelRecords {
      get { return channelRecords_; }
    }

    /// <summary>Field number for the "aimIds" field.</summary>
    public const int AimIdsFieldNumber = 2;
    private global::SLG.ULongIdList aimIds_;
    /// <summary>
    ///设置了状态位的目标玩家uid列表，与下面的flags顺序保持一致
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ULongIdList AimIds {
      get { return aimIds_; }
      set {
        aimIds_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_flags_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> flags_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///对玩家设置的状态值（位与OperationToBit对应）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Flags {
      get { return flags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerChannelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerChannelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelRecords_.Equals(other.channelRecords_)) return false;
      if (!object.Equals(AimIds, other.AimIds)) return false;
      if(!flags_.Equals(other.flags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelRecords_.GetHashCode();
      if (aimIds_ != null) hash ^= AimIds.GetHashCode();
      hash ^= flags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelRecords_.WriteTo(output, _repeated_channelRecords_codec);
      if (aimIds_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AimIds);
      }
      flags_.WriteTo(output, _repeated_flags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelRecords_.CalculateSize(_repeated_channelRecords_codec);
      if (aimIds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AimIds);
      }
      size += flags_.CalculateSize(_repeated_flags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerChannelData other) {
      if (other == null) {
        return;
      }
      channelRecords_.Add(other.channelRecords_);
      if (other.aimIds_ != null) {
        if (aimIds_ == null) {
          AimIds = new global::SLG.ULongIdList();
        }
        AimIds.MergeFrom(other.AimIds);
      }
      flags_.Add(other.flags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channelRecords_.AddEntriesFrom(input, _repeated_channelRecords_codec);
            break;
          }
          case 18: {
            if (aimIds_ == null) {
              AimIds = new global::SLG.ULongIdList();
            }
            input.ReadMessage(AimIds);
            break;
          }
          case 26:
          case 24: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleChannelData : pb::IMessage<SingleChannelData> {
    private static readonly pb::MessageParser<SingleChannelData> _parser = new pb::MessageParser<SingleChannelData>(() => new SingleChannelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleChannelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleChannelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleChannelData(SingleChannelData other) : this() {
      cKey_ = other.cKey_ != null ? other.cKey_.Clone() : null;
      groupId_ = other.groupId_;
      newMsgNum_ = other.newMsgNum_;
      lastContent_ = other.lastContent_;
      flags_ = other.flags_;
      name_ = other.name_;
      timeStamp_ = other.timeStamp_;
      notifyMsg_ = other.notifyMsg_ != null ? other.notifyMsg_.Clone() : null;
      chatStart_ = other.chatStart_;
      createId_ = other.createId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleChannelData Clone() {
      return new SingleChannelData(this);
    }

    /// <summary>Field number for the "cKey" field.</summary>
    public const int CKeyFieldNumber = 1;
    private global::SLG.ChannelKey cKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ChannelKey CKey {
      get { return cKey_; }
      set {
        cKey_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "newMsgNum" field.</summary>
    public const int NewMsgNumFieldNumber = 3;
    private int newMsgNum_;
    /// <summary>
    ///未读消息数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewMsgNum {
      get { return newMsgNum_; }
      set {
        newMsgNum_ = value;
      }
    }

    /// <summary>Field number for the "lastContent" field.</summary>
    public const int LastContentFieldNumber = 4;
    private string lastContent_ = "";
    /// <summary>
    ///最新一条消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastContent {
      get { return lastContent_; }
      set {
        lastContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 5;
    private int flags_;
    /// <summary>
    ///玩家对该频道/讨论组设置的标记位：屏蔽block|删除delete|置顶top|...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    ///讨论组名/私聊频道即对方角色名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 7;
    private ulong timeStamp_;
    /// <summary>
    ///最新一条消息时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "notifyMsg" field.</summary>
    public const int NotifyMsgFieldNumber = 8;
    private global::SLG.SingleChatInfo notifyMsg_;
    /// <summary>
    ///最早的一条可读且未读的被@聊天信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.SingleChatInfo NotifyMsg {
      get { return notifyMsg_; }
      set {
        notifyMsg_ = value;
      }
    }

    /// <summary>Field number for the "chatStart" field.</summary>
    public const int ChatStartFieldNumber = 9;
    private int chatStart_;
    /// <summary>
    ///标识该玩家实际获取聊天数据的起始位置((x == -1) &amp;&amp; (deleteBit == 1)) => not show in list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChatStart {
      get { return chatStart_; }
      set {
        chatStart_ = value;
      }
    }

    /// <summary>Field number for the "createId" field.</summary>
    public const int CreateIdFieldNumber = 10;
    private int createId_;
    /// <summary>
    ///创建者Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CreateId {
      get { return createId_; }
      set {
        createId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleChannelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleChannelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CKey, other.CKey)) return false;
      if (GroupId != other.GroupId) return false;
      if (NewMsgNum != other.NewMsgNum) return false;
      if (LastContent != other.LastContent) return false;
      if (Flags != other.Flags) return false;
      if (Name != other.Name) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (!object.Equals(NotifyMsg, other.NotifyMsg)) return false;
      if (ChatStart != other.ChatStart) return false;
      if (CreateId != other.CreateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cKey_ != null) hash ^= CKey.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (NewMsgNum != 0) hash ^= NewMsgNum.GetHashCode();
      if (LastContent.Length != 0) hash ^= LastContent.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TimeStamp != 0UL) hash ^= TimeStamp.GetHashCode();
      if (notifyMsg_ != null) hash ^= NotifyMsg.GetHashCode();
      if (ChatStart != 0) hash ^= ChatStart.GetHashCode();
      if (CreateId != 0) hash ^= CreateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CKey);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (NewMsgNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NewMsgNum);
      }
      if (LastContent.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastContent);
      }
      if (Flags != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Flags);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (TimeStamp != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(TimeStamp);
      }
      if (notifyMsg_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NotifyMsg);
      }
      if (ChatStart != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ChatStart);
      }
      if (CreateId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CreateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CKey);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (NewMsgNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewMsgNum);
      }
      if (LastContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastContent);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TimeStamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeStamp);
      }
      if (notifyMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotifyMsg);
      }
      if (ChatStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChatStart);
      }
      if (CreateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleChannelData other) {
      if (other == null) {
        return;
      }
      if (other.cKey_ != null) {
        if (cKey_ == null) {
          CKey = new global::SLG.ChannelKey();
        }
        CKey.MergeFrom(other.CKey);
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.NewMsgNum != 0) {
        NewMsgNum = other.NewMsgNum;
      }
      if (other.LastContent.Length != 0) {
        LastContent = other.LastContent;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TimeStamp != 0UL) {
        TimeStamp = other.TimeStamp;
      }
      if (other.notifyMsg_ != null) {
        if (notifyMsg_ == null) {
          NotifyMsg = new global::SLG.SingleChatInfo();
        }
        NotifyMsg.MergeFrom(other.NotifyMsg);
      }
      if (other.ChatStart != 0) {
        ChatStart = other.ChatStart;
      }
      if (other.CreateId != 0) {
        CreateId = other.CreateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cKey_ == null) {
              CKey = new global::SLG.ChannelKey();
            }
            input.ReadMessage(CKey);
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 24: {
            NewMsgNum = input.ReadInt32();
            break;
          }
          case 34: {
            LastContent = input.ReadString();
            break;
          }
          case 40: {
            Flags = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            TimeStamp = input.ReadUInt64();
            break;
          }
          case 66: {
            if (notifyMsg_ == null) {
              NotifyMsg = new global::SLG.SingleChatInfo();
            }
            input.ReadMessage(NotifyMsg);
            break;
          }
          case 72: {
            ChatStart = input.ReadInt32();
            break;
          }
          case 80: {
            CreateId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupOperationInfo : pb::IMessage<GroupOperationInfo> {
    private static readonly pb::MessageParser<GroupOperationInfo> _parser = new pb::MessageParser<GroupOperationInfo>(() => new GroupOperationInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupOperationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupOperationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupOperationInfo(GroupOperationInfo other) : this() {
      gKey_ = other.gKey_ != null ? other.gKey_.Clone() : null;
      opType_ = other.opType_;
      aimId_ = other.aimId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupOperationInfo Clone() {
      return new GroupOperationInfo(this);
    }

    /// <summary>Field number for the "gKey" field.</summary>
    public const int GKeyFieldNumber = 1;
    private global::SLG.GroupKey gKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.GroupKey GKey {
      get { return gKey_; }
      set {
        gKey_ = value;
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 2;
    private int opType_;
    /// <summary>
    ///GroupOperationType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "aimId" field.</summary>
    public const int AimIdFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_aimId_codec
        = pb::FieldCodec.ForUInt64(26);
    private readonly pbc::RepeatedField<ulong> aimId_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> AimId {
      get { return aimId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupOperationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupOperationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GKey, other.GKey)) return false;
      if (OpType != other.OpType) return false;
      if(!aimId_.Equals(other.aimId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gKey_ != null) hash ^= GKey.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      hash ^= aimId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GKey);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OpType);
      }
      aimId_.WriteTo(output, _repeated_aimId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GKey);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      size += aimId_.CalculateSize(_repeated_aimId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupOperationInfo other) {
      if (other == null) {
        return;
      }
      if (other.gKey_ != null) {
        if (gKey_ == null) {
          GKey = new global::SLG.GroupKey();
        }
        GKey.MergeFrom(other.GKey);
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      aimId_.Add(other.aimId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gKey_ == null) {
              GKey = new global::SLG.GroupKey();
            }
            input.ReadMessage(GKey);
            break;
          }
          case 16: {
            OpType = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            aimId_.AddEntriesFrom(input, _repeated_aimId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BitSetInfo : pb::IMessage<BitSetInfo> {
    private static readonly pb::MessageParser<BitSetInfo> _parser = new pb::MessageParser<BitSetInfo>(() => new BitSetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BitSetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitSetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitSetInfo(BitSetInfo other) : this() {
      gKey_ = other.gKey_ != null ? other.gKey_.Clone() : null;
      aimPos_ = other.aimPos_;
      aimVal_ = other.aimVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitSetInfo Clone() {
      return new BitSetInfo(this);
    }

    /// <summary>Field number for the "gKey" field.</summary>
    public const int GKeyFieldNumber = 1;
    private global::SLG.GroupKey gKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.GroupKey GKey {
      get { return gKey_; }
      set {
        gKey_ = value;
      }
    }

    /// <summary>Field number for the "aimPos" field.</summary>
    public const int AimPosFieldNumber = 2;
    private int aimPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AimPos {
      get { return aimPos_; }
      set {
        aimPos_ = value;
      }
    }

    /// <summary>Field number for the "aimVal" field.</summary>
    public const int AimValFieldNumber = 3;
    private int aimVal_;
    /// <summary>
    ///0/1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AimVal {
      get { return aimVal_; }
      set {
        aimVal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BitSetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BitSetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GKey, other.GKey)) return false;
      if (AimPos != other.AimPos) return false;
      if (AimVal != other.AimVal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gKey_ != null) hash ^= GKey.GetHashCode();
      if (AimPos != 0) hash ^= AimPos.GetHashCode();
      if (AimVal != 0) hash ^= AimVal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GKey);
      }
      if (AimPos != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AimPos);
      }
      if (AimVal != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AimVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GKey);
      }
      if (AimPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AimPos);
      }
      if (AimVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AimVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BitSetInfo other) {
      if (other == null) {
        return;
      }
      if (other.gKey_ != null) {
        if (gKey_ == null) {
          GKey = new global::SLG.GroupKey();
        }
        GKey.MergeFrom(other.GKey);
      }
      if (other.AimPos != 0) {
        AimPos = other.AimPos;
      }
      if (other.AimVal != 0) {
        AimVal = other.AimVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gKey_ == null) {
              GKey = new global::SLG.GroupKey();
            }
            input.ReadMessage(GKey);
            break;
          }
          case 16: {
            AimPos = input.ReadInt32();
            break;
          }
          case 24: {
            AimVal = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelKey : pb::IMessage<ChannelKey> {
    private static readonly pb::MessageParser<ChannelKey> _parser = new pb::MessageParser<ChannelKey>(() => new ChannelKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelKey(ChannelKey other) : this() {
      cType_ = other.cType_;
      cKey_ = other.cKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelKey Clone() {
      return new ChannelKey(this);
    }

    /// <summary>Field number for the "cType" field.</summary>
    public const int CTypeFieldNumber = 1;
    private int cType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CType {
      get { return cType_; }
      set {
        cType_ = value;
      }
    }

    /// <summary>Field number for the "cKey" field.</summary>
    public const int CKeyFieldNumber = 2;
    private ulong cKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CKey {
      get { return cKey_; }
      set {
        cKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CType != other.CType) return false;
      if (CKey != other.CKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CType != 0) hash ^= CType.GetHashCode();
      if (CKey != 0UL) hash ^= CKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CType);
      }
      if (CKey != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CType);
      }
      if (CKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelKey other) {
      if (other == null) {
        return;
      }
      if (other.CType != 0) {
        CType = other.CType;
      }
      if (other.CKey != 0UL) {
        CKey = other.CKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CType = input.ReadInt32();
            break;
          }
          case 16: {
            CKey = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GroupKey : pb::IMessage<GroupKey> {
    private static readonly pb::MessageParser<GroupKey> _parser = new pb::MessageParser<GroupKey>(() => new GroupKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupKey(GroupKey other) : this() {
      cKey_ = other.cKey_ != null ? other.cKey_.Clone() : null;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupKey Clone() {
      return new GroupKey(this);
    }

    /// <summary>Field number for the "cKey" field.</summary>
    public const int CKeyFieldNumber = 1;
    private global::SLG.ChannelKey cKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ChannelKey CKey {
      get { return cKey_; }
      set {
        cKey_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CKey, other.CKey)) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cKey_ != null) hash ^= CKey.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CKey);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CKey);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupKey other) {
      if (other == null) {
        return;
      }
      if (other.cKey_ != null) {
        if (cKey_ == null) {
          CKey = new global::SLG.ChannelKey();
        }
        CKey.MergeFrom(other.CKey);
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cKey_ == null) {
              CKey = new global::SLG.ChannelKey();
            }
            input.ReadMessage(CKey);
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateGroupInfo : pb::IMessage<CreateGroupInfo> {
    private static readonly pb::MessageParser<CreateGroupInfo> _parser = new pb::MessageParser<CreateGroupInfo>(() => new CreateGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupInfo(CreateGroupInfo other) : this() {
      channelType_ = other.channelType_;
      members_ = other.members_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateGroupInfo Clone() {
      return new CreateGroupInfo(this);
    }

    /// <summary>Field number for the "channelType" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private int channelType_;
    /// <summary>
    ///在哪个频道下创建讨论组（世界-普通/联盟）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_members_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> members_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///讨论组成员id（包括创建者的）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Members {
      get { return members_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///讨论组名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelType != other.ChannelType) return false;
      if(!members_.Equals(other.members_)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelType != 0) hash ^= ChannelType.GetHashCode();
      hash ^= members_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelType);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelType);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.ChannelType != 0) {
        ChannelType = other.ChannelType;
      }
      members_.Add(other.members_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelType = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModifyGroupInfo : pb::IMessage<ModifyGroupInfo> {
    private static readonly pb::MessageParser<ModifyGroupInfo> _parser = new pb::MessageParser<ModifyGroupInfo>(() => new ModifyGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupInfo(ModifyGroupInfo other) : this() {
      gKey_ = other.gKey_ != null ? other.gKey_.Clone() : null;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyGroupInfo Clone() {
      return new ModifyGroupInfo(this);
    }

    /// <summary>Field number for the "gKey" field.</summary>
    public const int GKeyFieldNumber = 1;
    private global::SLG.GroupKey gKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.GroupKey GKey {
      get { return gKey_; }
      set {
        gKey_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///讨论组名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GKey, other.GKey)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gKey_ != null) hash ^= GKey.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GKey);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GKey);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.gKey_ != null) {
        if (gKey_ == null) {
          GKey = new global::SLG.GroupKey();
        }
        GKey.MergeFrom(other.GKey);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gKey_ == null) {
              GKey = new global::SLG.GroupKey();
            }
            input.ReadMessage(GKey);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnionChannelOp : pb::IMessage<UnionChannelOp> {
    private static readonly pb::MessageParser<UnionChannelOp> _parser = new pb::MessageParser<UnionChannelOp>(() => new UnionChannelOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionChannelOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionChannelOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionChannelOp(UnionChannelOp other) : this() {
      playerId_ = other.playerId_;
      unionId_ = other.unionId_;
      opType_ = other.opType_;
      otherId_ = other.otherId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionChannelOp Clone() {
      return new UnionChannelOp(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    ///操作者uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private ulong unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "opType" field.</summary>
    public const int OpTypeFieldNumber = 3;
    private int opType_;
    /// <summary>
    ///ChannelChangeType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    /// <summary>Field number for the "otherId" field.</summary>
    public const int OtherIdFieldNumber = 4;
    private ulong otherId_;
    /// <summary>
    ///（邀请加入/踢出）对象uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherId {
      get { return otherId_; }
      set {
        otherId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionChannelOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionChannelOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (UnionId != other.UnionId) return false;
      if (OpType != other.OpType) return false;
      if (OtherId != other.OtherId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      if (OtherId != 0UL) hash ^= OtherId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (UnionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnionId);
      }
      if (OpType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OpType);
      }
      if (OtherId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OtherId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OpType);
      }
      if (OtherId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionChannelOp other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
      if (other.OtherId != 0UL) {
        OtherId = other.OtherId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 24: {
            OpType = input.ReadInt32();
            break;
          }
          case 32: {
            OtherId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMembersInfoReq : pb::IMessage<GetMembersInfoReq> {
    private static readonly pb::MessageParser<GetMembersInfoReq> _parser = new pb::MessageParser<GetMembersInfoReq>(() => new GetMembersInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMembersInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMembersInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMembersInfoReq(GetMembersInfoReq other) : this() {
      cKey_ = other.cKey_ != null ? other.cKey_.Clone() : null;
      groupId_ = other.groupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMembersInfoReq Clone() {
      return new GetMembersInfoReq(this);
    }

    /// <summary>Field number for the "cKey" field.</summary>
    public const int CKeyFieldNumber = 1;
    private global::SLG.ChannelKey cKey_;
    /// <summary>
    /// 所在频道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ChannelKey CKey {
      get { return cKey_; }
      set {
        cKey_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    /// <summary>
    /// 讨论组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMembersInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMembersInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CKey, other.CKey)) return false;
      if (GroupId != other.GroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cKey_ != null) hash ^= CKey.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cKey_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CKey);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CKey);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMembersInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.cKey_ != null) {
        if (cKey_ == null) {
          CKey = new global::SLG.ChannelKey();
        }
        CKey.MergeFrom(other.CKey);
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cKey_ == null) {
              CKey = new global::SLG.ChannelKey();
            }
            input.ReadMessage(CKey);
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMembersInfoRsp : pb::IMessage<GetMembersInfoRsp> {
    private static readonly pb::MessageParser<GetMembersInfoRsp> _parser = new pb::MessageParser<GetMembersInfoRsp>(() => new GetMembersInfoRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMembersInfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMembersInfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMembersInfoRsp(GetMembersInfoRsp other) : this() {
      pInfo_ = other.pInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMembersInfoRsp Clone() {
      return new GetMembersInfoRsp(this);
    }

    /// <summary>Field number for the "pInfo" field.</summary>
    public const int PInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.PlayerInfo> _repeated_pInfo_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.PlayerInfo> pInfo_ = new pbc::RepeatedField<global::SLG.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PlayerInfo> PInfo {
      get { return pInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMembersInfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMembersInfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pInfo_.Equals(other.pInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pInfo_.WriteTo(output, _repeated_pInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pInfo_.CalculateSize(_repeated_pInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMembersInfoRsp other) {
      if (other == null) {
        return;
      }
      pInfo_.Add(other.pInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pInfo_.AddEntriesFrom(input, _repeated_pInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      playerId_ = other.playerId_;
      playerIcon_ = other.playerIcon_;
      playerName_ = other.playerName_;
      isMaster_ = other.isMaster_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "playerIcon" field.</summary>
    public const int PlayerIconFieldNumber = 2;
    private uint playerIcon_;
    /// <summary>
    ///玩家头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlayerIcon {
      get { return playerIcon_; }
      set {
        playerIcon_ = value;
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 3;
    private string playerName_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isMaster" field.</summary>
    public const int IsMasterFieldNumber = 4;
    private uint isMaster_;
    /// <summary>
    /// 是否为管理员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsMaster {
      get { return isMaster_; }
      set {
        isMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (PlayerIcon != other.PlayerIcon) return false;
      if (PlayerName != other.PlayerName) return false;
      if (IsMaster != other.IsMaster) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (PlayerIcon != 0) hash ^= PlayerIcon.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (IsMaster != 0) hash ^= IsMaster.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (PlayerIcon != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PlayerIcon);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlayerName);
      }
      if (IsMaster != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(IsMaster);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (PlayerIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlayerIcon);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (IsMaster != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsMaster);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerIcon != 0) {
        PlayerIcon = other.PlayerIcon;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.IsMaster != 0) {
        IsMaster = other.IsMaster;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            PlayerIcon = input.ReadUInt32();
            break;
          }
          case 26: {
            PlayerName = input.ReadString();
            break;
          }
          case 32: {
            IsMaster = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOnePlrFlagReq : pb::IMessage<GetOnePlrFlagReq> {
    private static readonly pb::MessageParser<GetOnePlrFlagReq> _parser = new pb::MessageParser<GetOnePlrFlagReq>(() => new GetOnePlrFlagReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOnePlrFlagReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOnePlrFlagReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOnePlrFlagReq(GetOnePlrFlagReq other) : this() {
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOnePlrFlagReq Clone() {
      return new GetOnePlrFlagReq(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOnePlrFlagReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOnePlrFlagReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOnePlrFlagReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetOnePlrFlagRsp : pb::IMessage<GetOnePlrFlagRsp> {
    private static readonly pb::MessageParser<GetOnePlrFlagRsp> _parser = new pb::MessageParser<GetOnePlrFlagRsp>(() => new GetOnePlrFlagRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOnePlrFlagRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgChatReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOnePlrFlagRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOnePlrFlagRsp(GetOnePlrFlagRsp other) : this() {
      flag_ = other.flag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOnePlrFlagRsp Clone() {
      return new GetOnePlrFlagRsp(this);
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 1;
    private int flag_;
    /// <summary>
    /// 与OperationToBit对应
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOnePlrFlagRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOnePlrFlagRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Flag != other.Flag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Flag != 0) hash ^= Flag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Flag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Flag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOnePlrFlagRsp other) {
      if (other == null) {
        return;
      }
      if (other.Flag != 0) {
        Flag = other.Flag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Flag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
