// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_player.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_player.proto</summary>
  public static partial class MsgPlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_player.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgPlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBtc2dfcGxheWVyLnByb3RvEgNTTEcaCW1zZy5wcm90byKxAwoOUGxheWVy",
            "QmFzZUluZm8SDwoHcm9sZV9pZBgBIAEoBBIRCglzZXJ2ZXJfaWQYAiABKA0S",
            "DgoGYWNjX2lkGAMgASgJEhEKCXJvbGVfbmFtZRgEIAEoCRINCgVsZXZlbBgF",
            "IAEoDRIMCgRmb29kGAYgASgFEg0KBXN0b25lGAcgASgFEgwKBGlyb24YCCAB",
            "KAUSDwoHY3J5c3RhbBgJIAEoBRIMCgRnb2xkGAogASgFEhQKDGFjdGlvbl90",
            "b2tlbhgLIAEoBRIyCg1jb21iYXRfZWZmZWN0GAwgASgLMhsuU0xHLlBsYXll",
            "ckNvbWJhdEVmZmVjdEluZm8SEgoKdHJhZGVsZXZlbBgNIAEoBRIRCgl0cmFk",
            "ZWdvbGQYDiABKAUSEgoKbmVhcnBvcnRJZBgPIAEoBRISCgpzdW1tb250aW1l",
            "GBAgASgEEhgKEGtpbGxtb25zdGVybGV2ZWwYESABKAUSGAoQa2lsbG91dHBv",
            "c3RsZXZlbBgSIAEoBRIMCgR0aWxpGBMgASgNEhAKCHVuaW9uam9iGBQgASgN",
            "EhIKCnVuaW9udGl0bGUYFSABKA0iPAoOUGxheWVyUmVzb3VyY2USHQoCdHkY",
            "ASABKA4yES5TTEcuUmVzb3VyY2VUeXBlEgsKA2NudBgCIAEoBSI2ChJQbGF5",
            "ZXJSZXNvdXJjZUluZm8SIAoDcmVzGAEgAygLMhMuU0xHLlBsYXllclJlc291",
            "cmNlIigKClBsYXllckhlcm8SCgoCaWQYASABKA0SDgoGc3RhdHVzGAIgASgN",
            "Ii8KDlBsYXllckhlcm9JbmZvEh0KBGhlcm8YASADKAsyDy5TTEcuUGxheWVy",
            "SGVybyJ2Cg1IZXJvTGV2ZWxJbmZvEgoKAmlkGAEgASgFEg0KBWxldmVsGAIg",
            "ASgFEgsKA2V4cBgDIAEoBBIMCgRzdGFyGAQgASgFEg0KBXN0YWdlGAUgASgF",
            "Eg4KBnN0YXR1cxgGIAEoDRIQCghza2lsbElkcxgHIAMoBSI3ChFQbGF5ZXJI",
            "ZXJvZXNMZXZlbBIiCgZoZXJvZXMYASADKAsyEi5TTEcuSGVyb0xldmVsSW5m",
            "byI6Cg1QbGF5ZXJTb2xkaWVyEgoKAmlkGAEgASgNEg4KBnN0YXR1cxgCIAEo",
            "DRINCgVjb3VudBgDIAEoDSI4ChFQbGF5ZXJTb2xkaWVySW5mbxIjCgdzb2xk",
            "aWVyGAEgAygLMhIuU0xHLlBsYXllclNvbGRpZXIiVwoRUGxheWVyQWxsQmFy",
            "cmllcnMSEAoIcGxheWVySWQYASABKAQSMAoNYmFycmllc0dyb3VwcxgCIAMo",
            "CzIZLlNMRy5PbmVCYXJyaWVyc0dyb3VwSW5mbyJlChRPbmVCYXJyaWVyc0dy",
            "b3VwSW5mbxINCgVtYXBJZBgBIAEoBRITCgttYWluQmFycmllchgCIAEoBRIp",
            "Cg5icmFuY2hCYXJyaWVycxgDIAMoCzIRLlNMRy5LZXlWYWx1ZVBhaXIiRAoS",
            "UGxheWVyQ29tYmF0RWZmZWN0EiEKAnR5GAEgASgOMhUuU0xHLkNvbWJhdEVm",
            "ZmVjdFR5cGUSCwoDdmFsGAIgASgEIj0KFlBsYXllckNvbWJhdEVmZmVjdElu",
            "Zm8SIwoCY2UYASADKAsyFy5TTEcuUGxheWVyQ29tYmF0RWZmZWN0IlQKFkNv",
            "bWJhdEVmZmVjdENoYW5nZUluZm8SEAoIcGxheWVySWQYASABKAQSKAoHbmV3",
            "RGF0YRgCIAEoCzIXLlNMRy5QbGF5ZXJDb21iYXRFZmZlY3QiHAoNUmVwZWF0",
            "ZWRJbnQzMhILCgNudW0YASADKAUqkgEKDFJlc291cmNlVHlwZRIPCgtVTktO",
            "T1dOVFlQRRAAEggKBEZPT0QQARIJCgVTVE9ORRACEggKBElST04QAxILCgdD",
            "UllTVEFMEAQSDAoIRlJFRUdPTEQQBRINCglNT05FWUdPTEQQBhIICgRHT0xE",
            "EAcSDwoLQUNUSU9OVE9LRU4QCBINCglUUkFERUdPTEQQCSpPCg1Tb2xkaWVy",
            "U3RhdHVzEgoKBkluc2lkZRAAEgsKB091dHNpZGUQARIICgRIdXJ0EAISCAoE",
            "RGVhZBADEhEKDVNlcmlvdXNJbmp1cnkQBCpOChBDb21iYXRFZmZlY3RUeXBl",
            "Eg4KCkNFVFVOS05PV04QABIJCgVCVUlMRBABEggKBFRFQ0gQAhIICgRIRVJP",
            "EAMSCwoHU09MRElFUhAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SLG.MsgReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.ResourceType), typeof(global::SLG.SoldierStatus), typeof(global::SLG.CombatEffectType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerBaseInfo), global::SLG.PlayerBaseInfo.Parser, new[]{ "RoleId", "ServerId", "AccId", "RoleName", "Level", "Food", "Stone", "Iron", "Crystal", "Gold", "ActionToken", "CombatEffect", "Tradelevel", "Tradegold", "NearportId", "Summontime", "Killmonsterlevel", "Killoutpostlevel", "Tili", "Unionjob", "Uniontitle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerResource), global::SLG.PlayerResource.Parser, new[]{ "Ty", "Cnt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerResourceInfo), global::SLG.PlayerResourceInfo.Parser, new[]{ "Res" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerHero), global::SLG.PlayerHero.Parser, new[]{ "Id", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerHeroInfo), global::SLG.PlayerHeroInfo.Parser, new[]{ "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.HeroLevelInfo), global::SLG.HeroLevelInfo.Parser, new[]{ "Id", "Level", "Exp", "Star", "Stage", "Status", "SkillIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerHeroesLevel), global::SLG.PlayerHeroesLevel.Parser, new[]{ "Heroes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerSoldier), global::SLG.PlayerSoldier.Parser, new[]{ "Id", "Status", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerSoldierInfo), global::SLG.PlayerSoldierInfo.Parser, new[]{ "Soldier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerAllBarriers), global::SLG.PlayerAllBarriers.Parser, new[]{ "PlayerId", "BarriesGroups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.OneBarriersGroupInfo), global::SLG.OneBarriersGroupInfo.Parser, new[]{ "MapId", "MainBarrier", "BranchBarriers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerCombatEffect), global::SLG.PlayerCombatEffect.Parser, new[]{ "Ty", "Val" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerCombatEffectInfo), global::SLG.PlayerCombatEffectInfo.Parser, new[]{ "Ce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CombatEffectChangeInfo), global::SLG.CombatEffectChangeInfo.Parser, new[]{ "PlayerId", "NewData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.RepeatedInt32), global::SLG.RepeatedInt32.Parser, new[]{ "Num" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ResourceType {
    [pbr::OriginalName("UNKNOWNTYPE")] Unknowntype = 0,
    [pbr::OriginalName("FOOD")] Food = 1,
    [pbr::OriginalName("STONE")] Stone = 2,
    [pbr::OriginalName("IRON")] Iron = 3,
    [pbr::OriginalName("CRYSTAL")] Crystal = 4,
    [pbr::OriginalName("FREEGOLD")] Freegold = 5,
    [pbr::OriginalName("MONEYGOLD")] Moneygold = 6,
    [pbr::OriginalName("GOLD")] Gold = 7,
    [pbr::OriginalName("ACTIONTOKEN")] Actiontoken = 8,
    [pbr::OriginalName("TRADEGOLD")] Tradegold = 9,
  }

  public enum SoldierStatus {
    [pbr::OriginalName("Inside")] Inside = 0,
    [pbr::OriginalName("Outside")] Outside = 1,
    /// <summary>
    ///受伤的	
    /// </summary>
    [pbr::OriginalName("Hurt")] Hurt = 2,
    /// <summary>
    ///死亡的
    /// </summary>
    [pbr::OriginalName("Dead")] Dead = 3,
    /// <summary>
    ///重伤的
    /// </summary>
    [pbr::OriginalName("SeriousInjury")] SeriousInjury = 4,
  }

  public enum CombatEffectType {
    [pbr::OriginalName("CETUNKNOWN")] Cetunknown = 0,
    [pbr::OriginalName("BUILD")] Build = 1,
    [pbr::OriginalName("TECH")] Tech = 2,
    [pbr::OriginalName("HERO")] Hero = 3,
    [pbr::OriginalName("SOLDIER")] Soldier = 4,
  }

  #endregion

  #region Messages
  public sealed partial class PlayerBaseInfo : pb::IMessage<PlayerBaseInfo> {
    private static readonly pb::MessageParser<PlayerBaseInfo> _parser = new pb::MessageParser<PlayerBaseInfo>(() => new PlayerBaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBaseInfo(PlayerBaseInfo other) : this() {
      roleId_ = other.roleId_;
      serverId_ = other.serverId_;
      accId_ = other.accId_;
      roleName_ = other.roleName_;
      level_ = other.level_;
      food_ = other.food_;
      stone_ = other.stone_;
      iron_ = other.iron_;
      crystal_ = other.crystal_;
      gold_ = other.gold_;
      actionToken_ = other.actionToken_;
      combatEffect_ = other.combatEffect_ != null ? other.combatEffect_.Clone() : null;
      tradelevel_ = other.tradelevel_;
      tradegold_ = other.tradegold_;
      nearportId_ = other.nearportId_;
      summontime_ = other.summontime_;
      killmonsterlevel_ = other.killmonsterlevel_;
      killoutpostlevel_ = other.killoutpostlevel_;
      tili_ = other.tili_;
      unionjob_ = other.unionjob_;
      uniontitle_ = other.uniontitle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBaseInfo Clone() {
      return new PlayerBaseInfo(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private uint serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "acc_id" field.</summary>
    public const int AccIdFieldNumber = 3;
    private string accId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccId {
      get { return accId_; }
      set {
        accId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 4;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "food" field.</summary>
    public const int FoodFieldNumber = 6;
    private int food_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Food {
      get { return food_; }
      set {
        food_ = value;
      }
    }

    /// <summary>Field number for the "stone" field.</summary>
    public const int StoneFieldNumber = 7;
    private int stone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stone {
      get { return stone_; }
      set {
        stone_ = value;
      }
    }

    /// <summary>Field number for the "iron" field.</summary>
    public const int IronFieldNumber = 8;
    private int iron_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iron {
      get { return iron_; }
      set {
        iron_ = value;
      }
    }

    /// <summary>Field number for the "crystal" field.</summary>
    public const int CrystalFieldNumber = 9;
    private int crystal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Crystal {
      get { return crystal_; }
      set {
        crystal_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 10;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "action_token" field.</summary>
    public const int ActionTokenFieldNumber = 11;
    private int actionToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionToken {
      get { return actionToken_; }
      set {
        actionToken_ = value;
      }
    }

    /// <summary>Field number for the "combat_effect" field.</summary>
    public const int CombatEffectFieldNumber = 12;
    private global::SLG.PlayerCombatEffectInfo combatEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerCombatEffectInfo CombatEffect {
      get { return combatEffect_; }
      set {
        combatEffect_ = value;
      }
    }

    /// <summary>Field number for the "tradelevel" field.</summary>
    public const int TradelevelFieldNumber = 13;
    private int tradelevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tradelevel {
      get { return tradelevel_; }
      set {
        tradelevel_ = value;
      }
    }

    /// <summary>Field number for the "tradegold" field.</summary>
    public const int TradegoldFieldNumber = 14;
    private int tradegold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tradegold {
      get { return tradegold_; }
      set {
        tradegold_ = value;
      }
    }

    /// <summary>Field number for the "nearportId" field.</summary>
    public const int NearportIdFieldNumber = 15;
    private int nearportId_;
    /// <summary>
    ///在范围内，能直接交易的贸易港id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NearportId {
      get { return nearportId_; }
      set {
        nearportId_ = value;
      }
    }

    /// <summary>Field number for the "summontime" field.</summary>
    public const int SummontimeFieldNumber = 16;
    private ulong summontime_;
    /// <summary>
    ///大世界召唤野怪的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Summontime {
      get { return summontime_; }
      set {
        summontime_ = value;
      }
    }

    /// <summary>Field number for the "killmonsterlevel" field.</summary>
    public const int KillmonsterlevelFieldNumber = 17;
    private int killmonsterlevel_;
    /// <summary>
    ///击败野怪的最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Killmonsterlevel {
      get { return killmonsterlevel_; }
      set {
        killmonsterlevel_ = value;
      }
    }

    /// <summary>Field number for the "killoutpostlevel" field.</summary>
    public const int KilloutpostlevelFieldNumber = 18;
    private int killoutpostlevel_;
    /// <summary>
    ///击败怪物哨站的最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Killoutpostlevel {
      get { return killoutpostlevel_; }
      set {
        killoutpostlevel_ = value;
      }
    }

    /// <summary>Field number for the "tili" field.</summary>
    public const int TiliFieldNumber = 19;
    private uint tili_;
    /// <summary>
    ///体力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tili {
      get { return tili_; }
      set {
        tili_ = value;
      }
    }

    /// <summary>Field number for the "unionjob" field.</summary>
    public const int UnionjobFieldNumber = 20;
    private uint unionjob_;
    /// <summary>
    ///联盟等级R1~R5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Unionjob {
      get { return unionjob_; }
      set {
        unionjob_ = value;
      }
    }

    /// <summary>Field number for the "uniontitle" field.</summary>
    public const int UniontitleFieldNumber = 21;
    private uint uniontitle_;
    /// <summary>
    ///联盟官职
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uniontitle {
      get { return uniontitle_; }
      set {
        uniontitle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (ServerId != other.ServerId) return false;
      if (AccId != other.AccId) return false;
      if (RoleName != other.RoleName) return false;
      if (Level != other.Level) return false;
      if (Food != other.Food) return false;
      if (Stone != other.Stone) return false;
      if (Iron != other.Iron) return false;
      if (Crystal != other.Crystal) return false;
      if (Gold != other.Gold) return false;
      if (ActionToken != other.ActionToken) return false;
      if (!object.Equals(CombatEffect, other.CombatEffect)) return false;
      if (Tradelevel != other.Tradelevel) return false;
      if (Tradegold != other.Tradegold) return false;
      if (NearportId != other.NearportId) return false;
      if (Summontime != other.Summontime) return false;
      if (Killmonsterlevel != other.Killmonsterlevel) return false;
      if (Killoutpostlevel != other.Killoutpostlevel) return false;
      if (Tili != other.Tili) return false;
      if (Unionjob != other.Unionjob) return false;
      if (Uniontitle != other.Uniontitle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (AccId.Length != 0) hash ^= AccId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Food != 0) hash ^= Food.GetHashCode();
      if (Stone != 0) hash ^= Stone.GetHashCode();
      if (Iron != 0) hash ^= Iron.GetHashCode();
      if (Crystal != 0) hash ^= Crystal.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (ActionToken != 0) hash ^= ActionToken.GetHashCode();
      if (combatEffect_ != null) hash ^= CombatEffect.GetHashCode();
      if (Tradelevel != 0) hash ^= Tradelevel.GetHashCode();
      if (Tradegold != 0) hash ^= Tradegold.GetHashCode();
      if (NearportId != 0) hash ^= NearportId.GetHashCode();
      if (Summontime != 0UL) hash ^= Summontime.GetHashCode();
      if (Killmonsterlevel != 0) hash ^= Killmonsterlevel.GetHashCode();
      if (Killoutpostlevel != 0) hash ^= Killoutpostlevel.GetHashCode();
      if (Tili != 0) hash ^= Tili.GetHashCode();
      if (Unionjob != 0) hash ^= Unionjob.GetHashCode();
      if (Uniontitle != 0) hash ^= Uniontitle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ServerId);
      }
      if (AccId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoleName);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (Food != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Food);
      }
      if (Stone != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Stone);
      }
      if (Iron != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Iron);
      }
      if (Crystal != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Crystal);
      }
      if (Gold != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Gold);
      }
      if (ActionToken != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ActionToken);
      }
      if (combatEffect_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CombatEffect);
      }
      if (Tradelevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Tradelevel);
      }
      if (Tradegold != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Tradegold);
      }
      if (NearportId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(NearportId);
      }
      if (Summontime != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(Summontime);
      }
      if (Killmonsterlevel != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Killmonsterlevel);
      }
      if (Killoutpostlevel != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Killoutpostlevel);
      }
      if (Tili != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Tili);
      }
      if (Unionjob != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Unionjob);
      }
      if (Uniontitle != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(Uniontitle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (AccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Food != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Food);
      }
      if (Stone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stone);
      }
      if (Iron != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iron);
      }
      if (Crystal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Crystal);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (ActionToken != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionToken);
      }
      if (combatEffect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CombatEffect);
      }
      if (Tradelevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tradelevel);
      }
      if (Tradegold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tradegold);
      }
      if (NearportId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NearportId);
      }
      if (Summontime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Summontime);
      }
      if (Killmonsterlevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Killmonsterlevel);
      }
      if (Killoutpostlevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Killoutpostlevel);
      }
      if (Tili != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Tili);
      }
      if (Unionjob != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Unionjob);
      }
      if (Uniontitle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Uniontitle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.AccId.Length != 0) {
        AccId = other.AccId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Food != 0) {
        Food = other.Food;
      }
      if (other.Stone != 0) {
        Stone = other.Stone;
      }
      if (other.Iron != 0) {
        Iron = other.Iron;
      }
      if (other.Crystal != 0) {
        Crystal = other.Crystal;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.ActionToken != 0) {
        ActionToken = other.ActionToken;
      }
      if (other.combatEffect_ != null) {
        if (combatEffect_ == null) {
          CombatEffect = new global::SLG.PlayerCombatEffectInfo();
        }
        CombatEffect.MergeFrom(other.CombatEffect);
      }
      if (other.Tradelevel != 0) {
        Tradelevel = other.Tradelevel;
      }
      if (other.Tradegold != 0) {
        Tradegold = other.Tradegold;
      }
      if (other.NearportId != 0) {
        NearportId = other.NearportId;
      }
      if (other.Summontime != 0UL) {
        Summontime = other.Summontime;
      }
      if (other.Killmonsterlevel != 0) {
        Killmonsterlevel = other.Killmonsterlevel;
      }
      if (other.Killoutpostlevel != 0) {
        Killoutpostlevel = other.Killoutpostlevel;
      }
      if (other.Tili != 0) {
        Tili = other.Tili;
      }
      if (other.Unionjob != 0) {
        Unionjob = other.Unionjob;
      }
      if (other.Uniontitle != 0) {
        Uniontitle = other.Uniontitle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 16: {
            ServerId = input.ReadUInt32();
            break;
          }
          case 26: {
            AccId = input.ReadString();
            break;
          }
          case 34: {
            RoleName = input.ReadString();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            Food = input.ReadInt32();
            break;
          }
          case 56: {
            Stone = input.ReadInt32();
            break;
          }
          case 64: {
            Iron = input.ReadInt32();
            break;
          }
          case 72: {
            Crystal = input.ReadInt32();
            break;
          }
          case 80: {
            Gold = input.ReadInt32();
            break;
          }
          case 88: {
            ActionToken = input.ReadInt32();
            break;
          }
          case 98: {
            if (combatEffect_ == null) {
              CombatEffect = new global::SLG.PlayerCombatEffectInfo();
            }
            input.ReadMessage(CombatEffect);
            break;
          }
          case 104: {
            Tradelevel = input.ReadInt32();
            break;
          }
          case 112: {
            Tradegold = input.ReadInt32();
            break;
          }
          case 120: {
            NearportId = input.ReadInt32();
            break;
          }
          case 128: {
            Summontime = input.ReadUInt64();
            break;
          }
          case 136: {
            Killmonsterlevel = input.ReadInt32();
            break;
          }
          case 144: {
            Killoutpostlevel = input.ReadInt32();
            break;
          }
          case 152: {
            Tili = input.ReadUInt32();
            break;
          }
          case 160: {
            Unionjob = input.ReadUInt32();
            break;
          }
          case 168: {
            Uniontitle = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerResource : pb::IMessage<PlayerResource> {
    private static readonly pb::MessageParser<PlayerResource> _parser = new pb::MessageParser<PlayerResource>(() => new PlayerResource());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResource(PlayerResource other) : this() {
      ty_ = other.ty_;
      cnt_ = other.cnt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResource Clone() {
      return new PlayerResource(this);
    }

    /// <summary>Field number for the "ty" field.</summary>
    public const int TyFieldNumber = 1;
    private global::SLG.ResourceType ty_ = global::SLG.ResourceType.Unknowntype;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ResourceType Ty {
      get { return ty_; }
      set {
        ty_ = value;
      }
    }

    /// <summary>Field number for the "cnt" field.</summary>
    public const int CntFieldNumber = 2;
    private int cnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cnt {
      get { return cnt_; }
      set {
        cnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ty != other.Ty) return false;
      if (Cnt != other.Cnt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ty != global::SLG.ResourceType.Unknowntype) hash ^= Ty.GetHashCode();
      if (Cnt != 0) hash ^= Cnt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ty != global::SLG.ResourceType.Unknowntype) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ty);
      }
      if (Cnt != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cnt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ty != global::SLG.ResourceType.Unknowntype) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ty);
      }
      if (Cnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cnt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerResource other) {
      if (other == null) {
        return;
      }
      if (other.Ty != global::SLG.ResourceType.Unknowntype) {
        Ty = other.Ty;
      }
      if (other.Cnt != 0) {
        Cnt = other.Cnt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ty = (global::SLG.ResourceType) input.ReadEnum();
            break;
          }
          case 16: {
            Cnt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerResourceInfo : pb::IMessage<PlayerResourceInfo> {
    private static readonly pb::MessageParser<PlayerResourceInfo> _parser = new pb::MessageParser<PlayerResourceInfo>(() => new PlayerResourceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerResourceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResourceInfo(PlayerResourceInfo other) : this() {
      res_ = other.res_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerResourceInfo Clone() {
      return new PlayerResourceInfo(this);
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.PlayerResource> _repeated_res_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.PlayerResource.Parser);
    private readonly pbc::RepeatedField<global::SLG.PlayerResource> res_ = new pbc::RepeatedField<global::SLG.PlayerResource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PlayerResource> Res {
      get { return res_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerResourceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerResourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!res_.Equals(other.res_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= res_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      res_.WriteTo(output, _repeated_res_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += res_.CalculateSize(_repeated_res_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerResourceInfo other) {
      if (other == null) {
        return;
      }
      res_.Add(other.res_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            res_.AddEntriesFrom(input, _repeated_res_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerHero : pb::IMessage<PlayerHero> {
    private static readonly pb::MessageParser<PlayerHero> _parser = new pb::MessageParser<PlayerHero>(() => new PlayerHero());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHero(PlayerHero other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHero Clone() {
      return new PlayerHero(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private uint status_;
    /// <summary>
    ///0-inside 1-outside
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerHero other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerHeroInfo : pb::IMessage<PlayerHeroInfo> {
    private static readonly pb::MessageParser<PlayerHeroInfo> _parser = new pb::MessageParser<PlayerHeroInfo>(() => new PlayerHeroInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerHeroInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroInfo(PlayerHeroInfo other) : this() {
      hero_ = other.hero_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroInfo Clone() {
      return new PlayerHeroInfo(this);
    }

    /// <summary>Field number for the "hero" field.</summary>
    public const int HeroFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.PlayerHero> _repeated_hero_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.PlayerHero.Parser);
    private readonly pbc::RepeatedField<global::SLG.PlayerHero> hero_ = new pbc::RepeatedField<global::SLG.PlayerHero>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PlayerHero> Hero {
      get { return hero_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerHeroInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerHeroInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hero_.Equals(other.hero_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hero_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hero_.WriteTo(output, _repeated_hero_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hero_.CalculateSize(_repeated_hero_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerHeroInfo other) {
      if (other == null) {
        return;
      }
      hero_.Add(other.hero_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hero_.AddEntriesFrom(input, _repeated_hero_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroLevelInfo : pb::IMessage<HeroLevelInfo> {
    private static readonly pb::MessageParser<HeroLevelInfo> _parser = new pb::MessageParser<HeroLevelInfo>(() => new HeroLevelInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroLevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroLevelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroLevelInfo(HeroLevelInfo other) : this() {
      id_ = other.id_;
      level_ = other.level_;
      exp_ = other.exp_;
      star_ = other.star_;
      stage_ = other.stage_;
      status_ = other.status_;
      skillIds_ = other.skillIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroLevelInfo Clone() {
      return new HeroLevelInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///唯一标识一种英雄（索引英雄表）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///英雄等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private ulong exp_;
    /// <summary>
    ///当前等级经验进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 4;
    private int star_;
    /// <summary>
    ///当前星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 5;
    private int stage_;
    /// <summary>
    ///当前阶数 （a 星 b 阶）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 6;
    private uint status_;
    /// <summary>
    ///状态（0-inside 1-outside），被包含在EnterServerRsp/EnterSceneRsp中时为有效值，作为push的参数时无效
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "skillIds" field.</summary>
    public const int SkillIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_skillIds_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> skillIds_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///该英雄已获取的所有技能（最高等级）表id，包括普攻
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkillIds {
      get { return skillIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroLevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroLevelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Star != other.Star) return false;
      if (Stage != other.Stage) return false;
      if (Status != other.Status) return false;
      if(!skillIds_.Equals(other.skillIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= skillIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Exp);
      }
      if (Star != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Star);
      }
      if (Stage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Stage);
      }
      if (Status != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Status);
      }
      skillIds_.WriteTo(output, _repeated_skillIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      size += skillIds_.CalculateSize(_repeated_skillIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroLevelInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      skillIds_.Add(other.skillIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadUInt64();
            break;
          }
          case 32: {
            Star = input.ReadInt32();
            break;
          }
          case 40: {
            Stage = input.ReadInt32();
            break;
          }
          case 48: {
            Status = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            skillIds_.AddEntriesFrom(input, _repeated_skillIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerHeroesLevel : pb::IMessage<PlayerHeroesLevel> {
    private static readonly pb::MessageParser<PlayerHeroesLevel> _parser = new pb::MessageParser<PlayerHeroesLevel>(() => new PlayerHeroesLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerHeroesLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroesLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroesLevel(PlayerHeroesLevel other) : this() {
      heroes_ = other.heroes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerHeroesLevel Clone() {
      return new PlayerHeroesLevel(this);
    }

    /// <summary>Field number for the "heroes" field.</summary>
    public const int HeroesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.HeroLevelInfo> _repeated_heroes_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.HeroLevelInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.HeroLevelInfo> heroes_ = new pbc::RepeatedField<global::SLG.HeroLevelInfo>();
    /// <summary>
    ///玩家全部英雄的等级星级数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.HeroLevelInfo> Heroes {
      get { return heroes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerHeroesLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerHeroesLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!heroes_.Equals(other.heroes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= heroes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      heroes_.WriteTo(output, _repeated_heroes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += heroes_.CalculateSize(_repeated_heroes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerHeroesLevel other) {
      if (other == null) {
        return;
      }
      heroes_.Add(other.heroes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            heroes_.AddEntriesFrom(input, _repeated_heroes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSoldier : pb::IMessage<PlayerSoldier> {
    private static readonly pb::MessageParser<PlayerSoldier> _parser = new pb::MessageParser<PlayerSoldier>(() => new PlayerSoldier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSoldier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSoldier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSoldier(PlayerSoldier other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSoldier Clone() {
      return new PlayerSoldier(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private uint status_;
    /// <summary>
    ///0-inside 1-outside
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSoldier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSoldier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Status);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSoldier other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = input.ReadUInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSoldierInfo : pb::IMessage<PlayerSoldierInfo> {
    private static readonly pb::MessageParser<PlayerSoldierInfo> _parser = new pb::MessageParser<PlayerSoldierInfo>(() => new PlayerSoldierInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSoldierInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSoldierInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSoldierInfo(PlayerSoldierInfo other) : this() {
      soldier_ = other.soldier_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSoldierInfo Clone() {
      return new PlayerSoldierInfo(this);
    }

    /// <summary>Field number for the "soldier" field.</summary>
    public const int SoldierFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.PlayerSoldier> _repeated_soldier_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.PlayerSoldier.Parser);
    private readonly pbc::RepeatedField<global::SLG.PlayerSoldier> soldier_ = new pbc::RepeatedField<global::SLG.PlayerSoldier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PlayerSoldier> Soldier {
      get { return soldier_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSoldierInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSoldierInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!soldier_.Equals(other.soldier_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= soldier_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      soldier_.WriteTo(output, _repeated_soldier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += soldier_.CalculateSize(_repeated_soldier_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSoldierInfo other) {
      if (other == null) {
        return;
      }
      soldier_.Add(other.soldier_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            soldier_.AddEntriesFrom(input, _repeated_soldier_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家所有关卡数据（可能有多张地图）
  /// </summary>
  public sealed partial class PlayerAllBarriers : pb::IMessage<PlayerAllBarriers> {
    private static readonly pb::MessageParser<PlayerAllBarriers> _parser = new pb::MessageParser<PlayerAllBarriers>(() => new PlayerAllBarriers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAllBarriers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAllBarriers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAllBarriers(PlayerAllBarriers other) : this() {
      playerId_ = other.playerId_;
      barriesGroups_ = other.barriesGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAllBarriers Clone() {
      return new PlayerAllBarriers(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "barriesGroups" field.</summary>
    public const int BarriesGroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.OneBarriersGroupInfo> _repeated_barriesGroups_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.OneBarriersGroupInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.OneBarriersGroupInfo> barriesGroups_ = new pbc::RepeatedField<global::SLG.OneBarriersGroupInfo>();
    /// <summary>
    ///每张图对应一组推图进度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.OneBarriersGroupInfo> BarriesGroups {
      get { return barriesGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAllBarriers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAllBarriers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if(!barriesGroups_.Equals(other.barriesGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      hash ^= barriesGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      barriesGroups_.WriteTo(output, _repeated_barriesGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      size += barriesGroups_.CalculateSize(_repeated_barriesGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAllBarriers other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      barriesGroups_.Add(other.barriesGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            barriesGroups_.AddEntriesFrom(input, _repeated_barriesGroups_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一组推图进度数据（打到哪个主线及哪些支线关卡）
  /// </summary>
  public sealed partial class OneBarriersGroupInfo : pb::IMessage<OneBarriersGroupInfo> {
    private static readonly pb::MessageParser<OneBarriersGroupInfo> _parser = new pb::MessageParser<OneBarriersGroupInfo>(() => new OneBarriersGroupInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneBarriersGroupInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBarriersGroupInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBarriersGroupInfo(OneBarriersGroupInfo other) : this() {
      mapId_ = other.mapId_;
      mainBarrier_ = other.mainBarrier_;
      branchBarriers_ = other.branchBarriers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneBarriersGroupInfo Clone() {
      return new OneBarriersGroupInfo(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private int mapId_;
    /// <summary>
    ///本组关卡所属地图id（从1开始，目前也只有1个）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "mainBarrier" field.</summary>
    public const int MainBarrierFieldNumber = 2;
    private int mainBarrier_;
    /// <summary>
    ///主线关卡进度（已完成的主线关卡数目）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MainBarrier {
      get { return mainBarrier_; }
      set {
        mainBarrier_ = value;
      }
    }

    /// <summary>Field number for the "branchBarriers" field.</summary>
    public const int BranchBarriersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.KeyValuePair> _repeated_branchBarriers_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::SLG.KeyValuePair> branchBarriers_ = new pbc::RepeatedField<global::SLG.KeyValuePair>();
    /// <summary>
    ///支线关卡（某个主线可能开启一条支线链）进度（&lt;mainId, finishNum> => branchTblId）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.KeyValuePair> BranchBarriers {
      get { return branchBarriers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneBarriersGroupInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneBarriersGroupInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      if (MainBarrier != other.MainBarrier) return false;
      if(!branchBarriers_.Equals(other.branchBarriers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (MainBarrier != 0) hash ^= MainBarrier.GetHashCode();
      hash ^= branchBarriers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapId);
      }
      if (MainBarrier != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MainBarrier);
      }
      branchBarriers_.WriteTo(output, _repeated_branchBarriers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (MainBarrier != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainBarrier);
      }
      size += branchBarriers_.CalculateSize(_repeated_branchBarriers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneBarriersGroupInfo other) {
      if (other == null) {
        return;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.MainBarrier != 0) {
        MainBarrier = other.MainBarrier;
      }
      branchBarriers_.Add(other.branchBarriers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapId = input.ReadInt32();
            break;
          }
          case 16: {
            MainBarrier = input.ReadInt32();
            break;
          }
          case 26: {
            branchBarriers_.AddEntriesFrom(input, _repeated_branchBarriers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCombatEffect : pb::IMessage<PlayerCombatEffect> {
    private static readonly pb::MessageParser<PlayerCombatEffect> _parser = new pb::MessageParser<PlayerCombatEffect>(() => new PlayerCombatEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCombatEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCombatEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCombatEffect(PlayerCombatEffect other) : this() {
      ty_ = other.ty_;
      val_ = other.val_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCombatEffect Clone() {
      return new PlayerCombatEffect(this);
    }

    /// <summary>Field number for the "ty" field.</summary>
    public const int TyFieldNumber = 1;
    private global::SLG.CombatEffectType ty_ = global::SLG.CombatEffectType.Cetunknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.CombatEffectType Ty {
      get { return ty_; }
      set {
        ty_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 2;
    private ulong val_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCombatEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCombatEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ty != other.Ty) return false;
      if (Val != other.Val) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ty != global::SLG.CombatEffectType.Cetunknown) hash ^= Ty.GetHashCode();
      if (Val != 0UL) hash ^= Val.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ty != global::SLG.CombatEffectType.Cetunknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ty);
      }
      if (Val != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Val);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ty != global::SLG.CombatEffectType.Cetunknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ty);
      }
      if (Val != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Val);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCombatEffect other) {
      if (other == null) {
        return;
      }
      if (other.Ty != global::SLG.CombatEffectType.Cetunknown) {
        Ty = other.Ty;
      }
      if (other.Val != 0UL) {
        Val = other.Val;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ty = (global::SLG.CombatEffectType) input.ReadEnum();
            break;
          }
          case 16: {
            Val = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCombatEffectInfo : pb::IMessage<PlayerCombatEffectInfo> {
    private static readonly pb::MessageParser<PlayerCombatEffectInfo> _parser = new pb::MessageParser<PlayerCombatEffectInfo>(() => new PlayerCombatEffectInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCombatEffectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCombatEffectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCombatEffectInfo(PlayerCombatEffectInfo other) : this() {
      ce_ = other.ce_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCombatEffectInfo Clone() {
      return new PlayerCombatEffectInfo(this);
    }

    /// <summary>Field number for the "ce" field.</summary>
    public const int CeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.PlayerCombatEffect> _repeated_ce_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.PlayerCombatEffect.Parser);
    private readonly pbc::RepeatedField<global::SLG.PlayerCombatEffect> ce_ = new pbc::RepeatedField<global::SLG.PlayerCombatEffect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PlayerCombatEffect> Ce {
      get { return ce_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCombatEffectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCombatEffectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ce_.Equals(other.ce_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ce_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ce_.WriteTo(output, _repeated_ce_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ce_.CalculateSize(_repeated_ce_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCombatEffectInfo other) {
      if (other == null) {
        return;
      }
      ce_.Add(other.ce_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ce_.AddEntriesFrom(input, _repeated_ce_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombatEffectChangeInfo : pb::IMessage<CombatEffectChangeInfo> {
    private static readonly pb::MessageParser<CombatEffectChangeInfo> _parser = new pb::MessageParser<CombatEffectChangeInfo>(() => new CombatEffectChangeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatEffectChangeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatEffectChangeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatEffectChangeInfo(CombatEffectChangeInfo other) : this() {
      playerId_ = other.playerId_;
      newData_ = other.newData_ != null ? other.newData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatEffectChangeInfo Clone() {
      return new CombatEffectChangeInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "newData" field.</summary>
    public const int NewDataFieldNumber = 2;
    private global::SLG.PlayerCombatEffect newData_;
    /// <summary>
    ///某类型战力最新数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerCombatEffect NewData {
      get { return newData_; }
      set {
        newData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatEffectChangeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatEffectChangeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(NewData, other.NewData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (newData_ != null) hash ^= NewData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (newData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (newData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatEffectChangeInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.newData_ != null) {
        if (newData_ == null) {
          NewData = new global::SLG.PlayerCombatEffect();
        }
        NewData.MergeFrom(other.NewData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (newData_ == null) {
              NewData = new global::SLG.PlayerCombatEffect();
            }
            input.ReadMessage(NewData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RepeatedInt32 : pb::IMessage<RepeatedInt32> {
    private static readonly pb::MessageParser<RepeatedInt32> _parser = new pb::MessageParser<RepeatedInt32>(() => new RepeatedInt32());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepeatedInt32> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgPlayerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedInt32() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedInt32(RepeatedInt32 other) : this() {
      num_ = other.num_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepeatedInt32 Clone() {
      return new RepeatedInt32(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_num_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> num_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///通用repeated int32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Num {
      get { return num_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepeatedInt32);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepeatedInt32 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!num_.Equals(other.num_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= num_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      num_.WriteTo(output, _repeated_num_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += num_.CalculateSize(_repeated_num_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepeatedInt32 other) {
      if (other == null) {
        return;
      }
      num_.Add(other.num_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            num_.AddEntriesFrom(input, _repeated_num_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
