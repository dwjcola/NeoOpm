// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_task.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_task.proto</summary>
  public static partial class MsgTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_task.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tc2dfdGFzay5wcm90bxIDU0xHImoKEVRhc2tDb25kaXRpb25JbmZvEhUK",
            "DWNvbmRpdGlvblR5cGUYASABKAUSDwoHc29uVHlwZRgCIAEoBRILCgN2YWwY",
            "AyABKAUSEAoIcGxheWVySWQYBCABKAQSDgoGYWltVmFsGAUgASgFImwKDlNp",
            "bmdsZVRhc2tJbmZvEhAKCHRhc2tUeXBlGAEgASgFEg4KBnRhc2tJZBgCIAEo",
            "BRIOCgZzdGF0dXMYAyABKAUSKAoIcHJvZ3Jlc3MYBCADKAsyFi5TTEcuVGFz",
            "a0NvbmRpdGlvbkluZm8idQoPUGxheWVyVGFza3NEYXRhEiUKCHRhc2tMaXN0",
            "GAEgAygLMhMuU0xHLlNpbmdsZVRhc2tJbmZvEhMKC2FjdGl2ZVBvaW50GAIg",
            "ASgFEhEKCWJveFJlY29yZBgDIAMoBRITCgtsYXN0TWFpbkx2bBgEIAEoBSo/",
            "CglUYXNrX1R5cGUSEQoNVGFza1R5cGVCZWdpbhAAEggKBE1haW4QARIKCgZC",
            "cmFuY2gQAhIJCgVEYWlseRADKqYHCg5UYXNrX0NvbmRpdGlvbhIRCg1UYXNr",
            "Q29uZEJlZ2luEAASFQoRQ29sbGVjdFJlc291cmNlX1MQARIVChFDb2xsZWN0",
            "UmVzb3VyY2VfRBACEhMKD1Jlc2VhcmNoVGltZXNfRBADEhEKDUdldFRlY2hu",
            "b2xvZ3kQBBIRCg1LaWxsTW9uc3Rlcl9EEAUSEgoOVHJhaW5Tb2xkaWVyX0QQ",
            "BhISCg5UcmFpblNvbGRpZXJfUxAHEg4KCkJ1aWxkTGV2ZWwQCBISCg5DbGlj",
            "a0dldFJld2FyZBAJEhcKE1RyYWluU29pZGllcl9UeXBlX0QQChIXChNUcmFp",
            "blNvbGRpZXJfVHlwZV9TEAsSFQoRUHViUmVjcnVpdFRpbWVzX0QQDBIVChFQ",
            "dWJSZWNydWl0VGltZXNfUxANEhgKFEdldFJlc1Byb2R1Y3RUaW1lc19EEA4S",
            "GAoUR2V0UmVzUHJvZHVjdFRpbWVzX1MQDxIQCgxVc2VJdGVtTnVtX0QQEBIQ",
            "CgxVc2VJdGVtTnVtX1MQERIVChFUcmVhdFNvbGRpZXJOdW1fRBASEhUKEVRy",
            "ZWF0U29sZGllck51bV9TEBMSGgoWVXNlTWFpbkd1blNraWxsVGltZXNfRBAU",
            "EhoKFlVzZU1haW5HdW5Ta2lsbFRpbWVzX1MQFRIYChREZXN0cm95QnVpbGRp",
            "bmdOdW1fRBAWEhgKFERlc3Ryb3lCdWlsZGluZ051bV9TEBcSFgoSSGVyb0xl",
            "dmVsVXBUaW1lc19EEBgSGAoUUmVhY2hMZXZlbF9IZXJvTnVtX1MQGRIWChJI",
            "ZXJvU3RhckluY1RpbWVzX0QQGhIXChNSZWFjaFN0YXJfSGVyb051bV9TEBsS",
            "FgoSR2V0UmVzUHJvZHVjdE51bV9EEBwSFgoSR2V0UmVzUHJvZHVjdE51bV9T",
            "EB0SGwoXQmFycmllckNoYWxsZW5nZXNUaW1lX0QQHhIUChBQYXNzT25lQmFy",
            "cmllcl9TEB8SGAoUS2lsbE1vbnN0ZXJCeUxldmVsX1MQIBIYChRLaWxsTW9u",
            "c3RlckJ5TGV2ZWxfRBAhEhYKElVzZUl0ZW1OdW1CeVR5cGVfUxAiEhYKElVz",
            "ZUl0ZW1OdW1CeVR5cGVfRBAjEhoKFkJ1aWxkaW5nTGV2ZWxVcFRpbWVzX0QQ",
            "JBIZChVDcmVhdGVCdWlsZGluZ1RpbWVzX0QQJRIZChVDcmVhdGVCdWlsZGlu",
            "Z1RpbWVzX1MQJipKCgtUYXNrX1N0YXR1cxIMCghUYXNrTm9uZRAAEgkKBVNs",
            "ZWVwEAESCwoHU3RhcnRlZBACEgoKBkZpbmlzaBADEgkKBUVycm9yEARiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.Task_Type), typeof(global::SLG.Task_Condition), typeof(global::SLG.Task_Status), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TaskConditionInfo), global::SLG.TaskConditionInfo.Parser, new[]{ "ConditionType", "SonType", "Val", "PlayerId", "AimVal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SingleTaskInfo), global::SLG.SingleTaskInfo.Parser, new[]{ "TaskType", "TaskId", "Status", "Progress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PlayerTasksData), global::SLG.PlayerTasksData.Parser, new[]{ "TaskList", "ActivePoint", "BoxRecord", "LastMainLvl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Task_Type {
    [pbr::OriginalName("TaskTypeBegin")] Begin = 0,
    /// <summary>
    ///主线
    /// </summary>
    [pbr::OriginalName("Main")] Main = 1,
    /// <summary>
    ///支线
    /// </summary>
    [pbr::OriginalName("Branch")] Branch = 2,
    /// <summary>
    ///日常
    /// </summary>
    [pbr::OriginalName("Daily")] Daily = 3,
  }

  public enum Task_Condition {
    [pbr::OriginalName("TaskCondBegin")] TaskCondBegin = 0,
    /// <summary>
    ///总采集 rType 资源 num
    /// </summary>
    [pbr::OriginalName("CollectResource_S")] CollectResourceS = 1,
    /// <summary>
    ///任务开始后累计采集
    /// </summary>
    [pbr::OriginalName("CollectResource_D")] CollectResourceD = 2,
    /// <summary>
    ///研究科技次数
    /// </summary>
    [pbr::OriginalName("ResearchTimes_D")] ResearchTimesD = 3,
    /// <summary>
    ///techId 科技升级至 lvl 级
    /// </summary>
    [pbr::OriginalName("GetTechnology")] GetTechnology = 4,
    /// <summary>
    ///击杀 mId 怪物 num
    /// </summary>
    [pbr::OriginalName("KillMonster_D")] KillMonsterD = 5,
    /// <summary>
    ///任务开始后累计训练 sId 士兵 num
    /// </summary>
    [pbr::OriginalName("TrainSoldier_D")] TrainSoldierD = 6,
    /// <summary>
    ///兵种表中id为sId的士兵的总训练数目num
    /// </summary>
    [pbr::OriginalName("TrainSoldier_S")] TrainSoldierS = 7,
    /// <summary>
    ///bId 建筑升至 lvl 级
    /// </summary>
    [pbr::OriginalName("BuildLevel")] BuildLevel = 8,
    /// <summary>
    ///点击领取奖励
    /// </summary>
    [pbr::OriginalName("ClickGetReward")] ClickGetReward = 9,
    /// <summary>
    ///任务开始之后 累计训练 兵种类型为type 的士兵数目 num
    /// </summary>
    [pbr::OriginalName("TrainSoidier_Type_D")] TrainSoidierTypeD = 10,
    /// <summary>
    ///兵种类型为type 的士兵 总训练数目 num
    /// </summary>
    [pbr::OriginalName("TrainSoldier_Type_S")] TrainSoldierTypeS = 11,
    /// <summary>
    ///任务开始后酒馆（0.所有，1.普通，2.高级）招募次数
    /// </summary>
    [pbr::OriginalName("PubRecruitTimes_D")] PubRecruitTimesD = 12,
    /// <summary>
    ///累计酒馆招募次数
    /// </summary>
    [pbr::OriginalName("PubRecruitTimes_S")] PubRecruitTimesS = 13,
    /// <summary>
    ///任务开始后收取建筑产出 rType 资源次数
    /// </summary>
    [pbr::OriginalName("GetResProductTimes_D")] GetResProductTimesD = 14,
    /// <summary>
    ///累计收取建筑产出 rType 资源次数
    /// </summary>
    [pbr::OriginalName("GetResProductTimes_S")] GetResProductTimesS = 15,
    /// <summary>
    ///任务开始后使用 itemId 道具 num 个
    /// </summary>
    [pbr::OriginalName("UseItemNum_D")] UseItemNumD = 16,
    /// <summary>
    ///累计使用道具数目（配一组需要计数的id）
    /// </summary>
    [pbr::OriginalName("UseItemNum_S")] UseItemNumS = 17,
    /// <summary>
    ///任务开始后治疗 type 士兵 num 个
    /// </summary>
    [pbr::OriginalName("TreatSoldierNum_D")] TreatSoldierNumD = 18,
    /// <summary>
    ///累计治疗士兵数目(key - type)
    /// </summary>
    [pbr::OriginalName("TreatSoldierNum_S")] TreatSoldierNumS = 19,
    /// <summary>
    ///任务开始后 使用主炮技能次数
    /// </summary>
    [pbr::OriginalName("UseMainGunSkillTimes_D")] UseMainGunSkillTimesD = 20,
    /// <summary>
    ///累计 使用主炮技能次数
    /// </summary>
    [pbr::OriginalName("UseMainGunSkillTimes_S")] UseMainGunSkillTimesS = 21,
    /// <summary>
    ///任务开始后 战斗中摧毁建筑数目
    /// </summary>
    [pbr::OriginalName("DestroyBuildingNum_D")] DestroyBuildingNumD = 22,
    /// <summary>
    ///累计 战斗中摧毁建筑数目
    /// </summary>
    [pbr::OriginalName("DestroyBuildingNum_S")] DestroyBuildingNumS = 23,
    /// <summary>
    ///英雄升级次数(任务开始之后，每升一级记一次)
    /// </summary>
    [pbr::OriginalName("HeroLevelUpTimes_D")] HeroLevelUpTimesD = 24,
    /// <summary>
    ///达到 lvl 级的英雄数目
    /// </summary>
    [pbr::OriginalName("ReachLevel_HeroNum_S")] ReachLevelHeroNumS = 25,
    /// <summary>
    ///英雄升星次数(任务开始之后，每升一星记一次)
    /// </summary>
    [pbr::OriginalName("HeroStarIncTimes_D")] HeroStarIncTimesD = 26,
    /// <summary>
    ///达到 star 星级的英雄数目
    /// </summary>
    [pbr::OriginalName("ReachStar_HeroNum_S")] ReachStarHeroNumS = 27,
    /// <summary>
    ///任务开始后收取建筑产出 rType 资源数目
    /// </summary>
    [pbr::OriginalName("GetResProductNum_D")] GetResProductNumD = 28,
    /// <summary>
    ///累计收取建筑产出 rType 资源数目
    /// </summary>
    [pbr::OriginalName("GetResProductNum_S")] GetResProductNumS = 29,
    /// <summary>
    ///任务开始后挑战关卡次数（所有的，不做任何区分）
    /// </summary>
    [pbr::OriginalName("BarrierChallengesTime_D")] BarrierChallengesTimeD = 30,
    /// <summary>
    ///通关某指定关卡（key - 关卡表id）
    /// </summary>
    [pbr::OriginalName("PassOneBarrier_S")] PassOneBarrierS = 31,
    /// <summary>
    ///累计击杀 lvl 级的 怪物 次数
    /// </summary>
    [pbr::OriginalName("KillMonsterByLevel_S")] KillMonsterByLevelS = 32,
    /// <summary>
    ///任务开始后 击杀 lvl 级的怪物 次数
    /// </summary>
    [pbr::OriginalName("KillMonsterByLevel_D")] KillMonsterByLevelD = 33,
    /// <summary>
    ///累计使用 type 类型道具 次数
    /// </summary>
    [pbr::OriginalName("UseItemNumByType_S")] UseItemNumByTypeS = 34,
    /// <summary>
    ///任务开始后 使用 type 类型道具 次数
    /// </summary>
    [pbr::OriginalName("UseItemNumByType_D")] UseItemNumByTypeD = 35,
    /// <summary>
    ///任务开始后 升级 bType 类型建筑次数
    /// </summary>
    [pbr::OriginalName("BuildingLevelUpTimes_D")] BuildingLevelUpTimesD = 36,
    /// <summary>
    ///任务开始后 建造 tblId 类型建筑 次数
    /// </summary>
    [pbr::OriginalName("CreateBuildingTimes_D")] CreateBuildingTimesD = 37,
    /// <summary>
    ///累计 建造 tblId 类型建筑 次数
    /// </summary>
    [pbr::OriginalName("CreateBuildingTimes_S")] CreateBuildingTimesS = 38,
  }

  public enum Task_Status {
    [pbr::OriginalName("TaskNone")] TaskNone = 0,
    [pbr::OriginalName("Sleep")] Sleep = 1,
    [pbr::OriginalName("Started")] Started = 2,
    [pbr::OriginalName("Finish")] Finish = 3,
    [pbr::OriginalName("Error")] Error = 4,
  }

  #endregion

  #region Messages
  public sealed partial class TaskConditionInfo : pb::IMessage<TaskConditionInfo> {
    private static readonly pb::MessageParser<TaskConditionInfo> _parser = new pb::MessageParser<TaskConditionInfo>(() => new TaskConditionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskConditionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConditionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConditionInfo(TaskConditionInfo other) : this() {
      conditionType_ = other.conditionType_;
      sonType_ = other.sonType_;
      val_ = other.val_;
      playerId_ = other.playerId_;
      aimVal_ = other.aimVal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskConditionInfo Clone() {
      return new TaskConditionInfo(this);
    }

    /// <summary>Field number for the "conditionType" field.</summary>
    public const int ConditionTypeFieldNumber = 1;
    private int conditionType_;
    /// <summary>
    ///对应Task_Condition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConditionType {
      get { return conditionType_; }
      set {
        conditionType_ = value;
      }
    }

    /// <summary>Field number for the "sonType" field.</summary>
    public const int SonTypeFieldNumber = 2;
    private int sonType_;
    /// <summary>
    ///子类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SonType {
      get { return sonType_; }
      set {
        sonType_ = value;
      }
    }

    /// <summary>Field number for the "val" field.</summary>
    public const int ValFieldNumber = 3;
    private int val_;
    /// <summary>
    ///当前值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Val {
      get { return val_; }
      set {
        val_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 4;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "aimVal" field.</summary>
    public const int AimValFieldNumber = 5;
    private int aimVal_;
    /// <summary>
    ///目标值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AimVal {
      get { return aimVal_; }
      set {
        aimVal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskConditionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskConditionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConditionType != other.ConditionType) return false;
      if (SonType != other.SonType) return false;
      if (Val != other.Val) return false;
      if (PlayerId != other.PlayerId) return false;
      if (AimVal != other.AimVal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConditionType != 0) hash ^= ConditionType.GetHashCode();
      if (SonType != 0) hash ^= SonType.GetHashCode();
      if (Val != 0) hash ^= Val.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (AimVal != 0) hash ^= AimVal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConditionType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ConditionType);
      }
      if (SonType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SonType);
      }
      if (Val != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Val);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(PlayerId);
      }
      if (AimVal != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AimVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConditionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConditionType);
      }
      if (SonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SonType);
      }
      if (Val != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Val);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (AimVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AimVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskConditionInfo other) {
      if (other == null) {
        return;
      }
      if (other.ConditionType != 0) {
        ConditionType = other.ConditionType;
      }
      if (other.SonType != 0) {
        SonType = other.SonType;
      }
      if (other.Val != 0) {
        Val = other.Val;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.AimVal != 0) {
        AimVal = other.AimVal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConditionType = input.ReadInt32();
            break;
          }
          case 16: {
            SonType = input.ReadInt32();
            break;
          }
          case 24: {
            Val = input.ReadInt32();
            break;
          }
          case 32: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 40: {
            AimVal = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleTaskInfo : pb::IMessage<SingleTaskInfo> {
    private static readonly pb::MessageParser<SingleTaskInfo> _parser = new pb::MessageParser<SingleTaskInfo>(() => new SingleTaskInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleTaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTaskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTaskInfo(SingleTaskInfo other) : this() {
      taskType_ = other.taskType_;
      taskId_ = other.taskId_;
      status_ = other.status_;
      progress_ = other.progress_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleTaskInfo Clone() {
      return new SingleTaskInfo(this);
    }

    /// <summary>Field number for the "taskType" field.</summary>
    public const int TaskTypeFieldNumber = 1;
    private int taskType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskType {
      get { return taskType_; }
      set {
        taskType_ = value;
      }
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    /// <summary>
    ///tblId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SLG.TaskConditionInfo> _repeated_progress_codec
        = pb::FieldCodec.ForMessage(34, global::SLG.TaskConditionInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.TaskConditionInfo> progress_ = new pbc::RepeatedField<global::SLG.TaskConditionInfo>();
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.TaskConditionInfo> Progress {
      get { return progress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleTaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleTaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskType != other.TaskType) return false;
      if (TaskId != other.TaskId) return false;
      if (Status != other.Status) return false;
      if(!progress_.Equals(other.progress_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskType != 0) hash ^= TaskType.GetHashCode();
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= progress_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskType);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskId);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      progress_.WriteTo(output, _repeated_progress_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += progress_.CalculateSize(_repeated_progress_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleTaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.TaskType != 0) {
        TaskType = other.TaskType;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      progress_.Add(other.progress_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskType = input.ReadInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            progress_.AddEntriesFrom(input, _repeated_progress_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerTasksData : pb::IMessage<PlayerTasksData> {
    private static readonly pb::MessageParser<PlayerTasksData> _parser = new pb::MessageParser<PlayerTasksData>(() => new PlayerTasksData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTasksData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTaskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTasksData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTasksData(PlayerTasksData other) : this() {
      taskList_ = other.taskList_.Clone();
      activePoint_ = other.activePoint_;
      boxRecord_ = other.boxRecord_.Clone();
      lastMainLvl_ = other.lastMainLvl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTasksData Clone() {
      return new PlayerTasksData(this);
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.SingleTaskInfo> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.SingleTaskInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.SingleTaskInfo> taskList_ = new pbc::RepeatedField<global::SLG.SingleTaskInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.SingleTaskInfo> TaskList {
      get { return taskList_; }
    }

    /// <summary>Field number for the "activePoint" field.</summary>
    public const int ActivePointFieldNumber = 2;
    private int activePoint_;
    /// <summary>
    ///活跃度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivePoint {
      get { return activePoint_; }
      set {
        activePoint_ = value;
      }
    }

    /// <summary>Field number for the "boxRecord" field.</summary>
    public const int BoxRecordFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_boxRecord_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> boxRecord_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///可领取的活跃度宝箱的领取记录[ind - opened]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BoxRecord {
      get { return boxRecord_; }
    }

    /// <summary>Field number for the "lastMainLvl" field.</summary>
    public const int LastMainLvlFieldNumber = 4;
    private int lastMainLvl_;
    /// <summary>
    ///上次刷新日常任务（即跨天）时的主城等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastMainLvl {
      get { return lastMainLvl_; }
      set {
        lastMainLvl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTasksData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTasksData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskList_.Equals(other.taskList_)) return false;
      if (ActivePoint != other.ActivePoint) return false;
      if(!boxRecord_.Equals(other.boxRecord_)) return false;
      if (LastMainLvl != other.LastMainLvl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskList_.GetHashCode();
      if (ActivePoint != 0) hash ^= ActivePoint.GetHashCode();
      hash ^= boxRecord_.GetHashCode();
      if (LastMainLvl != 0) hash ^= LastMainLvl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (ActivePoint != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActivePoint);
      }
      boxRecord_.WriteTo(output, _repeated_boxRecord_codec);
      if (LastMainLvl != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastMainLvl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (ActivePoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivePoint);
      }
      size += boxRecord_.CalculateSize(_repeated_boxRecord_codec);
      if (LastMainLvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastMainLvl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTasksData other) {
      if (other == null) {
        return;
      }
      taskList_.Add(other.taskList_);
      if (other.ActivePoint != 0) {
        ActivePoint = other.ActivePoint;
      }
      boxRecord_.Add(other.boxRecord_);
      if (other.LastMainLvl != 0) {
        LastMainLvl = other.LastMainLvl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
          case 16: {
            ActivePoint = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            boxRecord_.AddEntriesFrom(input, _repeated_boxRecord_codec);
            break;
          }
          case 32: {
            LastMainLvl = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
