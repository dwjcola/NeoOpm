// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_trading.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_trading.proto</summary>
  public static partial class MsgTradingReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_trading.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgTradingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFtc2dfdHJhZGluZy5wcm90bxIDU0xHIlIKDUNvbW1vZGl0eUluZm8SDgoG",
            "aXRlbUlkGAEgASgNEg8KB2l0ZW1OdW0YAiABKA0SEAoIYnV5UHJpY2UYAyAB",
            "KA0SDgoGcG9ydElkGAQgASgNIlsKDVBvcnRTZWxsUHJpY2USDgoGaXRlbUlk",
            "GAEgASgNEg0KBXByaWNlGAIgASgNEhQKDHNjYXJjZVBvcnRJZBgDIAEoDRIV",
            "Cg1mYXNoaW9uUG9ydElkGAQgASgNIv0BCghQb3J0SW5mbxITCgtwb3J0VGFi",
            "bGVJZBgBIAEoDRIRCglyZXNldFRpbWUYAiABKAQSIAoEbGlzdBgEIAMoCzIS",
            "LlNMRy5Qb3J0U2VsbFByaWNlEhQKDHNjYXJjZUl0ZW1JZBgFIAEoDRIYChBz",
            "Y2FyY2VVcGRhdGVUaW1lGAYgASgEEhUKDWZhc2hpb25JdGVtSWQYByABKA0S",
            "GQoRZmFzaGlvblVwZGF0ZVRpbWUYCCABKAQSEgoKcHJvc3Blcml0eRgJIAEo",
            "DRIXCg9zY2FyY2VJdGVtUHJpY2UYCiABKA0SGAoQZmFzaGlvbkl0ZW1Qcmlj",
            "ZRgLIAEoDSIsCglJdGVtSWROdW0SDgoGaXRlbUlkGAEgASgNEg8KB2l0ZW1O",
            "dW0YAiABKA0iPgoHQnV5SXRlbRIUCgxwb3J0RW50aXR5SWQYASABKAQSHQoF",
            "SXRlbXMYAiADKAsyDi5TTEcuSXRlbUlkTnVtIj8KCFNlbGxJdGVtEhQKDHBv",
            "cnRFbnRpdHlJZBgBIAEoBBIdCgVJdGVtcxgCIAMoCzIOLlNMRy5JdGVtSWRO",
            "dW0iJQoNdHJhZGluZ1BvcnRJZBIUCgxwb3J0RW50aXR5SWQYASABKAQiMQoN",
            "Q29tbW9kaXR5TGlzdBIgCgRsaXN0GAEgAygLMhIuU0xHLkNvbW1vZGl0eUlu",
            "Zm8iYAoPVHJhZGluZ1BvcnRJbmZvEg4KBnBvcnRJZBgBIAEoBBISCgpwcm9z",
            "cGVyaXR5GAIgASgNEhAKCHBvcnRUeXBlGAMgASgNEhcKD3BvcFJlZnJlc2hU",
            "dGltZRgEIAEoBCJHCg1Hb29kc1BvcnRJbmZvEg4KBml0ZW1JZBgBIAEoDRIm",
            "Cghwb3J0SW5mbxgCIAEoCzIULlNMRy5UcmFkaW5nUG9ydEluZm8ihwEKCUdv",
            "b2RzSW5mbxIOCgZpdGVtSWQYASABKA0SEQoJYnV5UG9ydElkGAIgASgNEhUK",
            "DWJ1eXByb3NwZXJpdHkYAyABKA0SEgoKc2VsbFBvcnRJZBgEIAEoDRIUCgxz",
            "ZWxsUG9ydFR5cGUYBSABKA0SFgoOc2VsbHByb3NwZXJpdHkYBiABKA0iigEK",
            "D1RyYWRpbmdNYWluSW5mbxILCgNleHAYAiABKA0SJAoIYnV5R29vZHMYAyAB",
            "KAsyEi5TTEcuR29vZHNQb3J0SW5mbxIlCglzZWxsR29vZHMYBCABKAsyEi5T",
            "TEcuR29vZHNQb3J0SW5mbxIdCgVnb29kcxgFIAMoCzIOLlNMRy5Hb29kc0lu",
            "Zm8iLAoJQXV0b1RyYWRlEhEKCXRhckFyZWFJZBgBIAEoDRIMCgR0aW1lGAIg",
            "ASgNIjIKDVRyYWRpbmdNYXJrZXQSIQoFZ29vZHMYASADKAsyEi5TTEcuR29v",
            "ZHNQb3J0SW5mbyI2ChRQb3J0QW5kQ29tbW9kaXR5SW5mbxIOCgZpdGVtSWQY",
            "ASABKA0SDgoGcG9ydElkGAIgASgEIl0KDlRyYWRlUm91dGVJbmZvEg4KBmlu",
            "Y29tZRgBIAEoDRISCgpmaW5pc2hUaW1lGAIgASgNEicKBHBvcnQYAyADKAsy",
            "GS5TTEcuUG9ydEFuZENvbW1vZGl0eUluZm8qvwEKD1RyYWRpbmdSZXNwQ29k",
            "ZRISCg5UcmFkaW5nUmVzcF9PSxAAEhgKFFRyYWRpbmdfUmVzTm90RW5vdWdo",
            "EAISEgoOSW52YWxpZF9Qb3J0SWQQAxIQCgxPdXRfRGlzdGFuY2UQBBIOCgpE",
            "aWZmX1ByaWNlEAUSDgoKU3RvcmVfRnVsbBAGEg8KC1N0b3JlX0Vycm9yEAcS",
            "EgoOSW52YWxpZF9JdGVtSUQQCBITCg9JbnZhbGlkX0l0ZW1OdW0QCSpVCg9U",
            "cmFkaW5nUG9ydFR5cGUSDQoJVHlwZV9OVUxMEAASEAoMVHlwZV9wcm9kdWN0",
            "EAESDwoLVHlwZV9TY2FyY2UQAhIQCgxUeXBlX0Zhc2hpb24QAyp3Cg1Sb3V0",
            "ZVN0cmF0ZWd5EhAKDFR5cGVfTmVhcmVzdBAAEhEKDVR5cGVfU2FtZUFyZWEQ",
            "ARIRCg1UeXBlX05leHRBcmVhEAISFQoRVHlwZV9Ub0NlbnRlckFyZWEQAxIX",
            "ChNUeXBlX0Zyb21DZW50ZXJBcmVhEARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.TradingRespCode), typeof(global::SLG.TradingPortType), typeof(global::SLG.RouteStrategy), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CommodityInfo), global::SLG.CommodityInfo.Parser, new[]{ "ItemId", "ItemNum", "BuyPrice", "PortId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PortSellPrice), global::SLG.PortSellPrice.Parser, new[]{ "ItemId", "Price", "ScarcePortId", "FashionPortId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PortInfo), global::SLG.PortInfo.Parser, new[]{ "PortTableId", "ResetTime", "List", "ScarceItemId", "ScarceUpdateTime", "FashionItemId", "FashionUpdateTime", "Prosperity", "ScarceItemPrice", "FashionItemPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ItemIdNum), global::SLG.ItemIdNum.Parser, new[]{ "ItemId", "ItemNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BuyItem), global::SLG.BuyItem.Parser, new[]{ "PortEntityId", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SellItem), global::SLG.SellItem.Parser, new[]{ "PortEntityId", "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.tradingPortId), global::SLG.tradingPortId.Parser, new[]{ "PortEntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CommodityList), global::SLG.CommodityList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TradingPortInfo), global::SLG.TradingPortInfo.Parser, new[]{ "PortId", "Prosperity", "PortType", "PopRefreshTtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GoodsPortInfo), global::SLG.GoodsPortInfo.Parser, new[]{ "ItemId", "PortInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GoodsInfo), global::SLG.GoodsInfo.Parser, new[]{ "ItemId", "BuyPortId", "Buyprosperity", "SellPortId", "SellPortType", "Sellprosperity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TradingMainInfo), global::SLG.TradingMainInfo.Parser, new[]{ "Exp", "BuyGoods", "SellGoods", "Goods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.AutoTrade), global::SLG.AutoTrade.Parser, new[]{ "TarAreaId", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TradingMarket), global::SLG.TradingMarket.Parser, new[]{ "Goods" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.PortAndCommodityInfo), global::SLG.PortAndCommodityInfo.Parser, new[]{ "ItemId", "PortId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TradeRouteInfo), global::SLG.TradeRouteInfo.Parser, new[]{ "Income", "FinishTime", "Port" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TradingRespCode {
    /// <summary>
    ///操作成功
    /// </summary>
    [pbr::OriginalName("TradingResp_OK")] TradingRespOk = 0,
    /// <summary>
    ///需要消耗的不足
    /// </summary>
    [pbr::OriginalName("Trading_ResNotEnough")] TradingResNotEnough = 2,
    /// <summary>
    ///贸易港ID错误
    /// </summary>
    [pbr::OriginalName("Invalid_PortId")] InvalidPortId = 3,
    /// <summary>
    ///交易时没有在贸易港周边
    /// </summary>
    [pbr::OriginalName("Out_Distance")] OutDistance = 4,
    /// <summary>
    ///展示价格和服务器交易价格不同
    /// </summary>
    [pbr::OriginalName("Diff_Price")] DiffPrice = 5,
    /// <summary>
    ///玩家仓库剩余空间不足
    /// </summary>
    [pbr::OriginalName("Store_Full")] StoreFull = 6,
    /// <summary>
    ///获取玩家仓库失败
    /// </summary>
    [pbr::OriginalName("Store_Error")] StoreError = 7,
    /// <summary>
    ///交易参数无效
    /// </summary>
    [pbr::OriginalName("Invalid_ItemID")] InvalidItemId = 8,
    /// <summary>
    ///交易参数无效
    /// </summary>
    [pbr::OriginalName("Invalid_ItemNum")] InvalidItemNum = 9,
  }

  public enum TradingPortType {
    /// <summary>
    /// </summary>
    [pbr::OriginalName("Type_NULL")] TypeNull = 0,
    /// <summary>
    ///产地
    /// </summary>
    [pbr::OriginalName("Type_product")] TypeProduct = 1,
    /// <summary>
    ///稀缺地
    /// </summary>
    [pbr::OriginalName("Type_Scarce")] TypeScarce = 2,
    /// <summary>
    ///流行地
    /// </summary>
    [pbr::OriginalName("Type_Fashion")] TypeFashion = 3,
  }

  /// <summary>
  ///航线策略
  /// </summary>
  public enum RouteStrategy {
    /// <summary>
    ///最近
    /// </summary>
    [pbr::OriginalName("Type_Nearest")] TypeNearest = 0,
    /// <summary>
    ///同一地海
    /// </summary>
    [pbr::OriginalName("Type_SameArea")] TypeSameArea = 1,
    /// <summary>
    ///相邻地海
    /// </summary>
    [pbr::OriginalName("Type_NextArea")] TypeNextArea = 2,
    /// <summary>
    ///当前地海到中间地海
    /// </summary>
    [pbr::OriginalName("Type_ToCenterArea")] TypeToCenterArea = 3,
    /// <summary>
    ///中间地海到其他地海
    /// </summary>
    [pbr::OriginalName("Type_FromCenterArea")] TypeFromCenterArea = 4,
  }

  #endregion

  #region Messages
  public sealed partial class CommodityInfo : pb::IMessage<CommodityInfo> {
    private static readonly pb::MessageParser<CommodityInfo> _parser = new pb::MessageParser<CommodityInfo>(() => new CommodityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommodityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityInfo(CommodityInfo other) : this() {
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
      buyPrice_ = other.buyPrice_;
      portId_ = other.portId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityInfo Clone() {
      return new CommodityInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private uint itemNum_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "buyPrice" field.</summary>
    public const int BuyPriceFieldNumber = 3;
    private uint buyPrice_;
    /// <summary>
    ///购买价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyPrice {
      get { return buyPrice_; }
      set {
        buyPrice_ = value;
      }
    }

    /// <summary>Field number for the "portId" field.</summary>
    public const int PortIdFieldNumber = 4;
    private uint portId_;
    /// <summary>
    ///该商品当初是在哪个贸易港买的	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PortId {
      get { return portId_; }
      set {
        portId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommodityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommodityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      if (BuyPrice != other.BuyPrice) return false;
      if (PortId != other.PortId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (BuyPrice != 0) hash ^= BuyPrice.GetHashCode();
      if (PortId != 0) hash ^= PortId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemNum);
      }
      if (BuyPrice != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(BuyPrice);
      }
      if (PortId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PortId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
      }
      if (BuyPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyPrice);
      }
      if (PortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PortId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommodityInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      if (other.BuyPrice != 0) {
        BuyPrice = other.BuyPrice;
      }
      if (other.PortId != 0) {
        PortId = other.PortId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadUInt32();
            break;
          }
          case 24: {
            BuyPrice = input.ReadUInt32();
            break;
          }
          case 32: {
            PortId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PortSellPrice : pb::IMessage<PortSellPrice> {
    private static readonly pb::MessageParser<PortSellPrice> _parser = new pb::MessageParser<PortSellPrice>(() => new PortSellPrice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PortSellPrice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortSellPrice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortSellPrice(PortSellPrice other) : this() {
      itemId_ = other.itemId_;
      price_ = other.price_;
      scarcePortId_ = other.scarcePortId_;
      fashionPortId_ = other.fashionPortId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortSellPrice Clone() {
      return new PortSellPrice(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private uint price_;
    /// <summary>
    ///商品当前售价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "scarcePortId" field.</summary>
    public const int ScarcePortIdFieldNumber = 3;
    private uint scarcePortId_;
    /// <summary>
    ///稀缺地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScarcePortId {
      get { return scarcePortId_; }
      set {
        scarcePortId_ = value;
      }
    }

    /// <summary>Field number for the "fashionPortId" field.</summary>
    public const int FashionPortIdFieldNumber = 4;
    private uint fashionPortId_;
    /// <summary>
    ///流行地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionPortId {
      get { return fashionPortId_; }
      set {
        fashionPortId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PortSellPrice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PortSellPrice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (Price != other.Price) return false;
      if (ScarcePortId != other.ScarcePortId) return false;
      if (FashionPortId != other.FashionPortId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (ScarcePortId != 0) hash ^= ScarcePortId.GetHashCode();
      if (FashionPortId != 0) hash ^= FashionPortId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (Price != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Price);
      }
      if (ScarcePortId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ScarcePortId);
      }
      if (FashionPortId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FashionPortId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (ScarcePortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScarcePortId);
      }
      if (FashionPortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionPortId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PortSellPrice other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.ScarcePortId != 0) {
        ScarcePortId = other.ScarcePortId;
      }
      if (other.FashionPortId != 0) {
        FashionPortId = other.FashionPortId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            Price = input.ReadUInt32();
            break;
          }
          case 24: {
            ScarcePortId = input.ReadUInt32();
            break;
          }
          case 32: {
            FashionPortId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PortInfo : pb::IMessage<PortInfo> {
    private static readonly pb::MessageParser<PortInfo> _parser = new pb::MessageParser<PortInfo>(() => new PortInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PortInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortInfo(PortInfo other) : this() {
      portTableId_ = other.portTableId_;
      resetTime_ = other.resetTime_;
      list_ = other.list_.Clone();
      scarceItemId_ = other.scarceItemId_;
      scarceUpdateTime_ = other.scarceUpdateTime_;
      fashionItemId_ = other.fashionItemId_;
      fashionUpdateTime_ = other.fashionUpdateTime_;
      prosperity_ = other.prosperity_;
      scarceItemPrice_ = other.scarceItemPrice_;
      fashionItemPrice_ = other.fashionItemPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortInfo Clone() {
      return new PortInfo(this);
    }

    /// <summary>Field number for the "portTableId" field.</summary>
    public const int PortTableIdFieldNumber = 1;
    private uint portTableId_;
    /// <summary>
    ///港口table ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PortTableId {
      get { return portTableId_; }
      set {
        portTableId_ = value;
      }
    }

    /// <summary>Field number for the "resetTime" field.</summary>
    public const int ResetTimeFieldNumber = 2;
    private ulong resetTime_;
    /// <summary>
    ///重置时间	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ResetTime {
      get { return resetTime_; }
      set {
        resetTime_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SLG.PortSellPrice> _repeated_list_codec
        = pb::FieldCodec.ForMessage(34, global::SLG.PortSellPrice.Parser);
    private readonly pbc::RepeatedField<global::SLG.PortSellPrice> list_ = new pbc::RepeatedField<global::SLG.PortSellPrice>();
    /// <summary>
    ///当前时段在该港口卖出商品的价格指数	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PortSellPrice> List {
      get { return list_; }
    }

    /// <summary>Field number for the "scarceItemId" field.</summary>
    public const int ScarceItemIdFieldNumber = 5;
    private uint scarceItemId_;
    /// <summary>
    ///稀缺商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScarceItemId {
      get { return scarceItemId_; }
      set {
        scarceItemId_ = value;
      }
    }

    /// <summary>Field number for the "scarceUpdateTime" field.</summary>
    public const int ScarceUpdateTimeFieldNumber = 6;
    private ulong scarceUpdateTime_;
    /// <summary>
    ///稀缺商品下次更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScarceUpdateTime {
      get { return scarceUpdateTime_; }
      set {
        scarceUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "fashionItemId" field.</summary>
    public const int FashionItemIdFieldNumber = 7;
    private uint fashionItemId_;
    /// <summary>
    ///流行商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionItemId {
      get { return fashionItemId_; }
      set {
        fashionItemId_ = value;
      }
    }

    /// <summary>Field number for the "fashionUpdateTime" field.</summary>
    public const int FashionUpdateTimeFieldNumber = 8;
    private ulong fashionUpdateTime_;
    /// <summary>
    ///流行商品下次更新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FashionUpdateTime {
      get { return fashionUpdateTime_; }
      set {
        fashionUpdateTime_ = value;
      }
    }

    /// <summary>Field number for the "prosperity" field.</summary>
    public const int ProsperityFieldNumber = 9;
    private uint prosperity_;
    /// <summary>
    ///繁荣度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prosperity {
      get { return prosperity_; }
      set {
        prosperity_ = value;
      }
    }

    /// <summary>Field number for the "scarceItemPrice" field.</summary>
    public const int ScarceItemPriceFieldNumber = 10;
    private uint scarceItemPrice_;
    /// <summary>
    ///稀缺商品价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScarceItemPrice {
      get { return scarceItemPrice_; }
      set {
        scarceItemPrice_ = value;
      }
    }

    /// <summary>Field number for the "fashionItemPrice" field.</summary>
    public const int FashionItemPriceFieldNumber = 11;
    private uint fashionItemPrice_;
    /// <summary>
    ///流行商品价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FashionItemPrice {
      get { return fashionItemPrice_; }
      set {
        fashionItemPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PortInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PortInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortTableId != other.PortTableId) return false;
      if (ResetTime != other.ResetTime) return false;
      if(!list_.Equals(other.list_)) return false;
      if (ScarceItemId != other.ScarceItemId) return false;
      if (ScarceUpdateTime != other.ScarceUpdateTime) return false;
      if (FashionItemId != other.FashionItemId) return false;
      if (FashionUpdateTime != other.FashionUpdateTime) return false;
      if (Prosperity != other.Prosperity) return false;
      if (ScarceItemPrice != other.ScarceItemPrice) return false;
      if (FashionItemPrice != other.FashionItemPrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortTableId != 0) hash ^= PortTableId.GetHashCode();
      if (ResetTime != 0UL) hash ^= ResetTime.GetHashCode();
      hash ^= list_.GetHashCode();
      if (ScarceItemId != 0) hash ^= ScarceItemId.GetHashCode();
      if (ScarceUpdateTime != 0UL) hash ^= ScarceUpdateTime.GetHashCode();
      if (FashionItemId != 0) hash ^= FashionItemId.GetHashCode();
      if (FashionUpdateTime != 0UL) hash ^= FashionUpdateTime.GetHashCode();
      if (Prosperity != 0) hash ^= Prosperity.GetHashCode();
      if (ScarceItemPrice != 0) hash ^= ScarceItemPrice.GetHashCode();
      if (FashionItemPrice != 0) hash ^= FashionItemPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortTableId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PortTableId);
      }
      if (ResetTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ResetTime);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (ScarceItemId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScarceItemId);
      }
      if (ScarceUpdateTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ScarceUpdateTime);
      }
      if (FashionItemId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FashionItemId);
      }
      if (FashionUpdateTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(FashionUpdateTime);
      }
      if (Prosperity != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Prosperity);
      }
      if (ScarceItemPrice != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ScarceItemPrice);
      }
      if (FashionItemPrice != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(FashionItemPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortTableId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PortTableId);
      }
      if (ResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ResetTime);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (ScarceItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScarceItemId);
      }
      if (ScarceUpdateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScarceUpdateTime);
      }
      if (FashionItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionItemId);
      }
      if (FashionUpdateTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FashionUpdateTime);
      }
      if (Prosperity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prosperity);
      }
      if (ScarceItemPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScarceItemPrice);
      }
      if (FashionItemPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FashionItemPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PortInfo other) {
      if (other == null) {
        return;
      }
      if (other.PortTableId != 0) {
        PortTableId = other.PortTableId;
      }
      if (other.ResetTime != 0UL) {
        ResetTime = other.ResetTime;
      }
      list_.Add(other.list_);
      if (other.ScarceItemId != 0) {
        ScarceItemId = other.ScarceItemId;
      }
      if (other.ScarceUpdateTime != 0UL) {
        ScarceUpdateTime = other.ScarceUpdateTime;
      }
      if (other.FashionItemId != 0) {
        FashionItemId = other.FashionItemId;
      }
      if (other.FashionUpdateTime != 0UL) {
        FashionUpdateTime = other.FashionUpdateTime;
      }
      if (other.Prosperity != 0) {
        Prosperity = other.Prosperity;
      }
      if (other.ScarceItemPrice != 0) {
        ScarceItemPrice = other.ScarceItemPrice;
      }
      if (other.FashionItemPrice != 0) {
        FashionItemPrice = other.FashionItemPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PortTableId = input.ReadUInt32();
            break;
          }
          case 16: {
            ResetTime = input.ReadUInt64();
            break;
          }
          case 34: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 40: {
            ScarceItemId = input.ReadUInt32();
            break;
          }
          case 48: {
            ScarceUpdateTime = input.ReadUInt64();
            break;
          }
          case 56: {
            FashionItemId = input.ReadUInt32();
            break;
          }
          case 64: {
            FashionUpdateTime = input.ReadUInt64();
            break;
          }
          case 72: {
            Prosperity = input.ReadUInt32();
            break;
          }
          case 80: {
            ScarceItemPrice = input.ReadUInt32();
            break;
          }
          case 88: {
            FashionItemPrice = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemIdNum : pb::IMessage<ItemIdNum> {
    private static readonly pb::MessageParser<ItemIdNum> _parser = new pb::MessageParser<ItemIdNum>(() => new ItemIdNum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemIdNum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemIdNum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemIdNum(ItemIdNum other) : this() {
      itemId_ = other.itemId_;
      itemNum_ = other.itemNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemIdNum Clone() {
      return new ItemIdNum(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private uint itemNum_;
    /// <summary>
    ///数量	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemIdNum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemIdNum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemNum != other.ItemNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemIdNum other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuyItem : pb::IMessage<BuyItem> {
    private static readonly pb::MessageParser<BuyItem> _parser = new pb::MessageParser<BuyItem>(() => new BuyItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyItem(BuyItem other) : this() {
      portEntityId_ = other.portEntityId_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyItem Clone() {
      return new BuyItem(this);
    }

    /// <summary>Field number for the "portEntityId" field.</summary>
    public const int PortEntityIdFieldNumber = 1;
    private ulong portEntityId_;
    /// <summary>
    ///贸易港entityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PortEntityId {
      get { return portEntityId_; }
      set {
        portEntityId_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.ItemIdNum> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.ItemIdNum.Parser);
    private readonly pbc::RepeatedField<global::SLG.ItemIdNum> items_ = new pbc::RepeatedField<global::SLG.ItemIdNum>();
    /// <summary>
    ///购买的商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.ItemIdNum> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortEntityId != other.PortEntityId) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortEntityId != 0UL) hash ^= PortEntityId.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortEntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PortEntityId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortEntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PortEntityId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyItem other) {
      if (other == null) {
        return;
      }
      if (other.PortEntityId != 0UL) {
        PortEntityId = other.PortEntityId;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PortEntityId = input.ReadUInt64();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellItem : pb::IMessage<SellItem> {
    private static readonly pb::MessageParser<SellItem> _parser = new pb::MessageParser<SellItem>(() => new SellItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItem(SellItem other) : this() {
      portEntityId_ = other.portEntityId_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellItem Clone() {
      return new SellItem(this);
    }

    /// <summary>Field number for the "portEntityId" field.</summary>
    public const int PortEntityIdFieldNumber = 1;
    private ulong portEntityId_;
    /// <summary>
    ///贸易港Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PortEntityId {
      get { return portEntityId_; }
      set {
        portEntityId_ = value;
      }
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.ItemIdNum> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.ItemIdNum.Parser);
    private readonly pbc::RepeatedField<global::SLG.ItemIdNum> items_ = new pbc::RepeatedField<global::SLG.ItemIdNum>();
    /// <summary>
    ///售卖的商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.ItemIdNum> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortEntityId != other.PortEntityId) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortEntityId != 0UL) hash ^= PortEntityId.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortEntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PortEntityId);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortEntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PortEntityId);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellItem other) {
      if (other == null) {
        return;
      }
      if (other.PortEntityId != 0UL) {
        PortEntityId = other.PortEntityId;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PortEntityId = input.ReadUInt64();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class tradingPortId : pb::IMessage<tradingPortId> {
    private static readonly pb::MessageParser<tradingPortId> _parser = new pb::MessageParser<tradingPortId>(() => new tradingPortId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tradingPortId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tradingPortId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tradingPortId(tradingPortId other) : this() {
      portEntityId_ = other.portEntityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tradingPortId Clone() {
      return new tradingPortId(this);
    }

    /// <summary>Field number for the "portEntityId" field.</summary>
    public const int PortEntityIdFieldNumber = 1;
    private ulong portEntityId_;
    /// <summary>
    ///贸易港Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PortEntityId {
      get { return portEntityId_; }
      set {
        portEntityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tradingPortId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tradingPortId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortEntityId != other.PortEntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortEntityId != 0UL) hash ^= PortEntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortEntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PortEntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortEntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PortEntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tradingPortId other) {
      if (other == null) {
        return;
      }
      if (other.PortEntityId != 0UL) {
        PortEntityId = other.PortEntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PortEntityId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommodityList : pb::IMessage<CommodityList> {
    private static readonly pb::MessageParser<CommodityList> _parser = new pb::MessageParser<CommodityList>(() => new CommodityList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommodityList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityList(CommodityList other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommodityList Clone() {
      return new CommodityList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.CommodityInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.CommodityInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.CommodityInfo> list_ = new pbc::RepeatedField<global::SLG.CommodityInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.CommodityInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommodityList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommodityList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommodityList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradingPortInfo : pb::IMessage<TradingPortInfo> {
    private static readonly pb::MessageParser<TradingPortInfo> _parser = new pb::MessageParser<TradingPortInfo>(() => new TradingPortInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradingPortInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPortInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPortInfo(TradingPortInfo other) : this() {
      portId_ = other.portId_;
      prosperity_ = other.prosperity_;
      portType_ = other.portType_;
      popRefreshTtime_ = other.popRefreshTtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingPortInfo Clone() {
      return new TradingPortInfo(this);
    }

    /// <summary>Field number for the "portId" field.</summary>
    public const int PortIdFieldNumber = 1;
    private ulong portId_;
    /// <summary>
    ///贸易港Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PortId {
      get { return portId_; }
      set {
        portId_ = value;
      }
    }

    /// <summary>Field number for the "prosperity" field.</summary>
    public const int ProsperityFieldNumber = 2;
    private uint prosperity_;
    /// <summary>
    ///贸易港繁荣度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prosperity {
      get { return prosperity_; }
      set {
        prosperity_ = value;
      }
    }

    /// <summary>Field number for the "portType" field.</summary>
    public const int PortTypeFieldNumber = 3;
    private uint portType_;
    /// <summary>
    ///贸易港的性质，1：产地，2：稀缺地3：流行地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PortType {
      get { return portType_; }
      set {
        portType_ = value;
      }
    }

    /// <summary>Field number for the "popRefreshTtime" field.</summary>
    public const int PopRefreshTtimeFieldNumber = 4;
    private ulong popRefreshTtime_;
    /// <summary>
    ///流行商品下次刷新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PopRefreshTtime {
      get { return popRefreshTtime_; }
      set {
        popRefreshTtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradingPortInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradingPortInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PortId != other.PortId) return false;
      if (Prosperity != other.Prosperity) return false;
      if (PortType != other.PortType) return false;
      if (PopRefreshTtime != other.PopRefreshTtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PortId != 0UL) hash ^= PortId.GetHashCode();
      if (Prosperity != 0) hash ^= Prosperity.GetHashCode();
      if (PortType != 0) hash ^= PortType.GetHashCode();
      if (PopRefreshTtime != 0UL) hash ^= PopRefreshTtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PortId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PortId);
      }
      if (Prosperity != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Prosperity);
      }
      if (PortType != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PortType);
      }
      if (PopRefreshTtime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(PopRefreshTtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PortId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PortId);
      }
      if (Prosperity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prosperity);
      }
      if (PortType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PortType);
      }
      if (PopRefreshTtime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PopRefreshTtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradingPortInfo other) {
      if (other == null) {
        return;
      }
      if (other.PortId != 0UL) {
        PortId = other.PortId;
      }
      if (other.Prosperity != 0) {
        Prosperity = other.Prosperity;
      }
      if (other.PortType != 0) {
        PortType = other.PortType;
      }
      if (other.PopRefreshTtime != 0UL) {
        PopRefreshTtime = other.PopRefreshTtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PortId = input.ReadUInt64();
            break;
          }
          case 16: {
            Prosperity = input.ReadUInt32();
            break;
          }
          case 24: {
            PortType = input.ReadUInt32();
            break;
          }
          case 32: {
            PopRefreshTtime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoodsPortInfo : pb::IMessage<GoodsPortInfo> {
    private static readonly pb::MessageParser<GoodsPortInfo> _parser = new pb::MessageParser<GoodsPortInfo>(() => new GoodsPortInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoodsPortInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsPortInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsPortInfo(GoodsPortInfo other) : this() {
      itemId_ = other.itemId_;
      portInfo_ = other.portInfo_ != null ? other.portInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsPortInfo Clone() {
      return new GoodsPortInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "portInfo" field.</summary>
    public const int PortInfoFieldNumber = 2;
    private global::SLG.TradingPortInfo portInfo_;
    /// <summary>
    ///贸易港信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.TradingPortInfo PortInfo {
      get { return portInfo_; }
      set {
        portInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoodsPortInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoodsPortInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (!object.Equals(PortInfo, other.PortInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (portInfo_ != null) hash ^= PortInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (portInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PortInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (portInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PortInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoodsPortInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.portInfo_ != null) {
        if (portInfo_ == null) {
          PortInfo = new global::SLG.TradingPortInfo();
        }
        PortInfo.MergeFrom(other.PortInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (portInfo_ == null) {
              PortInfo = new global::SLG.TradingPortInfo();
            }
            input.ReadMessage(PortInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoodsInfo : pb::IMessage<GoodsInfo> {
    private static readonly pb::MessageParser<GoodsInfo> _parser = new pb::MessageParser<GoodsInfo>(() => new GoodsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoodsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsInfo(GoodsInfo other) : this() {
      itemId_ = other.itemId_;
      buyPortId_ = other.buyPortId_;
      buyprosperity_ = other.buyprosperity_;
      sellPortId_ = other.sellPortId_;
      sellPortType_ = other.sellPortType_;
      sellprosperity_ = other.sellprosperity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoodsInfo Clone() {
      return new GoodsInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///商品Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "buyPortId" field.</summary>
    public const int BuyPortIdFieldNumber = 2;
    private uint buyPortId_;
    /// <summary>
    ///可以购买贸易港Id	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyPortId {
      get { return buyPortId_; }
      set {
        buyPortId_ = value;
      }
    }

    /// <summary>Field number for the "buyprosperity" field.</summary>
    public const int BuyprosperityFieldNumber = 3;
    private uint buyprosperity_;
    /// <summary>
    ///可以购买港口的繁荣度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Buyprosperity {
      get { return buyprosperity_; }
      set {
        buyprosperity_ = value;
      }
    }

    /// <summary>Field number for the "sellPortId" field.</summary>
    public const int SellPortIdFieldNumber = 4;
    private uint sellPortId_;
    /// <summary>
    ///贸易港Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellPortId {
      get { return sellPortId_; }
      set {
        sellPortId_ = value;
      }
    }

    /// <summary>Field number for the "sellPortType" field.</summary>
    public const int SellPortTypeFieldNumber = 5;
    private uint sellPortType_;
    /// <summary>
    ///贸易港的性质，2：稀缺地3：流行地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SellPortType {
      get { return sellPortType_; }
      set {
        sellPortType_ = value;
      }
    }

    /// <summary>Field number for the "sellprosperity" field.</summary>
    public const int SellprosperityFieldNumber = 6;
    private uint sellprosperity_;
    /// <summary>
    ///可以卖出港口的繁荣度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Sellprosperity {
      get { return sellprosperity_; }
      set {
        sellprosperity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoodsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoodsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (BuyPortId != other.BuyPortId) return false;
      if (Buyprosperity != other.Buyprosperity) return false;
      if (SellPortId != other.SellPortId) return false;
      if (SellPortType != other.SellPortType) return false;
      if (Sellprosperity != other.Sellprosperity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (BuyPortId != 0) hash ^= BuyPortId.GetHashCode();
      if (Buyprosperity != 0) hash ^= Buyprosperity.GetHashCode();
      if (SellPortId != 0) hash ^= SellPortId.GetHashCode();
      if (SellPortType != 0) hash ^= SellPortType.GetHashCode();
      if (Sellprosperity != 0) hash ^= Sellprosperity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (BuyPortId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BuyPortId);
      }
      if (Buyprosperity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Buyprosperity);
      }
      if (SellPortId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SellPortId);
      }
      if (SellPortType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SellPortType);
      }
      if (Sellprosperity != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Sellprosperity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (BuyPortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyPortId);
      }
      if (Buyprosperity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Buyprosperity);
      }
      if (SellPortId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SellPortId);
      }
      if (SellPortType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SellPortType);
      }
      if (Sellprosperity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sellprosperity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoodsInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.BuyPortId != 0) {
        BuyPortId = other.BuyPortId;
      }
      if (other.Buyprosperity != 0) {
        Buyprosperity = other.Buyprosperity;
      }
      if (other.SellPortId != 0) {
        SellPortId = other.SellPortId;
      }
      if (other.SellPortType != 0) {
        SellPortType = other.SellPortType;
      }
      if (other.Sellprosperity != 0) {
        Sellprosperity = other.Sellprosperity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            BuyPortId = input.ReadUInt32();
            break;
          }
          case 24: {
            Buyprosperity = input.ReadUInt32();
            break;
          }
          case 32: {
            SellPortId = input.ReadUInt32();
            break;
          }
          case 40: {
            SellPortType = input.ReadUInt32();
            break;
          }
          case 48: {
            Sellprosperity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradingMainInfo : pb::IMessage<TradingMainInfo> {
    private static readonly pb::MessageParser<TradingMainInfo> _parser = new pb::MessageParser<TradingMainInfo>(() => new TradingMainInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradingMainInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingMainInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingMainInfo(TradingMainInfo other) : this() {
      exp_ = other.exp_;
      buyGoods_ = other.buyGoods_ != null ? other.buyGoods_.Clone() : null;
      sellGoods_ = other.sellGoods_ != null ? other.sellGoods_.Clone() : null;
      goods_ = other.goods_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingMainInfo Clone() {
      return new TradingMainInfo(this);
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private uint exp_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "buyGoods" field.</summary>
    public const int BuyGoodsFieldNumber = 3;
    private global::SLG.GoodsPortInfo buyGoods_;
    /// <summary>
    ///最低买价商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.GoodsPortInfo BuyGoods {
      get { return buyGoods_; }
      set {
        buyGoods_ = value;
      }
    }

    /// <summary>Field number for the "sellGoods" field.</summary>
    public const int SellGoodsFieldNumber = 4;
    private global::SLG.GoodsPortInfo sellGoods_;
    /// <summary>
    ///最高卖价商品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.GoodsPortInfo SellGoods {
      get { return sellGoods_; }
      set {
        sellGoods_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SLG.GoodsInfo> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(42, global::SLG.GoodsInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.GoodsInfo> goods_ = new pbc::RepeatedField<global::SLG.GoodsInfo>();
    /// <summary>
    ///小道消息推荐商品	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.GoodsInfo> Goods {
      get { return goods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradingMainInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradingMainInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exp != other.Exp) return false;
      if (!object.Equals(BuyGoods, other.BuyGoods)) return false;
      if (!object.Equals(SellGoods, other.SellGoods)) return false;
      if(!goods_.Equals(other.goods_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (buyGoods_ != null) hash ^= BuyGoods.GetHashCode();
      if (sellGoods_ != null) hash ^= SellGoods.GetHashCode();
      hash ^= goods_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Exp);
      }
      if (buyGoods_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BuyGoods);
      }
      if (sellGoods_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SellGoods);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (buyGoods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuyGoods);
      }
      if (sellGoods_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellGoods);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradingMainInfo other) {
      if (other == null) {
        return;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.buyGoods_ != null) {
        if (buyGoods_ == null) {
          BuyGoods = new global::SLG.GoodsPortInfo();
        }
        BuyGoods.MergeFrom(other.BuyGoods);
      }
      if (other.sellGoods_ != null) {
        if (sellGoods_ == null) {
          SellGoods = new global::SLG.GoodsPortInfo();
        }
        SellGoods.MergeFrom(other.SellGoods);
      }
      goods_.Add(other.goods_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 16: {
            Exp = input.ReadUInt32();
            break;
          }
          case 26: {
            if (buyGoods_ == null) {
              BuyGoods = new global::SLG.GoodsPortInfo();
            }
            input.ReadMessage(BuyGoods);
            break;
          }
          case 34: {
            if (sellGoods_ == null) {
              SellGoods = new global::SLG.GoodsPortInfo();
            }
            input.ReadMessage(SellGoods);
            break;
          }
          case 42: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///自动跑商的参数
  /// </summary>
  public sealed partial class AutoTrade : pb::IMessage<AutoTrade> {
    private static readonly pb::MessageParser<AutoTrade> _parser = new pb::MessageParser<AutoTrade>(() => new AutoTrade());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoTrade> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoTrade() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoTrade(AutoTrade other) : this() {
      tarAreaId_ = other.tarAreaId_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoTrade Clone() {
      return new AutoTrade(this);
    }

    /// <summary>Field number for the "tarAreaId" field.</summary>
    public const int TarAreaIdFieldNumber = 1;
    private uint tarAreaId_;
    /// <summary>
    ///目标贸易区
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TarAreaId {
      get { return tarAreaId_; }
      set {
        tarAreaId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    /// <summary>
    ///挂机时长 分钟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoTrade);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoTrade other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TarAreaId != other.TarAreaId) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TarAreaId != 0) hash ^= TarAreaId.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TarAreaId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TarAreaId);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TarAreaId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TarAreaId);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoTrade other) {
      if (other == null) {
        return;
      }
      if (other.TarAreaId != 0) {
        TarAreaId = other.TarAreaId;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TarAreaId = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradingMarket : pb::IMessage<TradingMarket> {
    private static readonly pb::MessageParser<TradingMarket> _parser = new pb::MessageParser<TradingMarket>(() => new TradingMarket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradingMarket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingMarket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingMarket(TradingMarket other) : this() {
      goods_ = other.goods_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradingMarket Clone() {
      return new TradingMarket(this);
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.GoodsPortInfo> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.GoodsPortInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.GoodsPortInfo> goods_ = new pbc::RepeatedField<global::SLG.GoodsPortInfo>();
    /// <summary>
    ///行情道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.GoodsPortInfo> Goods {
      get { return goods_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradingMarket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradingMarket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!goods_.Equals(other.goods_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= goods_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goods_.WriteTo(output, _repeated_goods_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradingMarket other) {
      if (other == null) {
        return;
      }
      goods_.Add(other.goods_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PortAndCommodityInfo : pb::IMessage<PortAndCommodityInfo> {
    private static readonly pb::MessageParser<PortAndCommodityInfo> _parser = new pb::MessageParser<PortAndCommodityInfo>(() => new PortAndCommodityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PortAndCommodityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortAndCommodityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortAndCommodityInfo(PortAndCommodityInfo other) : this() {
      itemId_ = other.itemId_;
      portId_ = other.portId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PortAndCommodityInfo Clone() {
      return new PortAndCommodityInfo(this);
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private uint itemId_;
    /// <summary>
    ///在当前港口买的商品Id，如果是卖的，那么填0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "portId" field.</summary>
    public const int PortIdFieldNumber = 2;
    private ulong portId_;
    /// <summary>
    ///贸易港Id---主岛为0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PortId {
      get { return portId_; }
      set {
        portId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PortAndCommodityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PortAndCommodityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (PortId != other.PortId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (PortId != 0UL) hash ^= PortId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ItemId);
      }
      if (PortId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PortId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemId);
      }
      if (PortId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PortId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PortAndCommodityInfo other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.PortId != 0UL) {
        PortId = other.PortId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ItemId = input.ReadUInt32();
            break;
          }
          case 16: {
            PortId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TradeRouteInfo : pb::IMessage<TradeRouteInfo> {
    private static readonly pb::MessageParser<TradeRouteInfo> _parser = new pb::MessageParser<TradeRouteInfo>(() => new TradeRouteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeRouteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgTradingReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeRouteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeRouteInfo(TradeRouteInfo other) : this() {
      income_ = other.income_;
      finishTime_ = other.finishTime_;
      port_ = other.port_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeRouteInfo Clone() {
      return new TradeRouteInfo(this);
    }

    /// <summary>Field number for the "income" field.</summary>
    public const int IncomeFieldNumber = 1;
    private uint income_;
    /// <summary>
    ///当前航线总收益
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Income {
      get { return income_; }
      set {
        income_ = value;
      }
    }

    /// <summary>Field number for the "finishTime" field.</summary>
    public const int FinishTimeFieldNumber = 2;
    private uint finishTime_;
    /// <summary>
    ///预计结束时间戳 单位：s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.PortAndCommodityInfo> _repeated_port_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.PortAndCommodityInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.PortAndCommodityInfo> port_ = new pbc::RepeatedField<global::SLG.PortAndCommodityInfo>();
    /// <summary>
    ///航线港口信息————如果有主岛包含主岛
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.PortAndCommodityInfo> Port {
      get { return port_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeRouteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeRouteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Income != other.Income) return false;
      if (FinishTime != other.FinishTime) return false;
      if(!port_.Equals(other.port_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Income != 0) hash ^= Income.GetHashCode();
      if (FinishTime != 0) hash ^= FinishTime.GetHashCode();
      hash ^= port_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Income != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Income);
      }
      if (FinishTime != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishTime);
      }
      port_.WriteTo(output, _repeated_port_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Income != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Income);
      }
      if (FinishTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishTime);
      }
      size += port_.CalculateSize(_repeated_port_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeRouteInfo other) {
      if (other == null) {
        return;
      }
      if (other.Income != 0) {
        Income = other.Income;
      }
      if (other.FinishTime != 0) {
        FinishTime = other.FinishTime;
      }
      port_.Add(other.port_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Income = input.ReadUInt32();
            break;
          }
          case 16: {
            FinishTime = input.ReadUInt32();
            break;
          }
          case 26: {
            port_.AddEntriesFrom(input, _repeated_port_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
