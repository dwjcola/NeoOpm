// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_union.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_union.proto</summary>
  public static partial class MsgUnionReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_union.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgUnionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9tc2dfdW5pb24ucHJvdG8SA1NMRyKRAgoJVW5pb25JbmZvEg8KB3VuaW9u",
            "SWQYASABKAQSDAoEYWJichgCIAEoCRIMCgRuYW1lGAMgASgJEg0KBWludHJv",
            "GAQgASgJEhAKCGpvaW5UeXBlGAUgASgNEg0KBXBvd2VyGAYgASgEEg0KBWJh",
            "ZGdlGAcgASgEEhEKCW1lbWJlck51bRgIIAEoDRIQCghsYW5ndWFnZRgJIAEo",
            "DRISCgpsZWFkZXJJY29uGAogASgNEhAKCGxlYWRlcklkGAsgASgEEhIKCmxl",
            "YWRlck5hbWUYDCABKAkSEAoIaGFkQXBwbHkYDSABKA0SEgoKcG93ZXJsaW1p",
            "dBgOIAEoDRITCgtkaXNtaXNzVGltZRgPIAEoBCKXAQoPVW5pb25NZW1iZXJJ",
            "bmZvEhAKCHBsYXllcklkGAEgASgEEgwKBG5hbWUYAiABKAkSDAoEaWNvbhgD",
            "IAEoDRINCgVwb3dlchgEIAEoBBIMCgRraWxsGAUgASgNEgsKA2pvYhgGIAEo",
            "DRINCgV0aXRsZRgHIAEoDRIOCgZvbmxpbmUYCCABKA0SDQoFbGV2ZWwYCSAB",
            "KA0iXAoPQXBwbHlQbGF5ZXJJbmZvEhAKCHBsYXllcklkGAEgASgEEgwKBG5h",
            "bWUYAiABKAkSDAoEaWNvbhgDIAEoDRINCgVwb3dlchgEIAEoBBIMCgRraWxs",
            "GAUgASgNIn4KCkNyZWF0ZUFyZ3MSDAoEYWJichgBIAEoCRIMCgRuYW1lGAIg",
            "ASgJEg0KBWludHJvGAMgASgJEhAKCGpvaW5UeXBlGAQgASgNEhIKCnBvd2Vy",
            "TGltaXQYBSABKA0SDQoFYmFkZ2UYBiABKAQSEAoIbGFuZ3VhZ2UYByABKA0i",
            "vQIKD1VuaW9uT3BlcmF0ZU1zZxIyCgdvcGVyYXRlGAEgASgOMiEuU0xHLlVu",
            "aW9uT3BlcmF0ZU1zZy5VT3BlcmF0ZVR5cGUSDwoHdW5pb25JZBgCIAEoBBIQ",
            "CghwbGF5ZXJJZBgDIAEoBBIPCgdvdGhlcklkGAQgASgEIsEBCgxVT3BlcmF0",
            "ZVR5cGUSCQoFQXBwbHkQABIPCgtDYW5jZWxBcHBseRABEg4KCkFncmVlQXBw",
            "bHkQAhIPCgtSZWZ1c2VBcHBseRADEggKBEpvaW4QBBIOCgpXaXRoZHJhd2Fs",
            "EAUSCwoHVGFrZU9mZhAGEgoKBkludml0ZRAHEhAKDFJlZnVzZUludml0ZRAI",
            "Eg8KC0FncmVlSW52aXRlEAkSCwoHRGlzbWlzcxAKEhEKDUNhbmNlbERpc21p",
            "c3MQCyLAAQoLVW5pb25Kb2JNc2cSMQoHb3BlcmF0ZRgBIAEoDjIgLlNMRy5V",
            "bmlvbkpvYk1zZy5VT3BlcmF0ZUpvYlR5cGUSEAoIcGxheWVySWQYAiABKAQS",
            "DwoHb3RoZXJJZBgDIAEoBBILCgNqb2IYBCABKA0SDQoFdGl0bGUYBSABKA0i",
            "PwoPVU9wZXJhdGVKb2JUeXBlEg8KC0NvbmZlclRpdGxlEAASDQoJY2hhbmdl",
            "Sm9iEAESDAoIQWJkaWNhdGUQAiIVCgdVbmlvbklkEgoKAklkGAEgASgEIjsK",
            "CVVuaW9uTGlzdBIcCgRsaXN0GAEgAygLMg4uU0xHLlVuaW9uSW5mbxIQCghh",
            "cHBseW51bRgCIAEoDSI6Cg9BcHBseVBsYXllckxpc3QSJwoJdW5pb25MaXN0",
            "GAEgAygLMhQuU0xHLkFwcGx5UGxheWVySW5mbyJVCglVbmlvbkRhdGESIQoJ",
            "dW5pb25JbmZvGAEgASgLMg4uU0xHLlVuaW9uSW5mbxIlCgdtZW1iZXJzGAIg",
            "AygLMhQuU0xHLlVuaW9uTWVtYmVySW5mbyI1CgxVbmlvbk1lbWJlcnMSJQoH",
            "bWVtYmVycxgBIAMoCzIULlNMRy5Vbmlvbk1lbWJlckluZm8iMAoKU2VhcmNo",
            "QXJncxIQCghrZXl3b3JsZBgBIAEoCRIQCghsYW5ndWFnZRgCIAEoDSJuChJT",
            "ZWFyY2hlZFBsYXllckluZm8SEAoIcGxheWVySWQYASABKAQSDAoEbmFtZRgC",
            "IAEoCRIMCgRpY29uGAMgASgNEg0KBXBvd2VyGAQgASgEEg0KBWxldmVsGAUg",
            "ASgNEgwKBGtpbGwYBiABKA0iNgoNSW52aXRlUGxheWVycxIlCgRsaXN0GAEg",
            "AygLMhcuU0xHLlNlYXJjaGVkUGxheWVySW5mbyq6BAoNVW5pb25SZXNwQ29k",
            "ZRIQCgxVbmlvblJlc3BfT0sQABINCglBYmJyX1VzZWQQARIOCgpBYmJyX0Vy",
            "cm9yEAISDQoJTmFtZV9Vc2VkEAMSDgoKTmFtZV9FcnJvchAEEg8KC1NjcmVl",
            "bl9Xb3JkEAUSEwoPTW9uZXlfTm90RW5vdWdoEAYSDwoLUG93ZXJfTGltaXQQ",
            "BxIPCgtNZW1iZXJfRnVsbBAIEhMKD1VuaW9uX0Rpc2JhbmRlZBAJEhAKDE5v",
            "X0F1dGhvcml0eRAKEg8KC0ludHJvX0Vycm9yEAsSEgoOT3BlcmF0ZV9JbGxl",
            "Z2EQDBISCg5Vbmlvbl9OT1RFeGlzdBANEhMKD01lbWJlcl9OT1RFeGlzdBAO",
            "EhYKEk1lbWJlcl9NQVhKb2JMZXZlbBAPEhYKEk1lbWJlcl9NSU5Kb2JMZXZl",
            "bBAQEg4KCk5PVF9MZWFkZXIQERITCg9QbGF5ZXJfTk9URXhpc3QQEhINCglB",
            "cHBseV9NYXgQExIMCghJbl9VbmlvbhAUEg8KC0hhZF9JbnZpdGVkEBUSEQoN",
            "SGFkX3JlZnVzZWRDRBAWEhgKFEFwcGx5X05vdEluQXBwbHlMaXN0EBcSGgoW",
            "SW52aXRlX05vdEluSW52aXRlTGlzdBAYEhUKEURpc21pc3NfTm90X0FsbG93",
            "EBkSDwoLUmVMZWFkZXJfQ0QQGhIVChFMZWFkZXJfd2l0aGRyYXdhbBAbEhEK",
            "DXdpdGhkcmF3YWxfY2QQHCpFCg1VbmlvbkpvaW5UeXBlEhAKDEpvaW5fSW52",
            "YWlsZBAAEhAKDEpvaW5fRnJlZWRvbRABEhAKDEpvaW5fQnlBcHBseRACKlIK",
            "CFVuaW9uSm9iEgoKBkpvYl9SMBAAEgoKBkpvYl9SMRABEgoKBkpvYl9SMhAC",
            "EgoKBkpvYl9SMxADEgoKBkpvYl9SNBAEEgoKBkpvYl9SNRAFKlAKD1VuaW9u",
            "TG9zZVJlYXNvbhIVChFSZWFzb25fV2l0aGRyYXdhbBAAEhIKDlJlYXNvbl9U",
            "YWtlT2ZmEAESEgoOUmVhc29uX0Rpc21pc3MQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.UnionRespCode), typeof(global::SLG.UnionJoinType), typeof(global::SLG.UnionJob), typeof(global::SLG.UnionLoseReason), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionInfo), global::SLG.UnionInfo.Parser, new[]{ "UnionId", "Abbr", "Name", "Intro", "JoinType", "Power", "Badge", "MemberNum", "Language", "LeaderIcon", "LeaderId", "LeaderName", "HadApply", "Powerlimit", "DismissTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionMemberInfo), global::SLG.UnionMemberInfo.Parser, new[]{ "PlayerId", "Name", "Icon", "Power", "Kill", "Job", "Title", "Online", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ApplyPlayerInfo), global::SLG.ApplyPlayerInfo.Parser, new[]{ "PlayerId", "Name", "Icon", "Power", "Kill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CreateArgs), global::SLG.CreateArgs.Parser, new[]{ "Abbr", "Name", "Intro", "JoinType", "PowerLimit", "Badge", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionOperateMsg), global::SLG.UnionOperateMsg.Parser, new[]{ "Operate", "UnionId", "PlayerId", "OtherId" }, null, new[]{ typeof(global::SLG.UnionOperateMsg.Types.UOperateType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionJobMsg), global::SLG.UnionJobMsg.Parser, new[]{ "Operate", "PlayerId", "OtherId", "Job", "Title" }, null, new[]{ typeof(global::SLG.UnionJobMsg.Types.UOperateJobType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionId), global::SLG.UnionId.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionList), global::SLG.UnionList.Parser, new[]{ "List", "Applynum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ApplyPlayerList), global::SLG.ApplyPlayerList.Parser, new[]{ "UnionList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionData), global::SLG.UnionData.Parser, new[]{ "UnionInfo", "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.UnionMembers), global::SLG.UnionMembers.Parser, new[]{ "Members" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SearchArgs), global::SLG.SearchArgs.Parser, new[]{ "Keyworld", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SearchedPlayerInfo), global::SLG.SearchedPlayerInfo.Parser, new[]{ "PlayerId", "Name", "Icon", "Power", "Level", "Kill" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.InvitePlayers), global::SLG.InvitePlayers.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum UnionRespCode {
    /// <summary>
    ///操作成功
    /// </summary>
    [pbr::OriginalName("UnionResp_OK")] UnionRespOk = 0,
    /// <summary>
    ///简称已使用
    /// </summary>
    [pbr::OriginalName("Abbr_Used")] AbbrUsed = 1,
    /// <summary>
    ///简称与要求不符
    /// </summary>
    [pbr::OriginalName("Abbr_Error")] AbbrError = 2,
    /// <summary>
    ///名称已被使用
    /// </summary>
    [pbr::OriginalName("Name_Used")] NameUsed = 3,
    /// <summary>
    ///名称与要求不符
    /// </summary>
    [pbr::OriginalName("Name_Error")] NameError = 4,
    /// <summary>
    ///含有屏蔽字
    /// </summary>
    [pbr::OriginalName("Screen_Word")] ScreenWord = 5,
    /// <summary>
    ///金钱不足
    /// </summary>
    [pbr::OriginalName("Money_NotEnough")] MoneyNotEnough = 6,
    /// <summary>
    ///战力限制
    /// </summary>
    [pbr::OriginalName("Power_Limit")] PowerLimit = 7,
    /// <summary>
    ///成员已满
    /// </summary>
    [pbr::OriginalName("Member_Full")] MemberFull = 8,
    /// <summary>
    ///联盟已解散  
    /// </summary>
    [pbr::OriginalName("Union_Disbanded")] UnionDisbanded = 9,
    /// <summary>
    ///没有权限
    /// </summary>
    [pbr::OriginalName("No_Authority")] NoAuthority = 10,
    /// <summary>
    ///简介超长
    /// </summary>
    [pbr::OriginalName("Intro_Error")] IntroError = 11,
    /// <summary>
    ///非法操作
    /// </summary>
    [pbr::OriginalName("Operate_Illega")] OperateIllega = 12,
    /// <summary>
    ///联盟不存在
    /// </summary>
    [pbr::OriginalName("Union_NOTExist")] UnionNotexist = 13,
    /// <summary>
    ///联盟中不存在该成员
    /// </summary>
    [pbr::OriginalName("Member_NOTExist")] MemberNotexist = 14,
    /// <summary>
    ///联盟成员已是最高级别
    /// </summary>
    [pbr::OriginalName("Member_MAXJobLevel")] MemberMaxjobLevel = 15,
    /// <summary>
    ///联盟成员已是最低级别，不能再降级了
    /// </summary>
    [pbr::OriginalName("Member_MINJobLevel")] MemberMinjobLevel = 16,
    /// <summary>
    ///不是盟主
    /// </summary>
    [pbr::OriginalName("NOT_Leader")] NotLeader = 17,
    /// <summary>
    ///取不到玩家数据
    /// </summary>
    [pbr::OriginalName("Player_NOTExist")] PlayerNotexist = 18,
    /// <summary>
    ///申请数量达到上限
    /// </summary>
    [pbr::OriginalName("Apply_Max")] ApplyMax = 19,
    /// <summary>
    ///已经在联盟中
    /// </summary>
    [pbr::OriginalName("In_Union")] InUnion = 20,
    /// <summary>
    ///已经邀请过了
    /// </summary>
    [pbr::OriginalName("Had_Invited")] HadInvited = 21,
    /// <summary>
    ///申请被拒绝了，还没有过冷却
    /// </summary>
    [pbr::OriginalName("Had_refusedCD")] HadRefusedCd = 22,
    /// <summary>
    ///不在联盟申请列表中  
    /// </summary>
    [pbr::OriginalName("Apply_NotInApplyList")] ApplyNotInApplyList = 23,
    /// <summary>
    ///不在邀请列表中
    /// </summary>
    [pbr::OriginalName("Invite_NotInInviteList")] InviteNotInInviteList = 24,
    /// <summary>
    ///开服三天内不允许解散联盟
    /// </summary>
    [pbr::OriginalName("Dismiss_Not_Allow")] DismissNotAllow = 25,
    /// <summary>
    ///转让盟主后一段时间内不能创建联盟或者成为其他联盟的盟主
    /// </summary>
    [pbr::OriginalName("ReLeader_CD")] ReLeaderCd = 26,
    /// <summary>
    ///不允许盟主退出
    /// </summary>
    [pbr::OriginalName("Leader_withdrawal")] LeaderWithdrawal = 27,
    /// <summary>
    ///退出后再次加入的CD
    /// </summary>
    [pbr::OriginalName("withdrawal_cd")] WithdrawalCd = 28,
  }

  public enum UnionJoinType {
    [pbr::OriginalName("Join_Invaild")] JoinInvaild = 0,
    /// <summary>
    ///自由加入
    /// </summary>
    [pbr::OriginalName("Join_Freedom")] JoinFreedom = 1,
    /// <summary>
    ///申请加入
    /// </summary>
    [pbr::OriginalName("Join_ByApply")] JoinByApply = 2,
  }

  public enum UnionJob {
    /// <summary>
    ///占位用
    /// </summary>
    [pbr::OriginalName("Job_R0")] JobR0 = 0,
    /// <summary>
    ///成员
    /// </summary>
    [pbr::OriginalName("Job_R1")] JobR1 = 1,
    /// <summary>
    ///精英
    /// </summary>
    [pbr::OriginalName("Job_R2")] JobR2 = 2,
    /// <summary>
    ///高级精英
    /// </summary>
    [pbr::OriginalName("Job_R3")] JobR3 = 3,
    /// <summary>
    ///官员高级官员
    /// </summary>
    [pbr::OriginalName("Job_R4")] JobR4 = 4,
    /// <summary>
    ///盟主
    /// </summary>
    [pbr::OriginalName("Job_R5")] JobR5 = 5,
  }

  public enum UnionLoseReason {
    /// <summary>
    ///退出		
    /// </summary>
    [pbr::OriginalName("Reason_Withdrawal")] ReasonWithdrawal = 0,
    /// <summary>
    ///踢出联盟
    /// </summary>
    [pbr::OriginalName("Reason_TakeOff")] ReasonTakeOff = 1,
    /// <summary>
    ///解散
    /// </summary>
    [pbr::OriginalName("Reason_Dismiss")] ReasonDismiss = 2,
  }

  #endregion

  #region Messages
  public sealed partial class UnionInfo : pb::IMessage<UnionInfo> {
    private static readonly pb::MessageParser<UnionInfo> _parser = new pb::MessageParser<UnionInfo>(() => new UnionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInfo(UnionInfo other) : this() {
      unionId_ = other.unionId_;
      abbr_ = other.abbr_;
      name_ = other.name_;
      intro_ = other.intro_;
      joinType_ = other.joinType_;
      power_ = other.power_;
      badge_ = other.badge_;
      memberNum_ = other.memberNum_;
      language_ = other.language_;
      leaderIcon_ = other.leaderIcon_;
      leaderId_ = other.leaderId_;
      leaderName_ = other.leaderName_;
      hadApply_ = other.hadApply_;
      powerlimit_ = other.powerlimit_;
      dismissTime_ = other.dismissTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionInfo Clone() {
      return new UnionInfo(this);
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private ulong unionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "abbr" field.</summary>
    public const int AbbrFieldNumber = 2;
    private string abbr_ = "";
    /// <summary>
    ///简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Abbr {
      get { return abbr_; }
      set {
        abbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro" field.</summary>
    public const int IntroFieldNumber = 4;
    private string intro_ = "";
    /// <summary>
    ///简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intro {
      get { return intro_; }
      set {
        intro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinType" field.</summary>
    public const int JoinTypeFieldNumber = 5;
    private uint joinType_;
    /// <summary>
    ///加入方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 6;
    private ulong power_;
    /// <summary>
    ///战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "badge" field.</summary>
    public const int BadgeFieldNumber = 7;
    private ulong badge_;
    /// <summary>
    ///徽记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Badge {
      get { return badge_; }
      set {
        badge_ = value;
      }
    }

    /// <summary>Field number for the "memberNum" field.</summary>
    public const int MemberNumFieldNumber = 8;
    private uint memberNum_;
    /// <summary>
    ///成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberNum {
      get { return memberNum_; }
      set {
        memberNum_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 9;
    private uint language_;
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    /// <summary>Field number for the "leaderIcon" field.</summary>
    public const int LeaderIconFieldNumber = 10;
    private uint leaderIcon_;
    /// <summary>
    ///盟主头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderIcon {
      get { return leaderIcon_; }
      set {
        leaderIcon_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 11;
    private ulong leaderId_;
    /// <summary>
    ///盟主Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "leaderName" field.</summary>
    public const int LeaderNameFieldNumber = 12;
    private string leaderName_ = "";
    /// <summary>
    ///盟主名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hadApply" field.</summary>
    public const int HadApplyFieldNumber = 13;
    private uint hadApply_;
    /// <summary>
    ///是否已经申请了该联盟
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HadApply {
      get { return hadApply_; }
      set {
        hadApply_ = value;
      }
    }

    /// <summary>Field number for the "powerlimit" field.</summary>
    public const int PowerlimitFieldNumber = 14;
    private uint powerlimit_;
    /// <summary>
    ///申请加入的战力限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Powerlimit {
      get { return powerlimit_; }
      set {
        powerlimit_ = value;
      }
    }

    /// <summary>Field number for the "dismissTime" field.</summary>
    public const int DismissTimeFieldNumber = 15;
    private ulong dismissTime_;
    /// <summary>
    ///解散时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DismissTime {
      get { return dismissTime_; }
      set {
        dismissTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (Abbr != other.Abbr) return false;
      if (Name != other.Name) return false;
      if (Intro != other.Intro) return false;
      if (JoinType != other.JoinType) return false;
      if (Power != other.Power) return false;
      if (Badge != other.Badge) return false;
      if (MemberNum != other.MemberNum) return false;
      if (Language != other.Language) return false;
      if (LeaderIcon != other.LeaderIcon) return false;
      if (LeaderId != other.LeaderId) return false;
      if (LeaderName != other.LeaderName) return false;
      if (HadApply != other.HadApply) return false;
      if (Powerlimit != other.Powerlimit) return false;
      if (DismissTime != other.DismissTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (Abbr.Length != 0) hash ^= Abbr.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Intro.Length != 0) hash ^= Intro.GetHashCode();
      if (JoinType != 0) hash ^= JoinType.GetHashCode();
      if (Power != 0UL) hash ^= Power.GetHashCode();
      if (Badge != 0UL) hash ^= Badge.GetHashCode();
      if (MemberNum != 0) hash ^= MemberNum.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (LeaderIcon != 0) hash ^= LeaderIcon.GetHashCode();
      if (LeaderId != 0UL) hash ^= LeaderId.GetHashCode();
      if (LeaderName.Length != 0) hash ^= LeaderName.GetHashCode();
      if (HadApply != 0) hash ^= HadApply.GetHashCode();
      if (Powerlimit != 0) hash ^= Powerlimit.GetHashCode();
      if (DismissTime != 0UL) hash ^= DismissTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UnionId);
      }
      if (Abbr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Abbr);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Intro.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Intro);
      }
      if (JoinType != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(JoinType);
      }
      if (Power != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Power);
      }
      if (Badge != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Badge);
      }
      if (MemberNum != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MemberNum);
      }
      if (Language != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Language);
      }
      if (LeaderIcon != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LeaderIcon);
      }
      if (LeaderId != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(LeaderId);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(LeaderName);
      }
      if (HadApply != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(HadApply);
      }
      if (Powerlimit != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Powerlimit);
      }
      if (DismissTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(DismissTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (Abbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Abbr);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Intro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intro);
      }
      if (JoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinType);
      }
      if (Power != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Power);
      }
      if (Badge != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Badge);
      }
      if (MemberNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberNum);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (LeaderIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderIcon);
      }
      if (LeaderId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LeaderId);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (HadApply != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HadApply);
      }
      if (Powerlimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Powerlimit);
      }
      if (DismissTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DismissTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionInfo other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.Abbr.Length != 0) {
        Abbr = other.Abbr;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Intro.Length != 0) {
        Intro = other.Intro;
      }
      if (other.JoinType != 0) {
        JoinType = other.JoinType;
      }
      if (other.Power != 0UL) {
        Power = other.Power;
      }
      if (other.Badge != 0UL) {
        Badge = other.Badge;
      }
      if (other.MemberNum != 0) {
        MemberNum = other.MemberNum;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      if (other.LeaderIcon != 0) {
        LeaderIcon = other.LeaderIcon;
      }
      if (other.LeaderId != 0UL) {
        LeaderId = other.LeaderId;
      }
      if (other.LeaderName.Length != 0) {
        LeaderName = other.LeaderName;
      }
      if (other.HadApply != 0) {
        HadApply = other.HadApply;
      }
      if (other.Powerlimit != 0) {
        Powerlimit = other.Powerlimit;
      }
      if (other.DismissTime != 0UL) {
        DismissTime = other.DismissTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 18: {
            Abbr = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Intro = input.ReadString();
            break;
          }
          case 40: {
            JoinType = input.ReadUInt32();
            break;
          }
          case 48: {
            Power = input.ReadUInt64();
            break;
          }
          case 56: {
            Badge = input.ReadUInt64();
            break;
          }
          case 64: {
            MemberNum = input.ReadUInt32();
            break;
          }
          case 72: {
            Language = input.ReadUInt32();
            break;
          }
          case 80: {
            LeaderIcon = input.ReadUInt32();
            break;
          }
          case 88: {
            LeaderId = input.ReadUInt64();
            break;
          }
          case 98: {
            LeaderName = input.ReadString();
            break;
          }
          case 104: {
            HadApply = input.ReadUInt32();
            break;
          }
          case 112: {
            Powerlimit = input.ReadUInt32();
            break;
          }
          case 120: {
            DismissTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟成员信息
  /// </summary>
  public sealed partial class UnionMemberInfo : pb::IMessage<UnionMemberInfo> {
    private static readonly pb::MessageParser<UnionMemberInfo> _parser = new pb::MessageParser<UnionMemberInfo>(() => new UnionMemberInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionMemberInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMemberInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMemberInfo(UnionMemberInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      icon_ = other.icon_;
      power_ = other.power_;
      kill_ = other.kill_;
      job_ = other.job_;
      title_ = other.title_;
      online_ = other.online_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMemberInfo Clone() {
      return new UnionMemberInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private uint icon_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private ulong power_;
    /// <summary>
    ///战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 5;
    private uint kill_;
    /// <summary>
    ///击杀数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kill {
      get { return kill_; }
      set {
        kill_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 6;
    private uint job_;
    /// <summary>
    ///等级R1~R5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 7;
    private uint title_;
    /// <summary>
    ///头衔高级官员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 8;
    private uint online_;
    /// <summary>
    ///在线1离线0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 9;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionMemberInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionMemberInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (Power != other.Power) return false;
      if (Kill != other.Kill) return false;
      if (Job != other.Job) return false;
      if (Title != other.Title) return false;
      if (Online != other.Online) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Power != 0UL) hash ^= Power.GetHashCode();
      if (Kill != 0) hash ^= Kill.GetHashCode();
      if (Job != 0) hash ^= Job.GetHashCode();
      if (Title != 0) hash ^= Title.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Icon);
      }
      if (Power != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Power);
      }
      if (Kill != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Kill);
      }
      if (Job != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Job);
      }
      if (Title != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Title);
      }
      if (Online != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Online);
      }
      if (Level != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (Power != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Power);
      }
      if (Kill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kill);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Job);
      }
      if (Title != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Title);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Online);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionMemberInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Power != 0UL) {
        Power = other.Power;
      }
      if (other.Kill != 0) {
        Kill = other.Kill;
      }
      if (other.Job != 0) {
        Job = other.Job;
      }
      if (other.Title != 0) {
        Title = other.Title;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Icon = input.ReadUInt32();
            break;
          }
          case 32: {
            Power = input.ReadUInt64();
            break;
          }
          case 40: {
            Kill = input.ReadUInt32();
            break;
          }
          case 48: {
            Job = input.ReadUInt32();
            break;
          }
          case 56: {
            Title = input.ReadUInt32();
            break;
          }
          case 64: {
            Online = input.ReadUInt32();
            break;
          }
          case 72: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请加入联盟的玩家信息
  /// </summary>
  public sealed partial class ApplyPlayerInfo : pb::IMessage<ApplyPlayerInfo> {
    private static readonly pb::MessageParser<ApplyPlayerInfo> _parser = new pb::MessageParser<ApplyPlayerInfo>(() => new ApplyPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayerInfo(ApplyPlayerInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      icon_ = other.icon_;
      power_ = other.power_;
      kill_ = other.kill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayerInfo Clone() {
      return new ApplyPlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private uint icon_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private ulong power_;
    /// <summary>
    ///战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 5;
    private uint kill_;
    /// <summary>
    ///击杀数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kill {
      get { return kill_; }
      set {
        kill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (Power != other.Power) return false;
      if (Kill != other.Kill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Power != 0UL) hash ^= Power.GetHashCode();
      if (Kill != 0) hash ^= Kill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Icon);
      }
      if (Power != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Power);
      }
      if (Kill != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Kill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (Power != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Power);
      }
      if (Kill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Power != 0UL) {
        Power = other.Power;
      }
      if (other.Kill != 0) {
        Kill = other.Kill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Icon = input.ReadUInt32();
            break;
          }
          case 32: {
            Power = input.ReadUInt64();
            break;
          }
          case 40: {
            Kill = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟创建参数，也用于设置修改其中的某些项
  /// </summary>
  public sealed partial class CreateArgs : pb::IMessage<CreateArgs> {
    private static readonly pb::MessageParser<CreateArgs> _parser = new pb::MessageParser<CreateArgs>(() => new CreateArgs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateArgs(CreateArgs other) : this() {
      abbr_ = other.abbr_;
      name_ = other.name_;
      intro_ = other.intro_;
      joinType_ = other.joinType_;
      powerLimit_ = other.powerLimit_;
      badge_ = other.badge_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateArgs Clone() {
      return new CreateArgs(this);
    }

    /// <summary>Field number for the "abbr" field.</summary>
    public const int AbbrFieldNumber = 1;
    private string abbr_ = "";
    /// <summary>
    ///简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Abbr {
      get { return abbr_; }
      set {
        abbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro" field.</summary>
    public const int IntroFieldNumber = 3;
    private string intro_ = "";
    /// <summary>
    ///简介
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intro {
      get { return intro_; }
      set {
        intro_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "joinType" field.</summary>
    public const int JoinTypeFieldNumber = 4;
    private uint joinType_;
    /// <summary>
    ///加入方式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    /// <summary>Field number for the "powerLimit" field.</summary>
    public const int PowerLimitFieldNumber = 5;
    private uint powerLimit_;
    /// <summary>
    ///入盟战力限制
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PowerLimit {
      get { return powerLimit_; }
      set {
        powerLimit_ = value;
      }
    }

    /// <summary>Field number for the "badge" field.</summary>
    public const int BadgeFieldNumber = 6;
    private ulong badge_;
    /// <summary>
    ///徽记 底纹16bit底色16bit图案16bit图案颜色16bit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Badge {
      get { return badge_; }
      set {
        badge_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 7;
    private uint language_;
    /// <summary>
    ///语言	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Abbr != other.Abbr) return false;
      if (Name != other.Name) return false;
      if (Intro != other.Intro) return false;
      if (JoinType != other.JoinType) return false;
      if (PowerLimit != other.PowerLimit) return false;
      if (Badge != other.Badge) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Abbr.Length != 0) hash ^= Abbr.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Intro.Length != 0) hash ^= Intro.GetHashCode();
      if (JoinType != 0) hash ^= JoinType.GetHashCode();
      if (PowerLimit != 0) hash ^= PowerLimit.GetHashCode();
      if (Badge != 0UL) hash ^= Badge.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Abbr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Abbr);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Intro.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Intro);
      }
      if (JoinType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(JoinType);
      }
      if (PowerLimit != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PowerLimit);
      }
      if (Badge != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(Badge);
      }
      if (Language != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Abbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Abbr);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Intro.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intro);
      }
      if (JoinType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoinType);
      }
      if (PowerLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerLimit);
      }
      if (Badge != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Badge);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateArgs other) {
      if (other == null) {
        return;
      }
      if (other.Abbr.Length != 0) {
        Abbr = other.Abbr;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Intro.Length != 0) {
        Intro = other.Intro;
      }
      if (other.JoinType != 0) {
        JoinType = other.JoinType;
      }
      if (other.PowerLimit != 0) {
        PowerLimit = other.PowerLimit;
      }
      if (other.Badge != 0UL) {
        Badge = other.Badge;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Abbr = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Intro = input.ReadString();
            break;
          }
          case 32: {
            JoinType = input.ReadUInt32();
            break;
          }
          case 40: {
            PowerLimit = input.ReadUInt32();
            break;
          }
          case 48: {
            Badge = input.ReadUInt64();
            break;
          }
          case 56: {
            Language = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnionOperateMsg : pb::IMessage<UnionOperateMsg> {
    private static readonly pb::MessageParser<UnionOperateMsg> _parser = new pb::MessageParser<UnionOperateMsg>(() => new UnionOperateMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionOperateMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionOperateMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionOperateMsg(UnionOperateMsg other) : this() {
      operate_ = other.operate_;
      unionId_ = other.unionId_;
      playerId_ = other.playerId_;
      otherId_ = other.otherId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionOperateMsg Clone() {
      return new UnionOperateMsg(this);
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 1;
    private global::SLG.UnionOperateMsg.Types.UOperateType operate_ = global::SLG.UnionOperateMsg.Types.UOperateType.Apply;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.UnionOperateMsg.Types.UOperateType Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private ulong unionId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 3;
    private ulong playerId_;
    /// <summary>
    ///发起者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "otherId" field.</summary>
    public const int OtherIdFieldNumber = 4;
    private ulong otherId_;
    /// <summary>
    ///另一方的Id比如受邀者的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherId {
      get { return otherId_; }
      set {
        otherId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionOperateMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionOperateMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operate != other.Operate) return false;
      if (UnionId != other.UnionId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (OtherId != other.OtherId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operate != global::SLG.UnionOperateMsg.Types.UOperateType.Apply) hash ^= Operate.GetHashCode();
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (OtherId != 0UL) hash ^= OtherId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operate != global::SLG.UnionOperateMsg.Types.UOperateType.Apply) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operate);
      }
      if (UnionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnionId);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(PlayerId);
      }
      if (OtherId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OtherId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operate != global::SLG.UnionOperateMsg.Types.UOperateType.Apply) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
      }
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (OtherId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionOperateMsg other) {
      if (other == null) {
        return;
      }
      if (other.Operate != global::SLG.UnionOperateMsg.Types.UOperateType.Apply) {
        Operate = other.Operate;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.OtherId != 0UL) {
        OtherId = other.OtherId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Operate = (global::SLG.UnionOperateMsg.Types.UOperateType) input.ReadEnum();
            break;
          }
          case 16: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 24: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 32: {
            OtherId = input.ReadUInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnionOperateMsg message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UOperateType {
        /// <summary>
        ///申请
        /// </summary>
        [pbr::OriginalName("Apply")] Apply = 0,
        /// <summary>
        ///取消申请	
        /// </summary>
        [pbr::OriginalName("CancelApply")] CancelApply = 1,
        /// <summary>
        ///同意加入申请
        /// </summary>
        [pbr::OriginalName("AgreeApply")] AgreeApply = 2,
        /// <summary>
        ///拒绝加入申请		
        /// </summary>
        [pbr::OriginalName("RefuseApply")] RefuseApply = 3,
        /// <summary>
        ///加入
        /// </summary>
        [pbr::OriginalName("Join")] Join = 4,
        /// <summary>
        ///退出		
        /// </summary>
        [pbr::OriginalName("Withdrawal")] Withdrawal = 5,
        /// <summary>
        ///踢出联盟
        /// </summary>
        [pbr::OriginalName("TakeOff")] TakeOff = 6,
        /// <summary>
        ///邀请		
        /// </summary>
        [pbr::OriginalName("Invite")] Invite = 7,
        /// <summary>
        ///拒绝邀请
        /// </summary>
        [pbr::OriginalName("RefuseInvite")] RefuseInvite = 8,
        /// <summary>
        ///同意邀请
        /// </summary>
        [pbr::OriginalName("AgreeInvite")] AgreeInvite = 9,
        /// <summary>
        ///解散
        /// </summary>
        [pbr::OriginalName("Dismiss")] Dismiss = 10,
        /// <summary>
        ///取消解散联盟
        /// </summary>
        [pbr::OriginalName("CancelDismiss")] CancelDismiss = 11,
      }

    }
    #endregion

  }

  public sealed partial class UnionJobMsg : pb::IMessage<UnionJobMsg> {
    private static readonly pb::MessageParser<UnionJobMsg> _parser = new pb::MessageParser<UnionJobMsg>(() => new UnionJobMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionJobMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionJobMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionJobMsg(UnionJobMsg other) : this() {
      operate_ = other.operate_;
      playerId_ = other.playerId_;
      otherId_ = other.otherId_;
      job_ = other.job_;
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionJobMsg Clone() {
      return new UnionJobMsg(this);
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 1;
    private global::SLG.UnionJobMsg.Types.UOperateJobType operate_ = global::SLG.UnionJobMsg.Types.UOperateJobType.ConferTitle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.UnionJobMsg.Types.UOperateJobType Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    ///发起者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "otherId" field.</summary>
    public const int OtherIdFieldNumber = 3;
    private ulong otherId_;
    /// <summary>
    ///另一方的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherId {
      get { return otherId_; }
      set {
        otherId_ = value;
      }
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 4;
    private uint job_;
    /// <summary>
    ///职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Job {
      get { return job_; }
      set {
        job_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 5;
    private uint title_;
    /// <summary>
    ///头衔
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Title {
      get { return title_; }
      set {
        title_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionJobMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionJobMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operate != other.Operate) return false;
      if (PlayerId != other.PlayerId) return false;
      if (OtherId != other.OtherId) return false;
      if (Job != other.Job) return false;
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operate != global::SLG.UnionJobMsg.Types.UOperateJobType.ConferTitle) hash ^= Operate.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (OtherId != 0UL) hash ^= OtherId.GetHashCode();
      if (Job != 0) hash ^= Job.GetHashCode();
      if (Title != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operate != global::SLG.UnionJobMsg.Types.UOperateJobType.ConferTitle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operate);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (OtherId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OtherId);
      }
      if (Job != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Job);
      }
      if (Title != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operate != global::SLG.UnionJobMsg.Types.UOperateJobType.ConferTitle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (OtherId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherId);
      }
      if (Job != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Job);
      }
      if (Title != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionJobMsg other) {
      if (other == null) {
        return;
      }
      if (other.Operate != global::SLG.UnionJobMsg.Types.UOperateJobType.ConferTitle) {
        Operate = other.Operate;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.OtherId != 0UL) {
        OtherId = other.OtherId;
      }
      if (other.Job != 0) {
        Job = other.Job;
      }
      if (other.Title != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Operate = (global::SLG.UnionJobMsg.Types.UOperateJobType) input.ReadEnum();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 24: {
            OtherId = input.ReadUInt64();
            break;
          }
          case 32: {
            Job = input.ReadUInt32();
            break;
          }
          case 40: {
            Title = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UnionJobMsg message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///联盟职位操作信息 头衔 升级 降级
      /// </summary>
      public enum UOperateJobType {
        /// <summary>
        ///给与头衔
        /// </summary>
        [pbr::OriginalName("ConferTitle")] ConferTitle = 0,
        /// <summary>
        ///R1~R5级别调整	
        /// </summary>
        [pbr::OriginalName("changeJob")] ChangeJob = 1,
        /// <summary>
        ///禅让盟主
        /// </summary>
        [pbr::OriginalName("Abdicate")] Abdicate = 2,
      }

    }
    #endregion

  }

  public sealed partial class UnionId : pb::IMessage<UnionId> {
    private static readonly pb::MessageParser<UnionId> _parser = new pb::MessageParser<UnionId>(() => new UnionId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionId(UnionId other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionId Clone() {
      return new UnionId(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnionList : pb::IMessage<UnionList> {
    private static readonly pb::MessageParser<UnionList> _parser = new pb::MessageParser<UnionList>(() => new UnionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionList(UnionList other) : this() {
      list_ = other.list_.Clone();
      applynum_ = other.applynum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionList Clone() {
      return new UnionList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.UnionInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.UnionInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.UnionInfo> list_ = new pbc::RepeatedField<global::SLG.UnionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.UnionInfo> List {
      get { return list_; }
    }

    /// <summary>Field number for the "applynum" field.</summary>
    public const int ApplynumFieldNumber = 2;
    private uint applynum_;
    /// <summary>
    ///当前已申请的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Applynum {
      get { return applynum_; }
      set {
        applynum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if (Applynum != other.Applynum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (Applynum != 0) hash ^= Applynum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (Applynum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Applynum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (Applynum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Applynum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      if (other.Applynum != 0) {
        Applynum = other.Applynum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            Applynum = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyPlayerList : pb::IMessage<ApplyPlayerList> {
    private static readonly pb::MessageParser<ApplyPlayerList> _parser = new pb::MessageParser<ApplyPlayerList>(() => new ApplyPlayerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyPlayerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayerList(ApplyPlayerList other) : this() {
      unionList_ = other.unionList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyPlayerList Clone() {
      return new ApplyPlayerList(this);
    }

    /// <summary>Field number for the "unionList" field.</summary>
    public const int UnionListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.ApplyPlayerInfo> _repeated_unionList_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.ApplyPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.ApplyPlayerInfo> unionList_ = new pbc::RepeatedField<global::SLG.ApplyPlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.ApplyPlayerInfo> UnionList {
      get { return unionList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyPlayerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyPlayerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unionList_.Equals(other.unionList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unionList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unionList_.WriteTo(output, _repeated_unionList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unionList_.CalculateSize(_repeated_unionList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyPlayerList other) {
      if (other == null) {
        return;
      }
      unionList_.Add(other.unionList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            unionList_.AddEntriesFrom(input, _repeated_unionList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnionData : pb::IMessage<UnionData> {
    private static readonly pb::MessageParser<UnionData> _parser = new pb::MessageParser<UnionData>(() => new UnionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionData(UnionData other) : this() {
      unionInfo_ = other.unionInfo_ != null ? other.unionInfo_.Clone() : null;
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionData Clone() {
      return new UnionData(this);
    }

    /// <summary>Field number for the "unionInfo" field.</summary>
    public const int UnionInfoFieldNumber = 1;
    private global::SLG.UnionInfo unionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.UnionInfo UnionInfo {
      get { return unionInfo_; }
      set {
        unionInfo_ = value;
      }
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.UnionMemberInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.UnionMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.UnionMemberInfo> members_ = new pbc::RepeatedField<global::SLG.UnionMemberInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.UnionMemberInfo> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnionInfo, other.UnionInfo)) return false;
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (unionInfo_ != null) hash ^= UnionInfo.GetHashCode();
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (unionInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnionInfo);
      }
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (unionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnionInfo);
      }
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionData other) {
      if (other == null) {
        return;
      }
      if (other.unionInfo_ != null) {
        if (unionInfo_ == null) {
          UnionInfo = new global::SLG.UnionInfo();
        }
        UnionInfo.MergeFrom(other.UnionInfo);
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (unionInfo_ == null) {
              UnionInfo = new global::SLG.UnionInfo();
            }
            input.ReadMessage(UnionInfo);
            break;
          }
          case 18: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnionMembers : pb::IMessage<UnionMembers> {
    private static readonly pb::MessageParser<UnionMembers> _parser = new pb::MessageParser<UnionMembers>(() => new UnionMembers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnionMembers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMembers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMembers(UnionMembers other) : this() {
      members_ = other.members_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnionMembers Clone() {
      return new UnionMembers(this);
    }

    /// <summary>Field number for the "members" field.</summary>
    public const int MembersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.UnionMemberInfo> _repeated_members_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.UnionMemberInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.UnionMemberInfo> members_ = new pbc::RepeatedField<global::SLG.UnionMemberInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.UnionMemberInfo> Members {
      get { return members_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnionMembers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnionMembers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!members_.Equals(other.members_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= members_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      members_.WriteTo(output, _repeated_members_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += members_.CalculateSize(_repeated_members_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnionMembers other) {
      if (other == null) {
        return;
      }
      members_.Add(other.members_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            members_.AddEntriesFrom(input, _repeated_members_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchArgs : pb::IMessage<SearchArgs> {
    private static readonly pb::MessageParser<SearchArgs> _parser = new pb::MessageParser<SearchArgs>(() => new SearchArgs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchArgs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchArgs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchArgs(SearchArgs other) : this() {
      keyworld_ = other.keyworld_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchArgs Clone() {
      return new SearchArgs(this);
    }

    /// <summary>Field number for the "keyworld" field.</summary>
    public const int KeyworldFieldNumber = 1;
    private string keyworld_ = "";
    /// <summary>
    ///简称或名称关键字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Keyworld {
      get { return keyworld_; }
      set {
        keyworld_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 2;
    private uint language_;
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchArgs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchArgs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Keyworld != other.Keyworld) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Keyworld.Length != 0) hash ^= Keyworld.GetHashCode();
      if (Language != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Keyworld.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Keyworld);
      }
      if (Language != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Keyworld.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Keyworld);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchArgs other) {
      if (other == null) {
        return;
      }
      if (other.Keyworld.Length != 0) {
        Keyworld = other.Keyworld;
      }
      if (other.Language != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Keyworld = input.ReadString();
            break;
          }
          case 16: {
            Language = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邀请玩家信息
  /// </summary>
  public sealed partial class SearchedPlayerInfo : pb::IMessage<SearchedPlayerInfo> {
    private static readonly pb::MessageParser<SearchedPlayerInfo> _parser = new pb::MessageParser<SearchedPlayerInfo>(() => new SearchedPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchedPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedPlayerInfo(SearchedPlayerInfo other) : this() {
      playerId_ = other.playerId_;
      name_ = other.name_;
      icon_ = other.icon_;
      power_ = other.power_;
      level_ = other.level_;
      kill_ = other.kill_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedPlayerInfo Clone() {
      return new SearchedPlayerInfo(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private uint icon_;
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private ulong power_;
    /// <summary>
    ///战力	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "kill" field.</summary>
    public const int KillFieldNumber = 6;
    private uint kill_;
    /// <summary>
    ///击杀数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kill {
      get { return kill_; }
      set {
        kill_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchedPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchedPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (Power != other.Power) return false;
      if (Level != other.Level) return false;
      if (Kill != other.Kill) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Power != 0UL) hash ^= Power.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Kill != 0) hash ^= Kill.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Icon);
      }
      if (Power != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Power);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (Kill != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Kill);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (Power != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Power);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Kill != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kill);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchedPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Power != 0UL) {
        Power = other.Power;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Kill != 0) {
        Kill = other.Kill;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Icon = input.ReadUInt32();
            break;
          }
          case 32: {
            Power = input.ReadUInt64();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            Kill = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvitePlayers : pb::IMessage<InvitePlayers> {
    private static readonly pb::MessageParser<InvitePlayers> _parser = new pb::MessageParser<InvitePlayers>(() => new InvitePlayers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvitePlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgUnionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvitePlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvitePlayers(InvitePlayers other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvitePlayers Clone() {
      return new InvitePlayers(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.SearchedPlayerInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.SearchedPlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.SearchedPlayerInfo> list_ = new pbc::RepeatedField<global::SLG.SearchedPlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.SearchedPlayerInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvitePlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvitePlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvitePlayers other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
