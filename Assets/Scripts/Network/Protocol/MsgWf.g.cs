// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_wf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_wf.proto</summary>
  public static partial class MsgWfReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_wf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgWfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxtc2dfd2YucHJvdG8SA1NMRxoQbXNnX3BsYXllci5wcm90bxoSbXNnX2J1",
            "aWxkaW5nLnByb3RvGhRtc2dfd29ybGRzY2VuZS5wcm90bxoPbXNnX3VuaW9u",
            "LnByb3RvGg5tc2dfdGFzay5wcm90bxoRbXNnX3RyYWRpbmcucHJvdG8aEG1z",
            "Z19mcmllbmQucHJvdG8iQAoORW50ZXJTZXJ2ZXJSZXESDgoGYWNjX2lkGAEg",
            "ASgJEg0KBXRva2VuGAIgASgJEg8KB3JvbGVfaWQYAyABKAQiwQQKDkVudGVy",
            "U2VydmVyUnNwEg4KBnJlc3VsdBgBIAEoBRItChBwbGF5ZXJfYmFzZV9pbmZv",
            "GAIgASgLMhMuU0xHLlBsYXllckJhc2VJbmZvEi0KEHBsYXllcl9oZXJvX2lu",
            "Zm8YAyABKAsyEy5TTEcuUGxheWVySGVyb0luZm8SMwoTcGxheWVyX3NvbGRp",
            "ZXJfaW5mbxgEIAEoCzIWLlNMRy5QbGF5ZXJTb2xkaWVySW5mbxIqCg5idWls",
            "ZGluZ3NfaW5mbxgFIAEoCzISLlNMRy5CdWlsZGluZ3NJbmZvEigKDXdzcGxh",
            "eWVyX2luZm8YBiABKAsyES5TTEcuV3NQbGF5ZXJJbmZvEiIKCnVuaW9uX2lu",
            "Zm8YByABKAsyDi5TTEcuVW5pb25EYXRhEiQKD3BsYXllckJsb2NrTGlzdBgI",
            "IAMoCzILLlNMRy5GcmllbmQSJgoIdGFza0RhdGEYCSABKAsyFC5TTEcuUGxh",
            "eWVyVGFza3NEYXRhEiQKCGl0ZW1saXN0GAogASgLMhIuU0xHLkNvbW1vZGl0",
            "eUxpc3QSLwoPaGVyb2VzTGV2ZWxJbmZvGAsgASgLMhYuU0xHLlBsYXllckhl",
            "cm9lc0xldmVsEiwKDGJhcnJpZXJzSW5mbxgMIAEoCzIWLlNMRy5QbGF5ZXJB",
            "bGxCYXJyaWVycxITCgtuZXdiaWVHdWlkZRgNIAMoDRIWCg5zZXJ2ZXJPcGVu",
            "VGltZRgOIAEoBBISCgpzZXJ2ZXJUaW1lGA8gASgEIjIKDUNyZWF0ZVJvbGVS",
            "ZXESDgoGYWNjX2lkGAEgASgJEhEKCXJvbGVfbmFtZRgCIAEoCSIwCg1DcmVh",
            "dGVSb2xlUnNwEg4KBnJlc3VsdBgBIAEoBRIPCgdyb2xlX2lkGAIgASgEIkQK",
            "DUVudGVyU2NlbmVSZXESDwoHcm9sZV9pZBgBIAEoBBIOCgZhY2NfaWQYAiAB",
            "KAkSEgoKZnJvbnRlbmRJZBgDIAEoCSLBBAoNRW50ZXJTY2VuZVJzcBIOCgZy",
            "ZXN1bHQYASABKAUSLAoPcGxheWVyX2Jhc2VpbmZvGAIgASgLMhMuU0xHLlBs",
            "YXllckJhc2VJbmZvEi0KEHBsYXllcl9oZXJvX2luZm8YAyABKAsyEy5TTEcu",
            "UGxheWVySGVyb0luZm8SMwoTcGxheWVyX3NvbGRpZXJfaW5mbxgEIAEoCzIW",
            "LlNMRy5QbGF5ZXJTb2xkaWVySW5mbxIsChBwbGF5ZXJfYnVpbGRpbmdzGAUg",
            "ASgLMhIuU0xHLkJ1aWxkaW5nc0luZm8SKAoNd3NwbGF5ZXJfaW5mbxgGIAEo",
            "CzIRLlNMRy5Xc1BsYXllckluZm8SIgoKdW5pb25faW5mbxgHIAEoCzIOLlNM",
            "Ry5VbmlvbkRhdGESJAoPcGxheWVyQmxvY2tMaXN0GAggAygLMgsuU0xHLkZy",
            "aWVuZBImCgh0YXNrRGF0YRgJIAEoCzIULlNMRy5QbGF5ZXJUYXNrc0RhdGES",
            "JAoIaXRlbWxpc3QYCiABKAsyEi5TTEcuQ29tbW9kaXR5TGlzdBIvCg9oZXJv",
            "ZXNMZXZlbEluZm8YCyABKAsyFi5TTEcuUGxheWVySGVyb2VzTGV2ZWwSLAoM",
            "YmFycmllcnNJbmZvGAwgASgLMhYuU0xHLlBsYXllckFsbEJhcnJpZXJzEhMK",
            "C25ld2JpZUd1aWRlGA0gAygNEhYKDnNlcnZlck9wZW5UaW1lGA4gASgEEhIK",
            "CnNlcnZlclRpbWUYDyABKARiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SLG.MsgPlayerReflection.Descriptor, global::SLG.MsgBuildingReflection.Descriptor, global::SLG.MsgWorldsceneReflection.Descriptor, global::SLG.MsgUnionReflection.Descriptor, global::SLG.MsgTaskReflection.Descriptor, global::SLG.MsgTradingReflection.Descriptor, global::SLG.MsgFriendReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.EnterServerReq), global::SLG.EnterServerReq.Parser, new[]{ "AccId", "Token", "RoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.EnterServerRsp), global::SLG.EnterServerRsp.Parser, new[]{ "Result", "PlayerBaseInfo", "PlayerHeroInfo", "PlayerSoldierInfo", "BuildingsInfo", "WsplayerInfo", "UnionInfo", "PlayerBlockList", "TaskData", "Itemlist", "HeroesLevelInfo", "BarriersInfo", "NewbieGuide", "ServerOpenTime", "ServerTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CreateRoleReq), global::SLG.CreateRoleReq.Parser, new[]{ "AccId", "RoleName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CreateRoleRsp), global::SLG.CreateRoleRsp.Parser, new[]{ "Result", "RoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.EnterSceneReq), global::SLG.EnterSceneReq.Parser, new[]{ "RoleId", "AccId", "FrontendId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.EnterSceneRsp), global::SLG.EnterSceneRsp.Parser, new[]{ "Result", "PlayerBaseinfo", "PlayerHeroInfo", "PlayerSoldierInfo", "PlayerBuildings", "WsplayerInfo", "UnionInfo", "PlayerBlockList", "TaskData", "Itemlist", "HeroesLevelInfo", "BarriersInfo", "NewbieGuide", "ServerOpenTime", "ServerTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EnterServerReq : pb::IMessage<EnterServerReq> {
    private static readonly pb::MessageParser<EnterServerReq> _parser = new pb::MessageParser<EnterServerReq>(() => new EnterServerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterServerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterServerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterServerReq(EnterServerReq other) : this() {
      accId_ = other.accId_;
      token_ = other.token_;
      roleId_ = other.roleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterServerReq Clone() {
      return new EnterServerReq(this);
    }

    /// <summary>Field number for the "acc_id" field.</summary>
    public const int AccIdFieldNumber = 1;
    private string accId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccId {
      get { return accId_; }
      set {
        accId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 2;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 3;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterServerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterServerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccId != other.AccId) return false;
      if (Token != other.Token) return false;
      if (RoleId != other.RoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccId.Length != 0) hash ^= AccId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Token);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterServerReq other) {
      if (other == null) {
        return;
      }
      if (other.AccId.Length != 0) {
        AccId = other.AccId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccId = input.ReadString();
            break;
          }
          case 18: {
            Token = input.ReadString();
            break;
          }
          case 24: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterServerRsp : pb::IMessage<EnterServerRsp> {
    private static readonly pb::MessageParser<EnterServerRsp> _parser = new pb::MessageParser<EnterServerRsp>(() => new EnterServerRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterServerRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterServerRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterServerRsp(EnterServerRsp other) : this() {
      result_ = other.result_;
      playerBaseInfo_ = other.playerBaseInfo_ != null ? other.playerBaseInfo_.Clone() : null;
      playerHeroInfo_ = other.playerHeroInfo_ != null ? other.playerHeroInfo_.Clone() : null;
      playerSoldierInfo_ = other.playerSoldierInfo_ != null ? other.playerSoldierInfo_.Clone() : null;
      buildingsInfo_ = other.buildingsInfo_ != null ? other.buildingsInfo_.Clone() : null;
      wsplayerInfo_ = other.wsplayerInfo_ != null ? other.wsplayerInfo_.Clone() : null;
      unionInfo_ = other.unionInfo_ != null ? other.unionInfo_.Clone() : null;
      playerBlockList_ = other.playerBlockList_.Clone();
      taskData_ = other.taskData_ != null ? other.taskData_.Clone() : null;
      itemlist_ = other.itemlist_ != null ? other.itemlist_.Clone() : null;
      heroesLevelInfo_ = other.heroesLevelInfo_ != null ? other.heroesLevelInfo_.Clone() : null;
      barriersInfo_ = other.barriersInfo_ != null ? other.barriersInfo_.Clone() : null;
      newbieGuide_ = other.newbieGuide_.Clone();
      serverOpenTime_ = other.serverOpenTime_;
      serverTime_ = other.serverTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterServerRsp Clone() {
      return new EnterServerRsp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///suc:1    err: -1:unknown -2:acc -3:token -4:no role
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "player_base_info" field.</summary>
    public const int PlayerBaseInfoFieldNumber = 2;
    private global::SLG.PlayerBaseInfo playerBaseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerBaseInfo PlayerBaseInfo {
      get { return playerBaseInfo_; }
      set {
        playerBaseInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_hero_info" field.</summary>
    public const int PlayerHeroInfoFieldNumber = 3;
    private global::SLG.PlayerHeroInfo playerHeroInfo_;
    /// <summary>
    ///英雄（key为复合类型与等级的表id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerHeroInfo PlayerHeroInfo {
      get { return playerHeroInfo_; }
      set {
        playerHeroInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_soldier_info" field.</summary>
    public const int PlayerSoldierInfoFieldNumber = 4;
    private global::SLG.PlayerSoldierInfo playerSoldierInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerSoldierInfo PlayerSoldierInfo {
      get { return playerSoldierInfo_; }
      set {
        playerSoldierInfo_ = value;
      }
    }

    /// <summary>Field number for the "buildings_info" field.</summary>
    public const int BuildingsInfoFieldNumber = 5;
    private global::SLG.BuildingsInfo buildingsInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.BuildingsInfo BuildingsInfo {
      get { return buildingsInfo_; }
      set {
        buildingsInfo_ = value;
      }
    }

    /// <summary>Field number for the "wsplayer_info" field.</summary>
    public const int WsplayerInfoFieldNumber = 6;
    private global::SLG.WsPlayerInfo wsplayerInfo_;
    /// <summary>
    ///大世界相关的玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsPlayerInfo WsplayerInfo {
      get { return wsplayerInfo_; }
      set {
        wsplayerInfo_ = value;
      }
    }

    /// <summary>Field number for the "union_info" field.</summary>
    public const int UnionInfoFieldNumber = 7;
    private global::SLG.UnionData unionInfo_;
    /// <summary>
    ///联盟信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.UnionData UnionInfo {
      get { return unionInfo_; }
      set {
        unionInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerBlockList" field.</summary>
    public const int PlayerBlockListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SLG.Friend> _repeated_playerBlockList_codec
        = pb::FieldCodec.ForMessage(66, global::SLG.Friend.Parser);
    private readonly pbc::RepeatedField<global::SLG.Friend> playerBlockList_ = new pbc::RepeatedField<global::SLG.Friend>();
    /// <summary>
    /// 屏蔽列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.Friend> PlayerBlockList {
      get { return playerBlockList_; }
    }

    /// <summary>Field number for the "taskData" field.</summary>
    public const int TaskDataFieldNumber = 9;
    private global::SLG.PlayerTasksData taskData_;
    /// <summary>
    ///任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerTasksData TaskData {
      get { return taskData_; }
      set {
        taskData_ = value;
      }
    }

    /// <summary>Field number for the "itemlist" field.</summary>
    public const int ItemlistFieldNumber = 10;
    private global::SLG.CommodityList itemlist_;
    /// <summary>
    ///跑商玩家身上的商品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.CommodityList Itemlist {
      get { return itemlist_; }
      set {
        itemlist_ = value;
      }
    }

    /// <summary>Field number for the "heroesLevelInfo" field.</summary>
    public const int HeroesLevelInfoFieldNumber = 11;
    private global::SLG.PlayerHeroesLevel heroesLevelInfo_;
    /// <summary>
    ///英雄等级星级信息（key为英雄类型）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerHeroesLevel HeroesLevelInfo {
      get { return heroesLevelInfo_; }
      set {
        heroesLevelInfo_ = value;
      }
    }

    /// <summary>Field number for the "barriersInfo" field.</summary>
    public const int BarriersInfoFieldNumber = 12;
    private global::SLG.PlayerAllBarriers barriersInfo_;
    /// <summary>
    ///玩家所有关卡类地图的推图进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerAllBarriers BarriersInfo {
      get { return barriersInfo_; }
      set {
        barriersInfo_ = value;
      }
    }

    /// <summary>Field number for the "newbieGuide" field.</summary>
    public const int NewbieGuideFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_newbieGuide_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> newbieGuide_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///新手指引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> NewbieGuide {
      get { return newbieGuide_; }
    }

    /// <summary>Field number for the "serverOpenTime" field.</summary>
    public const int ServerOpenTimeFieldNumber = 14;
    private ulong serverOpenTime_;
    /// <summary>
    ///服务器开服时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerOpenTime {
      get { return serverOpenTime_; }
      set {
        serverOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 15;
    private ulong serverTime_;
    /// <summary>
    ///服务器当前时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterServerRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterServerRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(PlayerBaseInfo, other.PlayerBaseInfo)) return false;
      if (!object.Equals(PlayerHeroInfo, other.PlayerHeroInfo)) return false;
      if (!object.Equals(PlayerSoldierInfo, other.PlayerSoldierInfo)) return false;
      if (!object.Equals(BuildingsInfo, other.BuildingsInfo)) return false;
      if (!object.Equals(WsplayerInfo, other.WsplayerInfo)) return false;
      if (!object.Equals(UnionInfo, other.UnionInfo)) return false;
      if(!playerBlockList_.Equals(other.playerBlockList_)) return false;
      if (!object.Equals(TaskData, other.TaskData)) return false;
      if (!object.Equals(Itemlist, other.Itemlist)) return false;
      if (!object.Equals(HeroesLevelInfo, other.HeroesLevelInfo)) return false;
      if (!object.Equals(BarriersInfo, other.BarriersInfo)) return false;
      if(!newbieGuide_.Equals(other.newbieGuide_)) return false;
      if (ServerOpenTime != other.ServerOpenTime) return false;
      if (ServerTime != other.ServerTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (playerBaseInfo_ != null) hash ^= PlayerBaseInfo.GetHashCode();
      if (playerHeroInfo_ != null) hash ^= PlayerHeroInfo.GetHashCode();
      if (playerSoldierInfo_ != null) hash ^= PlayerSoldierInfo.GetHashCode();
      if (buildingsInfo_ != null) hash ^= BuildingsInfo.GetHashCode();
      if (wsplayerInfo_ != null) hash ^= WsplayerInfo.GetHashCode();
      if (unionInfo_ != null) hash ^= UnionInfo.GetHashCode();
      hash ^= playerBlockList_.GetHashCode();
      if (taskData_ != null) hash ^= TaskData.GetHashCode();
      if (itemlist_ != null) hash ^= Itemlist.GetHashCode();
      if (heroesLevelInfo_ != null) hash ^= HeroesLevelInfo.GetHashCode();
      if (barriersInfo_ != null) hash ^= BarriersInfo.GetHashCode();
      hash ^= newbieGuide_.GetHashCode();
      if (ServerOpenTime != 0UL) hash ^= ServerOpenTime.GetHashCode();
      if (ServerTime != 0UL) hash ^= ServerTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (playerBaseInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerBaseInfo);
      }
      if (playerHeroInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerHeroInfo);
      }
      if (playerSoldierInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerSoldierInfo);
      }
      if (buildingsInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BuildingsInfo);
      }
      if (wsplayerInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WsplayerInfo);
      }
      if (unionInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UnionInfo);
      }
      playerBlockList_.WriteTo(output, _repeated_playerBlockList_codec);
      if (taskData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TaskData);
      }
      if (itemlist_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Itemlist);
      }
      if (heroesLevelInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(HeroesLevelInfo);
      }
      if (barriersInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BarriersInfo);
      }
      newbieGuide_.WriteTo(output, _repeated_newbieGuide_codec);
      if (ServerOpenTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ServerOpenTime);
      }
      if (ServerTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(ServerTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (playerBaseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBaseInfo);
      }
      if (playerHeroInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerHeroInfo);
      }
      if (playerSoldierInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerSoldierInfo);
      }
      if (buildingsInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildingsInfo);
      }
      if (wsplayerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WsplayerInfo);
      }
      if (unionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnionInfo);
      }
      size += playerBlockList_.CalculateSize(_repeated_playerBlockList_codec);
      if (taskData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskData);
      }
      if (itemlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Itemlist);
      }
      if (heroesLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroesLevelInfo);
      }
      if (barriersInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarriersInfo);
      }
      size += newbieGuide_.CalculateSize(_repeated_newbieGuide_codec);
      if (ServerOpenTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerOpenTime);
      }
      if (ServerTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterServerRsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.playerBaseInfo_ != null) {
        if (playerBaseInfo_ == null) {
          PlayerBaseInfo = new global::SLG.PlayerBaseInfo();
        }
        PlayerBaseInfo.MergeFrom(other.PlayerBaseInfo);
      }
      if (other.playerHeroInfo_ != null) {
        if (playerHeroInfo_ == null) {
          PlayerHeroInfo = new global::SLG.PlayerHeroInfo();
        }
        PlayerHeroInfo.MergeFrom(other.PlayerHeroInfo);
      }
      if (other.playerSoldierInfo_ != null) {
        if (playerSoldierInfo_ == null) {
          PlayerSoldierInfo = new global::SLG.PlayerSoldierInfo();
        }
        PlayerSoldierInfo.MergeFrom(other.PlayerSoldierInfo);
      }
      if (other.buildingsInfo_ != null) {
        if (buildingsInfo_ == null) {
          BuildingsInfo = new global::SLG.BuildingsInfo();
        }
        BuildingsInfo.MergeFrom(other.BuildingsInfo);
      }
      if (other.wsplayerInfo_ != null) {
        if (wsplayerInfo_ == null) {
          WsplayerInfo = new global::SLG.WsPlayerInfo();
        }
        WsplayerInfo.MergeFrom(other.WsplayerInfo);
      }
      if (other.unionInfo_ != null) {
        if (unionInfo_ == null) {
          UnionInfo = new global::SLG.UnionData();
        }
        UnionInfo.MergeFrom(other.UnionInfo);
      }
      playerBlockList_.Add(other.playerBlockList_);
      if (other.taskData_ != null) {
        if (taskData_ == null) {
          TaskData = new global::SLG.PlayerTasksData();
        }
        TaskData.MergeFrom(other.TaskData);
      }
      if (other.itemlist_ != null) {
        if (itemlist_ == null) {
          Itemlist = new global::SLG.CommodityList();
        }
        Itemlist.MergeFrom(other.Itemlist);
      }
      if (other.heroesLevelInfo_ != null) {
        if (heroesLevelInfo_ == null) {
          HeroesLevelInfo = new global::SLG.PlayerHeroesLevel();
        }
        HeroesLevelInfo.MergeFrom(other.HeroesLevelInfo);
      }
      if (other.barriersInfo_ != null) {
        if (barriersInfo_ == null) {
          BarriersInfo = new global::SLG.PlayerAllBarriers();
        }
        BarriersInfo.MergeFrom(other.BarriersInfo);
      }
      newbieGuide_.Add(other.newbieGuide_);
      if (other.ServerOpenTime != 0UL) {
        ServerOpenTime = other.ServerOpenTime;
      }
      if (other.ServerTime != 0UL) {
        ServerTime = other.ServerTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerBaseInfo_ == null) {
              PlayerBaseInfo = new global::SLG.PlayerBaseInfo();
            }
            input.ReadMessage(PlayerBaseInfo);
            break;
          }
          case 26: {
            if (playerHeroInfo_ == null) {
              PlayerHeroInfo = new global::SLG.PlayerHeroInfo();
            }
            input.ReadMessage(PlayerHeroInfo);
            break;
          }
          case 34: {
            if (playerSoldierInfo_ == null) {
              PlayerSoldierInfo = new global::SLG.PlayerSoldierInfo();
            }
            input.ReadMessage(PlayerSoldierInfo);
            break;
          }
          case 42: {
            if (buildingsInfo_ == null) {
              BuildingsInfo = new global::SLG.BuildingsInfo();
            }
            input.ReadMessage(BuildingsInfo);
            break;
          }
          case 50: {
            if (wsplayerInfo_ == null) {
              WsplayerInfo = new global::SLG.WsPlayerInfo();
            }
            input.ReadMessage(WsplayerInfo);
            break;
          }
          case 58: {
            if (unionInfo_ == null) {
              UnionInfo = new global::SLG.UnionData();
            }
            input.ReadMessage(UnionInfo);
            break;
          }
          case 66: {
            playerBlockList_.AddEntriesFrom(input, _repeated_playerBlockList_codec);
            break;
          }
          case 74: {
            if (taskData_ == null) {
              TaskData = new global::SLG.PlayerTasksData();
            }
            input.ReadMessage(TaskData);
            break;
          }
          case 82: {
            if (itemlist_ == null) {
              Itemlist = new global::SLG.CommodityList();
            }
            input.ReadMessage(Itemlist);
            break;
          }
          case 90: {
            if (heroesLevelInfo_ == null) {
              HeroesLevelInfo = new global::SLG.PlayerHeroesLevel();
            }
            input.ReadMessage(HeroesLevelInfo);
            break;
          }
          case 98: {
            if (barriersInfo_ == null) {
              BarriersInfo = new global::SLG.PlayerAllBarriers();
            }
            input.ReadMessage(BarriersInfo);
            break;
          }
          case 106:
          case 104: {
            newbieGuide_.AddEntriesFrom(input, _repeated_newbieGuide_codec);
            break;
          }
          case 112: {
            ServerOpenTime = input.ReadUInt64();
            break;
          }
          case 120: {
            ServerTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///client => wf => ws
  /// </summary>
  public sealed partial class CreateRoleReq : pb::IMessage<CreateRoleReq> {
    private static readonly pb::MessageParser<CreateRoleReq> _parser = new pb::MessageParser<CreateRoleReq>(() => new CreateRoleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoleReq(CreateRoleReq other) : this() {
      accId_ = other.accId_;
      roleName_ = other.roleName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoleReq Clone() {
      return new CreateRoleReq(this);
    }

    /// <summary>Field number for the "acc_id" field.</summary>
    public const int AccIdFieldNumber = 1;
    private string accId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccId {
      get { return accId_; }
      set {
        accId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccId != other.AccId) return false;
      if (RoleName != other.RoleName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccId.Length != 0) hash ^= AccId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoleReq other) {
      if (other == null) {
        return;
      }
      if (other.AccId.Length != 0) {
        AccId = other.AccId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccId = input.ReadString();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///ws => wf => client
  /// </summary>
  public sealed partial class CreateRoleRsp : pb::IMessage<CreateRoleRsp> {
    private static readonly pb::MessageParser<CreateRoleRsp> _parser = new pb::MessageParser<CreateRoleRsp>(() => new CreateRoleRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoleRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWfReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoleRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoleRsp(CreateRoleRsp other) : this() {
      result_ = other.result_;
      roleId_ = other.roleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoleRsp Clone() {
      return new CreateRoleRsp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///suc:1    err: -1:unknown -2:role name invalid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoleRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoleRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (RoleId != other.RoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (RoleId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoleRsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///wf => ws
  /// </summary>
  public sealed partial class EnterSceneReq : pb::IMessage<EnterSceneReq> {
    private static readonly pb::MessageParser<EnterSceneReq> _parser = new pb::MessageParser<EnterSceneReq>(() => new EnterSceneReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterSceneReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWfReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterSceneReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterSceneReq(EnterSceneReq other) : this() {
      roleId_ = other.roleId_;
      accId_ = other.accId_;
      frontendId_ = other.frontendId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterSceneReq Clone() {
      return new EnterSceneReq(this);
    }

    /// <summary>Field number for the "role_id" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private ulong roleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "acc_id" field.</summary>
    public const int AccIdFieldNumber = 2;
    private string accId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccId {
      get { return accId_; }
      set {
        accId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frontendId" field.</summary>
    public const int FrontendIdFieldNumber = 3;
    private string frontendId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrontendId {
      get { return frontendId_; }
      set {
        frontendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterSceneReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterSceneReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (AccId != other.AccId) return false;
      if (FrontendId != other.FrontendId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
      if (AccId.Length != 0) hash ^= AccId.GetHashCode();
      if (FrontendId.Length != 0) hash ^= FrontendId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RoleId);
      }
      if (AccId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccId);
      }
      if (FrontendId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrontendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
      }
      if (AccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccId);
      }
      if (FrontendId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrontendId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterSceneReq other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0UL) {
        RoleId = other.RoleId;
      }
      if (other.AccId.Length != 0) {
        AccId = other.AccId;
      }
      if (other.FrontendId.Length != 0) {
        FrontendId = other.FrontendId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoleId = input.ReadUInt64();
            break;
          }
          case 18: {
            AccId = input.ReadString();
            break;
          }
          case 26: {
            FrontendId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///ws => wf
  /// </summary>
  public sealed partial class EnterSceneRsp : pb::IMessage<EnterSceneRsp> {
    private static readonly pb::MessageParser<EnterSceneRsp> _parser = new pb::MessageParser<EnterSceneRsp>(() => new EnterSceneRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterSceneRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWfReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterSceneRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterSceneRsp(EnterSceneRsp other) : this() {
      result_ = other.result_;
      playerBaseinfo_ = other.playerBaseinfo_ != null ? other.playerBaseinfo_.Clone() : null;
      playerHeroInfo_ = other.playerHeroInfo_ != null ? other.playerHeroInfo_.Clone() : null;
      playerSoldierInfo_ = other.playerSoldierInfo_ != null ? other.playerSoldierInfo_.Clone() : null;
      playerBuildings_ = other.playerBuildings_ != null ? other.playerBuildings_.Clone() : null;
      wsplayerInfo_ = other.wsplayerInfo_ != null ? other.wsplayerInfo_.Clone() : null;
      unionInfo_ = other.unionInfo_ != null ? other.unionInfo_.Clone() : null;
      playerBlockList_ = other.playerBlockList_.Clone();
      taskData_ = other.taskData_ != null ? other.taskData_.Clone() : null;
      itemlist_ = other.itemlist_ != null ? other.itemlist_.Clone() : null;
      heroesLevelInfo_ = other.heroesLevelInfo_ != null ? other.heroesLevelInfo_.Clone() : null;
      barriersInfo_ = other.barriersInfo_ != null ? other.barriersInfo_.Clone() : null;
      newbieGuide_ = other.newbieGuide_.Clone();
      serverOpenTime_ = other.serverOpenTime_;
      serverTime_ = other.serverTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterSceneRsp Clone() {
      return new EnterSceneRsp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    /// <summary>
    ///EnterServerRsp.result
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "player_baseinfo" field.</summary>
    public const int PlayerBaseinfoFieldNumber = 2;
    private global::SLG.PlayerBaseInfo playerBaseinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerBaseInfo PlayerBaseinfo {
      get { return playerBaseinfo_; }
      set {
        playerBaseinfo_ = value;
      }
    }

    /// <summary>Field number for the "player_hero_info" field.</summary>
    public const int PlayerHeroInfoFieldNumber = 3;
    private global::SLG.PlayerHeroInfo playerHeroInfo_;
    /// <summary>
    ///英雄（key为复合类型与等级的表id）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerHeroInfo PlayerHeroInfo {
      get { return playerHeroInfo_; }
      set {
        playerHeroInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_soldier_info" field.</summary>
    public const int PlayerSoldierInfoFieldNumber = 4;
    private global::SLG.PlayerSoldierInfo playerSoldierInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerSoldierInfo PlayerSoldierInfo {
      get { return playerSoldierInfo_; }
      set {
        playerSoldierInfo_ = value;
      }
    }

    /// <summary>Field number for the "player_buildings" field.</summary>
    public const int PlayerBuildingsFieldNumber = 5;
    private global::SLG.BuildingsInfo playerBuildings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.BuildingsInfo PlayerBuildings {
      get { return playerBuildings_; }
      set {
        playerBuildings_ = value;
      }
    }

    /// <summary>Field number for the "wsplayer_info" field.</summary>
    public const int WsplayerInfoFieldNumber = 6;
    private global::SLG.WsPlayerInfo wsplayerInfo_;
    /// <summary>
    ///大世界相关的玩家信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsPlayerInfo WsplayerInfo {
      get { return wsplayerInfo_; }
      set {
        wsplayerInfo_ = value;
      }
    }

    /// <summary>Field number for the "union_info" field.</summary>
    public const int UnionInfoFieldNumber = 7;
    private global::SLG.UnionData unionInfo_;
    /// <summary>
    ///联盟信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.UnionData UnionInfo {
      get { return unionInfo_; }
      set {
        unionInfo_ = value;
      }
    }

    /// <summary>Field number for the "playerBlockList" field.</summary>
    public const int PlayerBlockListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::SLG.Friend> _repeated_playerBlockList_codec
        = pb::FieldCodec.ForMessage(66, global::SLG.Friend.Parser);
    private readonly pbc::RepeatedField<global::SLG.Friend> playerBlockList_ = new pbc::RepeatedField<global::SLG.Friend>();
    /// <summary>
    /// 屏蔽列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.Friend> PlayerBlockList {
      get { return playerBlockList_; }
    }

    /// <summary>Field number for the "taskData" field.</summary>
    public const int TaskDataFieldNumber = 9;
    private global::SLG.PlayerTasksData taskData_;
    /// <summary>
    ///任务信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerTasksData TaskData {
      get { return taskData_; }
      set {
        taskData_ = value;
      }
    }

    /// <summary>Field number for the "itemlist" field.</summary>
    public const int ItemlistFieldNumber = 10;
    private global::SLG.CommodityList itemlist_;
    /// <summary>
    ///跑商玩家身上的商品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.CommodityList Itemlist {
      get { return itemlist_; }
      set {
        itemlist_ = value;
      }
    }

    /// <summary>Field number for the "heroesLevelInfo" field.</summary>
    public const int HeroesLevelInfoFieldNumber = 11;
    private global::SLG.PlayerHeroesLevel heroesLevelInfo_;
    /// <summary>
    ///英雄等级星级信息（key为英雄类型）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerHeroesLevel HeroesLevelInfo {
      get { return heroesLevelInfo_; }
      set {
        heroesLevelInfo_ = value;
      }
    }

    /// <summary>Field number for the "barriersInfo" field.</summary>
    public const int BarriersInfoFieldNumber = 12;
    private global::SLG.PlayerAllBarriers barriersInfo_;
    /// <summary>
    ///玩家所有关卡类地图的推图进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.PlayerAllBarriers BarriersInfo {
      get { return barriersInfo_; }
      set {
        barriersInfo_ = value;
      }
    }

    /// <summary>Field number for the "newbieGuide" field.</summary>
    public const int NewbieGuideFieldNumber = 13;
    private static readonly pb::FieldCodec<uint> _repeated_newbieGuide_codec
        = pb::FieldCodec.ForUInt32(106);
    private readonly pbc::RepeatedField<uint> newbieGuide_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///新手指引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> NewbieGuide {
      get { return newbieGuide_; }
    }

    /// <summary>Field number for the "serverOpenTime" field.</summary>
    public const int ServerOpenTimeFieldNumber = 14;
    private ulong serverOpenTime_;
    /// <summary>
    ///服务器开服时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerOpenTime {
      get { return serverOpenTime_; }
      set {
        serverOpenTime_ = value;
      }
    }

    /// <summary>Field number for the "serverTime" field.</summary>
    public const int ServerTimeFieldNumber = 15;
    private ulong serverTime_;
    /// <summary>
    ///服务器当前时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ServerTime {
      get { return serverTime_; }
      set {
        serverTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterSceneRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterSceneRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(PlayerBaseinfo, other.PlayerBaseinfo)) return false;
      if (!object.Equals(PlayerHeroInfo, other.PlayerHeroInfo)) return false;
      if (!object.Equals(PlayerSoldierInfo, other.PlayerSoldierInfo)) return false;
      if (!object.Equals(PlayerBuildings, other.PlayerBuildings)) return false;
      if (!object.Equals(WsplayerInfo, other.WsplayerInfo)) return false;
      if (!object.Equals(UnionInfo, other.UnionInfo)) return false;
      if(!playerBlockList_.Equals(other.playerBlockList_)) return false;
      if (!object.Equals(TaskData, other.TaskData)) return false;
      if (!object.Equals(Itemlist, other.Itemlist)) return false;
      if (!object.Equals(HeroesLevelInfo, other.HeroesLevelInfo)) return false;
      if (!object.Equals(BarriersInfo, other.BarriersInfo)) return false;
      if(!newbieGuide_.Equals(other.newbieGuide_)) return false;
      if (ServerOpenTime != other.ServerOpenTime) return false;
      if (ServerTime != other.ServerTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (playerBaseinfo_ != null) hash ^= PlayerBaseinfo.GetHashCode();
      if (playerHeroInfo_ != null) hash ^= PlayerHeroInfo.GetHashCode();
      if (playerSoldierInfo_ != null) hash ^= PlayerSoldierInfo.GetHashCode();
      if (playerBuildings_ != null) hash ^= PlayerBuildings.GetHashCode();
      if (wsplayerInfo_ != null) hash ^= WsplayerInfo.GetHashCode();
      if (unionInfo_ != null) hash ^= UnionInfo.GetHashCode();
      hash ^= playerBlockList_.GetHashCode();
      if (taskData_ != null) hash ^= TaskData.GetHashCode();
      if (itemlist_ != null) hash ^= Itemlist.GetHashCode();
      if (heroesLevelInfo_ != null) hash ^= HeroesLevelInfo.GetHashCode();
      if (barriersInfo_ != null) hash ^= BarriersInfo.GetHashCode();
      hash ^= newbieGuide_.GetHashCode();
      if (ServerOpenTime != 0UL) hash ^= ServerOpenTime.GetHashCode();
      if (ServerTime != 0UL) hash ^= ServerTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (playerBaseinfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerBaseinfo);
      }
      if (playerHeroInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerHeroInfo);
      }
      if (playerSoldierInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayerSoldierInfo);
      }
      if (playerBuildings_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerBuildings);
      }
      if (wsplayerInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WsplayerInfo);
      }
      if (unionInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UnionInfo);
      }
      playerBlockList_.WriteTo(output, _repeated_playerBlockList_codec);
      if (taskData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(TaskData);
      }
      if (itemlist_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Itemlist);
      }
      if (heroesLevelInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(HeroesLevelInfo);
      }
      if (barriersInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BarriersInfo);
      }
      newbieGuide_.WriteTo(output, _repeated_newbieGuide_codec);
      if (ServerOpenTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ServerOpenTime);
      }
      if (ServerTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(ServerTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (playerBaseinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBaseinfo);
      }
      if (playerHeroInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerHeroInfo);
      }
      if (playerSoldierInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerSoldierInfo);
      }
      if (playerBuildings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBuildings);
      }
      if (wsplayerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WsplayerInfo);
      }
      if (unionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnionInfo);
      }
      size += playerBlockList_.CalculateSize(_repeated_playerBlockList_codec);
      if (taskData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskData);
      }
      if (itemlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Itemlist);
      }
      if (heroesLevelInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeroesLevelInfo);
      }
      if (barriersInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BarriersInfo);
      }
      size += newbieGuide_.CalculateSize(_repeated_newbieGuide_codec);
      if (ServerOpenTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerOpenTime);
      }
      if (ServerTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterSceneRsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.playerBaseinfo_ != null) {
        if (playerBaseinfo_ == null) {
          PlayerBaseinfo = new global::SLG.PlayerBaseInfo();
        }
        PlayerBaseinfo.MergeFrom(other.PlayerBaseinfo);
      }
      if (other.playerHeroInfo_ != null) {
        if (playerHeroInfo_ == null) {
          PlayerHeroInfo = new global::SLG.PlayerHeroInfo();
        }
        PlayerHeroInfo.MergeFrom(other.PlayerHeroInfo);
      }
      if (other.playerSoldierInfo_ != null) {
        if (playerSoldierInfo_ == null) {
          PlayerSoldierInfo = new global::SLG.PlayerSoldierInfo();
        }
        PlayerSoldierInfo.MergeFrom(other.PlayerSoldierInfo);
      }
      if (other.playerBuildings_ != null) {
        if (playerBuildings_ == null) {
          PlayerBuildings = new global::SLG.BuildingsInfo();
        }
        PlayerBuildings.MergeFrom(other.PlayerBuildings);
      }
      if (other.wsplayerInfo_ != null) {
        if (wsplayerInfo_ == null) {
          WsplayerInfo = new global::SLG.WsPlayerInfo();
        }
        WsplayerInfo.MergeFrom(other.WsplayerInfo);
      }
      if (other.unionInfo_ != null) {
        if (unionInfo_ == null) {
          UnionInfo = new global::SLG.UnionData();
        }
        UnionInfo.MergeFrom(other.UnionInfo);
      }
      playerBlockList_.Add(other.playerBlockList_);
      if (other.taskData_ != null) {
        if (taskData_ == null) {
          TaskData = new global::SLG.PlayerTasksData();
        }
        TaskData.MergeFrom(other.TaskData);
      }
      if (other.itemlist_ != null) {
        if (itemlist_ == null) {
          Itemlist = new global::SLG.CommodityList();
        }
        Itemlist.MergeFrom(other.Itemlist);
      }
      if (other.heroesLevelInfo_ != null) {
        if (heroesLevelInfo_ == null) {
          HeroesLevelInfo = new global::SLG.PlayerHeroesLevel();
        }
        HeroesLevelInfo.MergeFrom(other.HeroesLevelInfo);
      }
      if (other.barriersInfo_ != null) {
        if (barriersInfo_ == null) {
          BarriersInfo = new global::SLG.PlayerAllBarriers();
        }
        BarriersInfo.MergeFrom(other.BarriersInfo);
      }
      newbieGuide_.Add(other.newbieGuide_);
      if (other.ServerOpenTime != 0UL) {
        ServerOpenTime = other.ServerOpenTime;
      }
      if (other.ServerTime != 0UL) {
        ServerTime = other.ServerTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            if (playerBaseinfo_ == null) {
              PlayerBaseinfo = new global::SLG.PlayerBaseInfo();
            }
            input.ReadMessage(PlayerBaseinfo);
            break;
          }
          case 26: {
            if (playerHeroInfo_ == null) {
              PlayerHeroInfo = new global::SLG.PlayerHeroInfo();
            }
            input.ReadMessage(PlayerHeroInfo);
            break;
          }
          case 34: {
            if (playerSoldierInfo_ == null) {
              PlayerSoldierInfo = new global::SLG.PlayerSoldierInfo();
            }
            input.ReadMessage(PlayerSoldierInfo);
            break;
          }
          case 42: {
            if (playerBuildings_ == null) {
              PlayerBuildings = new global::SLG.BuildingsInfo();
            }
            input.ReadMessage(PlayerBuildings);
            break;
          }
          case 50: {
            if (wsplayerInfo_ == null) {
              WsplayerInfo = new global::SLG.WsPlayerInfo();
            }
            input.ReadMessage(WsplayerInfo);
            break;
          }
          case 58: {
            if (unionInfo_ == null) {
              UnionInfo = new global::SLG.UnionData();
            }
            input.ReadMessage(UnionInfo);
            break;
          }
          case 66: {
            playerBlockList_.AddEntriesFrom(input, _repeated_playerBlockList_codec);
            break;
          }
          case 74: {
            if (taskData_ == null) {
              TaskData = new global::SLG.PlayerTasksData();
            }
            input.ReadMessage(TaskData);
            break;
          }
          case 82: {
            if (itemlist_ == null) {
              Itemlist = new global::SLG.CommodityList();
            }
            input.ReadMessage(Itemlist);
            break;
          }
          case 90: {
            if (heroesLevelInfo_ == null) {
              HeroesLevelInfo = new global::SLG.PlayerHeroesLevel();
            }
            input.ReadMessage(HeroesLevelInfo);
            break;
          }
          case 98: {
            if (barriersInfo_ == null) {
              BarriersInfo = new global::SLG.PlayerAllBarriers();
            }
            input.ReadMessage(BarriersInfo);
            break;
          }
          case 106:
          case 104: {
            newbieGuide_.AddEntriesFrom(input, _repeated_newbieGuide_codec);
            break;
          }
          case 112: {
            ServerOpenTime = input.ReadUInt64();
            break;
          }
          case 120: {
            ServerTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
