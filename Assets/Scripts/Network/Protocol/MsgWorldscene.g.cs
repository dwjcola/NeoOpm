// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg_worldscene.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SLG {

  /// <summary>Holder for reflection information generated from msg_worldscene.proto</summary>
  public static partial class MsgWorldsceneReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_worldscene.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgWorldsceneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRtc2dfd29ybGRzY2VuZS5wcm90bxIDU0xHGhJtc2dfYnVpbGRpbmcucHJv",
            "dG8aEG1zZ19iYXR0bGUucHJvdG8iKwoNZGlzY29ubmVjdE1zZxIKCgJJZBgB",
            "IAEoBBIOCgZyZWFzb24YAiABKAkiHQoFdmVjdDISCQoBeBgBIAEoAhIJCgF5",
            "GAIgASgCIjUKBkN1clBvcxINCgVsZXZlbBgBIAEoBRINCgVwb3NfeBgCIAEo",
            "AhINCgVwb3NfeRgDIAEoAiLzAwoJV3NPYmpJbmZvEhAKCGVudGl0eUlkGAEg",
            "ASgEEgwKBHR5cGUYAiABKA0SDQoFbGV2ZWwYAyABKAUSDQoFcG9zX3gYBCAB",
            "KAISDQoFcG9zX3kYBSABKAISEAoIdW5pb25fSWQYBiABKAQSEgoKdW5pb25f",
            "bmFtZRgHIAEoCRITCgt1bmlvbl9iYWRnZRgIIAEoBBIQCghwbGF5ZXJJZBgJ",
            "IAEoBBITCgtwbGF5ZXJfbmFtZRgKIAEoCRINCgVzdGF0ZRgLIAEoBRINCgVy",
            "ZXNJZBgMIAEoBRIRCglzdGFydFBvc1gYDSABKAISEQoJc3RhcnRQb3NZGA4g",
            "ASgCEg8KB2VuZFBvc1gYDyABKAISDwoHZW5kUG9zWRgQIAEoAhIRCgltb3Zl",
            "c3BlZWQYESABKAISEAoIYmF0dGxlSWQYEiABKAUSFQoNdHJhbnNmZXJHYXRl",
            "MRgTIAEoBBIVCg10cmFuc2ZlckdhdGUyGBQgASgEEg8KB3RpbWVfbXMYFSAB",
            "KAQSLAoQcGxheWVyX2J1aWxkaW5ncxgWIAEoCzISLlNMRy5CdWlsZGluZ3NJ",
            "bmZvEhgKBHBhdGgYFyADKAsyCi5TTEcudmVjdDISEQoJcGF0aEluZGV4GBgg",
            "ASgFEhIKCnN1bW1vbmVySWQYGSABKAQigQEKD1dzQnVpbGRpbmdzSW5mbxIQ",
            "CghlbnRpdHlJZBgBIAEoBBIQCghwbGF5ZXJJZBgCIAEoBBINCgVwb3NfeBgD",
            "IAEoAhINCgVwb3NfeRgEIAEoAhIsChBwbGF5ZXJfYnVpbGRpbmdzGAUgASgL",
            "MhIuU0xHLkJ1aWxkaW5nc0luZm8iqwEKC1dzQ29sbGVjdGVyEhAKCHBsYXll",
            "cklkGAEgASgEEg8KB3VuaW9uSWQYAiABKAQSEQoJdW5pb25OYW1lGAMgASgJ",
            "EhIKCnBsYXllck5hbWUYBCABKAkSDQoFc3BlZWQYBSABKA0SDgoGY3VyTnVt",
            "GAYgASgNEhAKCHRvdGFsTnVtGAcgASgNEg8KB3Ryb29wSWQYCCABKAQSEAoI",
            "ZW50aXR5SWQYCSABKAQiiAEKCVdzUmVzSW5mbxIQCghlbnRpdHlJZBgBIAEo",
            "BBIOCgZyZXNOdW0YAiABKA0SIwoJY29sbGVjdGVyGAMgASgLMhAuU0xHLldz",
            "Q29sbGVjdGVyEhYKDm93bmVyVW5pb25OYW1lGAQgASgJEg0KBXBvc194GAUg",
            "ASgCEg0KBXBvc195GAYgASgCIs8BCgVUcm9vcBIiCgp0cm9vcHVuaXRzGAEg",
            "AygLMg4uU0xHLlRyb29wVW5pdBIYCgRwYXRoGAIgAygLMgouU0xHLnZlY3Qy",
            "EhMKC3RhckVudGl0eUlkGAMgASgEEg8KB29wZXJhdGUYBCABKA0SFQoNdHJh",
            "bnNmZXJHYXRlMRgFIAEoBBIVCg10cmFuc2ZlckdhdGUyGAYgASgEEiUKCmJh",
            "dHRsZVBhcmEYByABKAsyES5TTEcuV3NCYXR0bGVQYXJhEg0KBXBhcmFtGAgg",
            "ASgNImEKC0NvbmZpZ1Ryb29wEgoKAklkGAEgASgNEgwKBHR5cGUYAiABKA0S",
            "IgoKdHJvb3B1bml0cxgDIAMoCzIOLlNMRy5Ucm9vcFVuaXQSFAoMYWN0aXZl",
            "U2tpbGxzGAQgAygFIjMKD0NvbmZpZ1Ryb29wTGlzdBIgCgZ0cm9vcHMYASAD",
            "KAsyEC5TTEcuQ29uZmlnVHJvb3AiSAoQVHJvb3BMaXN0UmVxUGFyYRIQCghw",
            "bGF5ZXJJZBgBIAEoBBIiCgR0eXBlGAIgASgOMhQuU0xHLkNvbmZpZ1Ryb29w",
            "VHlwZSK/AQoHV3NNYXJjaBIQCghlbnRpdHlJZBgBIAEoBBIYCgRwYXRoGAIg",
            "AygLMgouU0xHLnZlY3QyEhMKC3RhckVudGl0eUlkGAMgASgEEg8KB29wZXJh",
            "dGUYBCABKA0SFQoNdHJhbnNmZXJHYXRlMRgFIAEoBBIVCg10cmFuc2Zlckdh",
            "dGUyGAYgASgEEiUKCmJhdHRsZVBhcmEYByABKAsyES5TTEcuV3NCYXR0bGVQ",
            "YXJhEg0KBXBhcmFtGAggASgNIlUKCk9wZXJhdGVNc2cSDwoHb3BlcmF0ZRgB",
            "IAEoBRIMCgRhcmcxGAIgASgEEgwKBGFyZzIYAyABKAQSDAoEYXJnMxgEIAEo",
            "BBIMCgRhcmc0GAUgASgEIjIKDVJlc291cmNlVmFsdWUSDwoHcmVzVHlwZRgB",
            "IAEoDRIQCghyZXNWYWx1ZRgCIAEoBCI9CglXc09iakxpc3QSHwoHYWRkTGlz",
            "dBgBIAMoCzIOLlNMRy5Xc09iakluZm8SDwoHZGVsTGlzdBgCIAMoBCIbCgdX",
            "c09iaklkEhAKCGVudGl0eUlkGAEgASgEIi0KC1dzVW5pb25MaXN0Eh4KBnVu",
            "aW9ucxgBIAMoCzIOLlNMRy5Xc09iakluZm8igwIKEFdzVHJvb3BCYXNpY0lu",
            "Zm8SEAoIZW50aXR5SWQYASABKAQSDQoFc3RhdGUYAiABKAUSEAoIbGVhZGVy",
            "SWQYAyABKAUSEQoJc3RhcnRQb3NYGAQgASgCEhEKCXN0YXJ0UG9zWRgFIAEo",
            "AhIPCgdlbmRQb3NYGAYgASgCEg8KB2VuZFBvc1kYByABKAISDwoHY3VyUG9z",
            "WBgIIAEoAhIPCgdjdXJQb3NZGAkgASgCEg0KBXNwZWVkGAogASgCEhAKCHRv",
            "dGFsTnVtGAsgASgFEg8KB2N1ckxvYWQYDCABKAUSDwoHbWF4TG9hZBgNIAEo",
            "BRIPCgd0aW1lX21zGBUgASgEImIKDVdzVHJvb3BEZXRhaWwSDQoFc3RhdGUY",
            "ASABKAUSHwoHcmVzSW5mbxgCIAEoCzIOLlNMRy5Xc1Jlc0luZm8SIQoJbWFy",
            "Y2hJbmZvGAMgASgLMg4uU0xHLldzT2JqSW5mbyJZCgxXc1BsYXllckluZm8S",
            "IgoKY2FzdGxlSW5mbxgBIAEoCzIOLlNMRy5Xc09iakluZm8SJQoGdHJvb3Bz",
            "GAIgAygLMhUuU0xHLldzVHJvb3BCYXNpY0luZm8iWgoPR01DcmVhdGVSb2xl",
            "UmVxEg4KBmFjY19pZBgBIAEoCRIRCglyb2xlX25hbWUYAiABKAkSEAoIcGxh",
            "eWVySWQYAyABKAQSEgoKZnJvbnRlbmRJZBgEIAEoCSK5AQoMV3NDYXN0bGVN",
            "b3ZlEhoKBnRhclBvcxgBIAEoCzIKLlNMRy52ZWN0MhITCgt0YXJFbnRpdHlJ",
            "ZBgCIAEoBBIjCgdvcGVyYXRlGAMgASgOMhIuU0xHLldzT3BlcmF0ZVR5cGUS",
            "FQoNdHJhbnNmZXJHYXRlMRgEIAEoBBIVCg10cmFuc2ZlckdhdGUyGAUgASgE",
            "EiUKCmJhdHRsZVBhcmEYBiABKAsyES5TTEcuV3NCYXR0bGVQYXJhIkcKEldz",
            "VHJhbnNmZXJHYXRlSW5mbxIQCghlbnRpdHlJZBgBIAEoBBIQCgh1bmlvbl9J",
            "ZBgCIAEoBBINCgVyZXNJZBgDIAEoBSI7ChJXc1RyYW5zZmVyR2F0ZUxpc3QS",
            "JQoEbGlzdBgBIAMoCzIXLlNMRy5Xc1RyYW5zZmVyR2F0ZUluZm8iIwoGV3NQ",
            "YXRoEhkKBXBvaW50GAEgAygLMgouU0xHLnZlY3QyIj0KClNlYXJjaFBhcmES",
            "IAoEdHlwZRgBIAEoDjISLlNMRy5TZWFyY2hPYmpUeXBlEg0KBWxldmVsGAIg",
            "ASgNIkAKDlNlYXJjaGVkT2JqZWN0EhAKCGVudGl0eUlkGAEgASgEEg0KBXBv",
            "c194GAIgASgCEg0KBXBvc195GAMgASgCIjcKElNlYXJjaGVkT2JqZWN0TGlz",
            "dBIhCgRsaXN0GAEgAygLMhMuU0xHLlNlYXJjaGVkT2JqZWN0IjwKCEJvb2tt",
            "YXJrEgwKBHR5cGUYASABKA0SDAoEbmFtZRgCIAEoCRIJCgF4GAMgASgNEgkK",
            "AXkYBCABKA0iKwoMQm9va21hcmtMaXN0EhsKBGxpc3QYASADKAsyDS5TTEcu",
            "Qm9va21hcmsiNgoKUmV3YXJkSW5mbxIMCgR0eXBlGAEgASgNEgsKA3RpZBgC",
            "IAEoDRINCgVjb3VudBgDIAEoAiJCCg9HZXROZXdSZXdhcmRSZXESEAoIcGxh",
            "eWVySWQYASABKAQSHQoEbGlzdBgCIAMoCzIPLlNMRy5SZXdhcmRJbmZvKqEB",
            "CgpXc09ialN0YXRlEg4KClN0YXRlX0luaXQQABIRCg1TdGF0ZV9TdGF0aW9u",
            "EAESDwoLU3RhdGVfTWFyY2gQAhIUChBTdGF0ZV9Db2xsZWN0aW5nEAMSEAoM",
            "U3RhdGVfQXRraW5nEAQSEAoMU3RhdGVfUmV0dXJuEAUSEQoNU3RhdGVfUmVj",
            "eWNsZRAGEhIKDlN0YXRlX1RyYW5zZmVyEAcq9wEKDFdzRW50aXR5VHlwZRIR",
            "Cg1FbnRpdHlfUGxheWVyEAASEgoORW50aXR5X01vbnN0ZXIQARITCg9FbnRp",
            "dHlfUmVzb3VyY2UQAhITCg9FbnRpdHlfQnVpbGRpbmcQAxIQCgxFbnRpdHlf",
            "VHJvb3AQBBITCg9FbnRpdHlfU2NlbmVPYmoQBRIXChNFbnRpdHlfVHJhbnNm",
            "ZXJHYXRlEAYSDwoLRW50aXR5X0xhbmQQBxIWChJFbnRpdHlfVHJhZGluZ1Bv",
            "cnQQCBIZChVFbnRpdHlfTW9uc3Rlck91dHBvc3QQCRISCg5FbnRpdHlfTUFY",
            "X05VTRAKKj0KD0NvbmZpZ1Ryb29wVHlwZRITCg9FeHBlZGl0aW9uX0FybXkQ",
            "ABIVChFFeHBlZGl0aW9uX0Nhc3RsZRABKm0KDVdzT3BlcmF0ZVR5cGUSEAoM",
            "T3BlcmF0ZV9Nb3ZlEAASEwoPT3BlcmF0ZV9Db2xsZWN0EAESDwoLT3BlcmF0",
            "ZV9BdGsQAhISCg5PcGVyYXRlX1JldHVybhADEhAKDE9wZXJhdGVfU3RvcBAE",
            "KoABCg1QbGF5ZXJSZXNUeXBlEgsKB1Vua25vd24QABIICgRGb29kEAESCQoF",
            "U3RvbmUQAhIICgRJcm9uEAMSCwoHQ3J5c3RhbBAEEgwKCEZyZWVHb2xkEAUS",
            "DQoJTW9uZXlHb2xkEAYSCAoER29sZBAHEg8KC0FjdGlvblRva2VuEAgqhwMK",
            "CldzUmVzcENvZGUSDgoKT3BlcmF0ZV9PSxAAEhAKDFJlc19Ob3RFeGlzdBAB",
            "EhQKEFJlc19Ob3RSZWFjaGFibGUQAhIQCgxUcm9vcF9NQVhOVU0QAxIXChNU",
            "cm9vcF9MZWFkZXJJZEVycm9yEAQSGAoUVHJvb3BfU29sZGllcklkRXJyb3IQ",
            "BRIZChVUcm9vcF9BdGtGcmllbmRUYXJnZXQQBhIXChNUcm9vcF9JbnZhaWxk",
            "VGFyZ2V0EAcSIAocVHJhbnNmZXJfSW52YWlsZFRyYW5zZmVyR2F0ZRAIEhMK",
            "D0Nhc3RsZV9Ob3RFeGlzdBAJEhkKFU1vdmVfSW52YWxpZFRhcmdldFBvcxAK",
            "EhIKDlRyb29wX05vdEV4aXN0EAsSEgoOVHJvb3BfTm90T3duZXIQDBIZChVU",
            "cm9vcF9Ob3RTZWxlY3RMZWFkZXIQDRIaChZUcm9vcF9Ob3RTZWxlY3RTb2xk",
            "aWVyEA4SFwoTTW9uc3Rlcl9DYW50SnVtcEF0axAPKmEKDVNlYXJjaE9ialR5",
            "cGUSEAoMVHlwZV9Nb25zdGVyEAASDQoJVHlwZV9Gb29kEAESDgoKVHlwZV9T",
            "dG9uZRACEg0KCVR5cGVfSXJvbhADEhAKDFR5cGVfQ3J5c3RhbBAEKkkKEEJv",
            "b2ttYXJrUmVzcENvZGUSCwoHUmVzcF9PSxAAEhQKEE5hbWVMZW5ndGhfTGlt",
            "aXQQARISCg5Ub3RhbE51bV9MaW1pdBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SLG.MsgBuildingReflection.Descriptor, global::SLG.MsgBattleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SLG.WsObjState), typeof(global::SLG.WsEntityType), typeof(global::SLG.ConfigTroopType), typeof(global::SLG.WsOperateType), typeof(global::SLG.PlayerResType), typeof(global::SLG.WsRespCode), typeof(global::SLG.SearchObjType), typeof(global::SLG.BookmarkRespCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.disconnectMsg), global::SLG.disconnectMsg.Parser, new[]{ "Id", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.vect2), global::SLG.vect2.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.CurPos), global::SLG.CurPos.Parser, new[]{ "Level", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsObjInfo), global::SLG.WsObjInfo.Parser, new[]{ "EntityId", "Type", "Level", "PosX", "PosY", "UnionId", "UnionName", "UnionBadge", "PlayerId", "PlayerName", "State", "ResId", "StartPosX", "StartPosY", "EndPosX", "EndPosY", "Movespeed", "BattleId", "TransferGate1", "TransferGate2", "TimeMs", "PlayerBuildings", "Path", "PathIndex", "SummonerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsBuildingsInfo), global::SLG.WsBuildingsInfo.Parser, new[]{ "EntityId", "PlayerId", "PosX", "PosY", "PlayerBuildings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsCollecter), global::SLG.WsCollecter.Parser, new[]{ "PlayerId", "UnionId", "UnionName", "PlayerName", "Speed", "CurNum", "TotalNum", "TroopId", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsResInfo), global::SLG.WsResInfo.Parser, new[]{ "EntityId", "ResNum", "Collecter", "OwnerUnionName", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.Troop), global::SLG.Troop.Parser, new[]{ "Troopunits", "Path", "TarEntityId", "Operate", "TransferGate1", "TransferGate2", "BattlePara", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ConfigTroop), global::SLG.ConfigTroop.Parser, new[]{ "Id", "Type", "Troopunits", "ActiveSkills" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ConfigTroopList), global::SLG.ConfigTroopList.Parser, new[]{ "Troops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.TroopListReqPara), global::SLG.TroopListReqPara.Parser, new[]{ "PlayerId", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsMarch), global::SLG.WsMarch.Parser, new[]{ "EntityId", "Path", "TarEntityId", "Operate", "TransferGate1", "TransferGate2", "BattlePara", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.OperateMsg), global::SLG.OperateMsg.Parser, new[]{ "Operate", "Arg1", "Arg2", "Arg3", "Arg4" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.ResourceValue), global::SLG.ResourceValue.Parser, new[]{ "ResType", "ResValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsObjList), global::SLG.WsObjList.Parser, new[]{ "AddList", "DelList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsObjId), global::SLG.WsObjId.Parser, new[]{ "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsUnionList), global::SLG.WsUnionList.Parser, new[]{ "Unions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsTroopBasicInfo), global::SLG.WsTroopBasicInfo.Parser, new[]{ "EntityId", "State", "LeaderId", "StartPosX", "StartPosY", "EndPosX", "EndPosY", "CurPosX", "CurPosY", "Speed", "TotalNum", "CurLoad", "MaxLoad", "TimeMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsTroopDetail), global::SLG.WsTroopDetail.Parser, new[]{ "State", "ResInfo", "MarchInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsPlayerInfo), global::SLG.WsPlayerInfo.Parser, new[]{ "CastleInfo", "Troops" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GMCreateRoleReq), global::SLG.GMCreateRoleReq.Parser, new[]{ "AccId", "RoleName", "PlayerId", "FrontendId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsCastleMove), global::SLG.WsCastleMove.Parser, new[]{ "TarPos", "TarEntityId", "Operate", "TransferGate1", "TransferGate2", "BattlePara" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsTransferGateInfo), global::SLG.WsTransferGateInfo.Parser, new[]{ "EntityId", "UnionId", "ResId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsTransferGateList), global::SLG.WsTransferGateList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.WsPath), global::SLG.WsPath.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SearchPara), global::SLG.SearchPara.Parser, new[]{ "Type", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SearchedObject), global::SLG.SearchedObject.Parser, new[]{ "EntityId", "PosX", "PosY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.SearchedObjectList), global::SLG.SearchedObjectList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.Bookmark), global::SLG.Bookmark.Parser, new[]{ "Type", "Name", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.BookmarkList), global::SLG.BookmarkList.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.RewardInfo), global::SLG.RewardInfo.Parser, new[]{ "Type", "Tid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SLG.GetNewRewardReq), global::SLG.GetNewRewardReq.Parser, new[]{ "PlayerId", "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum WsObjState {
    [pbr::OriginalName("State_Init")] StateInit = 0,
    /// <summary>
    ///驻扎
    /// </summary>
    [pbr::OriginalName("State_Station")] StateStation = 1,
    /// <summary>
    ///行军
    /// </summary>
    [pbr::OriginalName("State_March")] StateMarch = 2,
    /// <summary>
    ///采集
    /// </summary>
    [pbr::OriginalName("State_Collecting")] StateCollecting = 3,
    /// <summary>
    ///战斗
    /// </summary>
    [pbr::OriginalName("State_Atking")] StateAtking = 4,
    /// <summary>
    ///返回途中
    /// </summary>
    [pbr::OriginalName("State_Return")] StateReturn = 5,
    /// <summary>
    ///回收
    /// </summary>
    [pbr::OriginalName("State_Recycle")] StateRecycle = 6,
    /// <summary>
    ///传送中
    /// </summary>
    [pbr::OriginalName("State_Transfer")] StateTransfer = 7,
  }

  public enum WsEntityType {
    /// <summary>
    ///玩家
    /// </summary>
    [pbr::OriginalName("Entity_Player")] EntityPlayer = 0,
    /// <summary>
    ///野外NPC
    /// </summary>
    [pbr::OriginalName("Entity_Monster")] EntityMonster = 1,
    /// <summary>
    ///资源矿点
    /// </summary>
    [pbr::OriginalName("Entity_Resource")] EntityResource = 2,
    /// <summary>
    ///城堡
    /// </summary>
    [pbr::OriginalName("Entity_Building")] EntityBuilding = 3,
    /// <summary>
    ///部队
    /// </summary>
    [pbr::OriginalName("Entity_Troop")] EntityTroop = 4,
    /// <summary>
    ///要塞，关卡等
    /// </summary>
    [pbr::OriginalName("Entity_SceneObj")] EntitySceneObj = 5,
    /// <summary>
    ///传送门
    /// </summary>
    [pbr::OriginalName("Entity_TransferGate")] EntityTransferGate = 6,
    /// <summary>
    ///空地
    /// </summary>
    [pbr::OriginalName("Entity_Land")] EntityLand = 7,
    /// <summary>
    ///贸易港口
    /// </summary>
    [pbr::OriginalName("Entity_TradingPort")] EntityTradingPort = 8,
    /// <summary>
    ///怪物哨站
    /// </summary>
    [pbr::OriginalName("Entity_MonsterOutpost")] EntityMonsterOutpost = 9,
    [pbr::OriginalName("Entity_MAX_NUM")] EntityMaxNum = 10,
  }

  public enum ConfigTroopType {
    /// <summary>
    ///远征部队
    /// </summary>
    [pbr::OriginalName("Expedition_Army")] ExpeditionArmy = 0,
    /// <summary>
    ///远征主城
    /// </summary>
    [pbr::OriginalName("Expedition_Castle")] ExpeditionCastle = 1,
  }

  public enum WsOperateType {
    [pbr::OriginalName("Operate_Move")] OperateMove = 0,
    [pbr::OriginalName("Operate_Collect")] OperateCollect = 1,
    [pbr::OriginalName("Operate_Atk")] OperateAtk = 2,
    /// <summary>
    ///回城
    /// </summary>
    [pbr::OriginalName("Operate_Return")] OperateReturn = 3,
    /// <summary>
    ///原地驻扎
    /// </summary>
    [pbr::OriginalName("Operate_Stop")] OperateStop = 4,
  }

  public enum PlayerResType {
    [pbr::OriginalName("Unknown")] Unknown = 0,
    [pbr::OriginalName("Food")] Food = 1,
    [pbr::OriginalName("Stone")] Stone = 2,
    [pbr::OriginalName("Iron")] Iron = 3,
    [pbr::OriginalName("Crystal")] Crystal = 4,
    [pbr::OriginalName("FreeGold")] FreeGold = 5,
    [pbr::OriginalName("MoneyGold")] MoneyGold = 6,
    [pbr::OriginalName("Gold")] Gold = 7,
    [pbr::OriginalName("ActionToken")] ActionToken = 8,
  }

  public enum WsRespCode {
    [pbr::OriginalName("Operate_OK")] OperateOk = 0,
    /// <summary>
    ///资源点已消失，可能刚好被其他人采集完了
    /// </summary>
    [pbr::OriginalName("Res_NotExist")] ResNotExist = 1,
    /// <summary>
    ///资源点不可达无直达路径
    /// </summary>
    [pbr::OriginalName("Res_NotReachable")] ResNotReachable = 2,
    /// <summary>
    ///队伍数量达到上限
    /// </summary>
    [pbr::OriginalName("Troop_MAXNUM")] TroopMaxnum = 3,
    /// <summary>
    ///统帅ID错误
    /// </summary>
    [pbr::OriginalName("Troop_LeaderIdError")] TroopLeaderIdError = 4,
    /// <summary>
    ///士兵ID错误
    /// </summary>
    [pbr::OriginalName("Troop_SoldierIdError")] TroopSoldierIdError = 5,
    /// <summary>
    ///不可选取友方目标作为攻击目标
    /// </summary>
    [pbr::OriginalName("Troop_AtkFriendTarget")] TroopAtkFriendTarget = 6,
    /// <summary>
    ///无效目标(即无目标ID也无目标点)
    /// </summary>
    [pbr::OriginalName("Troop_InvaildTarget")] TroopInvaildTarget = 7,
    /// <summary>
    ///无效传送门，没有通过这个传送门的权限
    /// </summary>
    [pbr::OriginalName("Transfer_InvaildTransferGate")] TransferInvaildTransferGate = 8,
    /// <summary>
    ///没有找到城堡
    /// </summary>
    [pbr::OriginalName("Castle_NotExist")] CastleNotExist = 9,
    /// <summary>
    ///移动操作无效目标点
    /// </summary>
    [pbr::OriginalName("Move_InvalidTargetPos")] MoveInvalidTargetPos = 10,
    /// <summary>
    ///没有找到部队
    /// </summary>
    [pbr::OriginalName("Troop_NotExist")] TroopNotExist = 11,
    /// <summary>
    ///不是自己的部队
    /// </summary>
    [pbr::OriginalName("Troop_NotOwner")] TroopNotOwner = 12,
    /// <summary>
    ///创建部队，没有统帅
    /// </summary>
    [pbr::OriginalName("Troop_NotSelectLeader")] TroopNotSelectLeader = 13,
    /// <summary>
    ///创建部队，没有士兵
    /// </summary>
    [pbr::OriginalName("Troop_NotSelectSoldier")] TroopNotSelectSoldier = 14,
    /// <summary>
    ///不能越级打怪
    /// </summary>
    [pbr::OriginalName("Monster_CantJumpAtk")] MonsterCantJumpAtk = 15,
  }

  public enum SearchObjType {
    /// <summary>
    ///野怪
    /// </summary>
    [pbr::OriginalName("Type_Monster")] TypeMonster = 0,
    /// <summary>
    ///粮食
    /// </summary>
    [pbr::OriginalName("Type_Food")] TypeFood = 1,
    /// <summary>
    ///石头
    /// </summary>
    [pbr::OriginalName("Type_Stone")] TypeStone = 2,
    /// <summary>
    ///精铁
    /// </summary>
    [pbr::OriginalName("Type_Iron")] TypeIron = 3,
    /// <summary>
    ///灵蕴水晶
    /// </summary>
    [pbr::OriginalName("Type_Crystal")] TypeCrystal = 4,
  }

  public enum BookmarkRespCode {
    /// <summary>
    ///操作成功
    /// </summary>
    [pbr::OriginalName("Resp_OK")] RespOk = 0,
    /// <summary>
    ///名称超过长度
    /// </summary>
    [pbr::OriginalName("NameLength_Limit")] NameLengthLimit = 1,
    /// <summary>
    ///书签总数超过限制
    /// </summary>
    [pbr::OriginalName("TotalNum_Limit")] TotalNumLimit = 2,
  }

  #endregion

  #region Messages
  public sealed partial class disconnectMsg : pb::IMessage<disconnectMsg> {
    private static readonly pb::MessageParser<disconnectMsg> _parser = new pb::MessageParser<disconnectMsg>(() => new disconnectMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<disconnectMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public disconnectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public disconnectMsg(disconnectMsg other) : this() {
      id_ = other.id_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public disconnectMsg Clone() {
      return new disconnectMsg(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as disconnectMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(disconnectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(disconnectMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class vect2 : pb::IMessage<vect2> {
    private static readonly pb::MessageParser<vect2> _parser = new pb::MessageParser<vect2>(() => new vect2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<vect2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public vect2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public vect2(vect2 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public vect2 Clone() {
      return new vect2(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as vect2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(vect2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(vect2 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CurPos : pb::IMessage<CurPos> {
    private static readonly pb::MessageParser<CurPos> _parser = new pb::MessageParser<CurPos>(() => new CurPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurPos(CurPos other) : this() {
      level_ = other.level_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurPos Clone() {
      return new CurPos(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    /// <summary>
    ///观察级别 1是3x3 2是5x5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurPos other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsObjInfo : pb::IMessage<WsObjInfo> {
    private static readonly pb::MessageParser<WsObjInfo> _parser = new pb::MessageParser<WsObjInfo>(() => new WsObjInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsObjInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjInfo(WsObjInfo other) : this() {
      entityId_ = other.entityId_;
      type_ = other.type_;
      level_ = other.level_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      unionId_ = other.unionId_;
      unionName_ = other.unionName_;
      unionBadge_ = other.unionBadge_;
      playerId_ = other.playerId_;
      playerName_ = other.playerName_;
      state_ = other.state_;
      resId_ = other.resId_;
      startPosX_ = other.startPosX_;
      startPosY_ = other.startPosY_;
      endPosX_ = other.endPosX_;
      endPosY_ = other.endPosY_;
      movespeed_ = other.movespeed_;
      battleId_ = other.battleId_;
      transferGate1_ = other.transferGate1_;
      transferGate2_ = other.transferGate2_;
      timeMs_ = other.timeMs_;
      playerBuildings_ = other.playerBuildings_ != null ? other.playerBuildings_.Clone() : null;
      path_ = other.path_.Clone();
      pathIndex_ = other.pathIndex_;
      summonerId_ = other.summonerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjInfo Clone() {
      return new WsObjInfo(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    ///本地图的唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 4;
    private float posX_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 5;
    private float posY_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "union_Id" field.</summary>
    public const int UnionIdFieldNumber = 6;
    private ulong unionId_;
    /// <summary>
    ///联盟Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "union_name" field.</summary>
    public const int UnionNameFieldNumber = 7;
    private string unionName_ = "";
    /// <summary>
    ///联盟名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "union_badge" field.</summary>
    public const int UnionBadgeFieldNumber = 8;
    private ulong unionBadge_;
    /// <summary>
    ///联盟徽记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionBadge {
      get { return unionBadge_; }
      set {
        unionBadge_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 9;
    private ulong playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 10;
    private string playerName_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 11;
    private int state_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "resId" field.</summary>
    public const int ResIdFieldNumber = 12;
    private int resId_;
    /// <summary>
    ///资源Id，表中id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResId {
      get { return resId_; }
      set {
        resId_ = value;
      }
    }

    /// <summary>Field number for the "startPosX" field.</summary>
    public const int StartPosXFieldNumber = 13;
    private float startPosX_;
    /// <summary>
    ///行军起始点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartPosX {
      get { return startPosX_; }
      set {
        startPosX_ = value;
      }
    }

    /// <summary>Field number for the "startPosY" field.</summary>
    public const int StartPosYFieldNumber = 14;
    private float startPosY_;
    /// <summary>
    ///行军起始点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartPosY {
      get { return startPosY_; }
      set {
        startPosY_ = value;
      }
    }

    /// <summary>Field number for the "endPosX" field.</summary>
    public const int EndPosXFieldNumber = 15;
    private float endPosX_;
    /// <summary>
    ///行军结束点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndPosX {
      get { return endPosX_; }
      set {
        endPosX_ = value;
      }
    }

    /// <summary>Field number for the "endPosY" field.</summary>
    public const int EndPosYFieldNumber = 16;
    private float endPosY_;
    /// <summary>
    ///行军结束点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndPosY {
      get { return endPosY_; }
      set {
        endPosY_ = value;
      }
    }

    /// <summary>Field number for the "movespeed" field.</summary>
    public const int MovespeedFieldNumber = 17;
    private float movespeed_;
    /// <summary>
    ///行军速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Movespeed {
      get { return movespeed_; }
      set {
        movespeed_ = value;
      }
    }

    /// <summary>Field number for the "battleId" field.</summary>
    public const int BattleIdFieldNumber = 18;
    private int battleId_;
    /// <summary>
    ///战争Id 大于0 战斗中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "transferGate1" field.</summary>
    public const int TransferGate1FieldNumber = 19;
    private ulong transferGate1_;
    /// <summary>
    ///传送门入 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate1 {
      get { return transferGate1_; }
      set {
        transferGate1_ = value;
      }
    }

    /// <summary>Field number for the "transferGate2" field.</summary>
    public const int TransferGate2FieldNumber = 20;
    private ulong transferGate2_;
    /// <summary>
    ///传送门出 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate2 {
      get { return transferGate2_; }
      set {
        transferGate2_ = value;
      }
    }

    /// <summary>Field number for the "time_ms" field.</summary>
    public const int TimeMsFieldNumber = 21;
    private ulong timeMs_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeMs {
      get { return timeMs_; }
      set {
        timeMs_ = value;
      }
    }

    /// <summary>Field number for the "player_buildings" field.</summary>
    public const int PlayerBuildingsFieldNumber = 22;
    private global::SLG.BuildingsInfo playerBuildings_;
    /// <summary>
    ///摄像机拉近时，需要 看到具体的建筑信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.BuildingsInfo PlayerBuildings {
      get { return playerBuildings_; }
      set {
        playerBuildings_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 23;
    private static readonly pb::FieldCodec<global::SLG.vect2> _repeated_path_codec
        = pb::FieldCodec.ForMessage(186, global::SLG.vect2.Parser);
    private readonly pbc::RepeatedField<global::SLG.vect2> path_ = new pbc::RepeatedField<global::SLG.vect2>();
    /// <summary>
    ///路点信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.vect2> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "pathIndex" field.</summary>
    public const int PathIndexFieldNumber = 24;
    private int pathIndex_;
    /// <summary>
    ///下一个路点信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PathIndex {
      get { return pathIndex_; }
      set {
        pathIndex_ = value;
      }
    }

    /// <summary>Field number for the "summonerId" field.</summary>
    public const int SummonerIdFieldNumber = 25;
    private ulong summonerId_;
    /// <summary>
    ///召唤玩家Id,这个值不为0时，表示该Obj(怪)是召唤出来的,客户端需要是召唤者才可见
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SummonerId {
      get { return summonerId_; }
      set {
        summonerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsObjInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsObjInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (UnionId != other.UnionId) return false;
      if (UnionName != other.UnionName) return false;
      if (UnionBadge != other.UnionBadge) return false;
      if (PlayerId != other.PlayerId) return false;
      if (PlayerName != other.PlayerName) return false;
      if (State != other.State) return false;
      if (ResId != other.ResId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartPosX, other.StartPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartPosY, other.StartPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndPosX, other.EndPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndPosY, other.EndPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Movespeed, other.Movespeed)) return false;
      if (BattleId != other.BattleId) return false;
      if (TransferGate1 != other.TransferGate1) return false;
      if (TransferGate2 != other.TransferGate2) return false;
      if (TimeMs != other.TimeMs) return false;
      if (!object.Equals(PlayerBuildings, other.PlayerBuildings)) return false;
      if(!path_.Equals(other.path_)) return false;
      if (PathIndex != other.PathIndex) return false;
      if (SummonerId != other.SummonerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (UnionBadge != 0UL) hash ^= UnionBadge.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (ResId != 0) hash ^= ResId.GetHashCode();
      if (StartPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartPosX);
      if (StartPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartPosY);
      if (EndPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndPosX);
      if (EndPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndPosY);
      if (Movespeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Movespeed);
      if (BattleId != 0) hash ^= BattleId.GetHashCode();
      if (TransferGate1 != 0UL) hash ^= TransferGate1.GetHashCode();
      if (TransferGate2 != 0UL) hash ^= TransferGate2.GetHashCode();
      if (TimeMs != 0UL) hash ^= TimeMs.GetHashCode();
      if (playerBuildings_ != null) hash ^= PlayerBuildings.GetHashCode();
      hash ^= path_.GetHashCode();
      if (PathIndex != 0) hash ^= PathIndex.GetHashCode();
      if (SummonerId != 0UL) hash ^= SummonerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (PosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosY);
      }
      if (UnionId != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(UnionName);
      }
      if (UnionBadge != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(UnionBadge);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(PlayerId);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PlayerName);
      }
      if (State != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(State);
      }
      if (ResId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ResId);
      }
      if (StartPosX != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(StartPosX);
      }
      if (StartPosY != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(StartPosY);
      }
      if (EndPosX != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(EndPosX);
      }
      if (EndPosY != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(EndPosY);
      }
      if (Movespeed != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Movespeed);
      }
      if (BattleId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(BattleId);
      }
      if (TransferGate1 != 0UL) {
        output.WriteRawTag(152, 1);
        output.WriteUInt64(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(TransferGate2);
      }
      if (TimeMs != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(TimeMs);
      }
      if (playerBuildings_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(PlayerBuildings);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (PathIndex != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(PathIndex);
      }
      if (SummonerId != 0UL) {
        output.WriteRawTag(200, 1);
        output.WriteUInt64(SummonerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (UnionBadge != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionBadge);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (ResId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
      }
      if (StartPosX != 0F) {
        size += 1 + 4;
      }
      if (StartPosY != 0F) {
        size += 1 + 4;
      }
      if (EndPosX != 0F) {
        size += 1 + 4;
      }
      if (EndPosY != 0F) {
        size += 2 + 4;
      }
      if (Movespeed != 0F) {
        size += 2 + 4;
      }
      if (BattleId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattleId);
      }
      if (TransferGate1 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate2);
      }
      if (TimeMs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TimeMs);
      }
      if (playerBuildings_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayerBuildings);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (PathIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PathIndex);
      }
      if (SummonerId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SummonerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsObjInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.UnionBadge != 0UL) {
        UnionBadge = other.UnionBadge;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.ResId != 0) {
        ResId = other.ResId;
      }
      if (other.StartPosX != 0F) {
        StartPosX = other.StartPosX;
      }
      if (other.StartPosY != 0F) {
        StartPosY = other.StartPosY;
      }
      if (other.EndPosX != 0F) {
        EndPosX = other.EndPosX;
      }
      if (other.EndPosY != 0F) {
        EndPosY = other.EndPosY;
      }
      if (other.Movespeed != 0F) {
        Movespeed = other.Movespeed;
      }
      if (other.BattleId != 0) {
        BattleId = other.BattleId;
      }
      if (other.TransferGate1 != 0UL) {
        TransferGate1 = other.TransferGate1;
      }
      if (other.TransferGate2 != 0UL) {
        TransferGate2 = other.TransferGate2;
      }
      if (other.TimeMs != 0UL) {
        TimeMs = other.TimeMs;
      }
      if (other.playerBuildings_ != null) {
        if (playerBuildings_ == null) {
          PlayerBuildings = new global::SLG.BuildingsInfo();
        }
        PlayerBuildings.MergeFrom(other.PlayerBuildings);
      }
      path_.Add(other.path_);
      if (other.PathIndex != 0) {
        PathIndex = other.PathIndex;
      }
      if (other.SummonerId != 0UL) {
        SummonerId = other.SummonerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 37: {
            PosX = input.ReadFloat();
            break;
          }
          case 45: {
            PosY = input.ReadFloat();
            break;
          }
          case 48: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 58: {
            UnionName = input.ReadString();
            break;
          }
          case 64: {
            UnionBadge = input.ReadUInt64();
            break;
          }
          case 72: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 82: {
            PlayerName = input.ReadString();
            break;
          }
          case 88: {
            State = input.ReadInt32();
            break;
          }
          case 96: {
            ResId = input.ReadInt32();
            break;
          }
          case 109: {
            StartPosX = input.ReadFloat();
            break;
          }
          case 117: {
            StartPosY = input.ReadFloat();
            break;
          }
          case 125: {
            EndPosX = input.ReadFloat();
            break;
          }
          case 133: {
            EndPosY = input.ReadFloat();
            break;
          }
          case 141: {
            Movespeed = input.ReadFloat();
            break;
          }
          case 144: {
            BattleId = input.ReadInt32();
            break;
          }
          case 152: {
            TransferGate1 = input.ReadUInt64();
            break;
          }
          case 160: {
            TransferGate2 = input.ReadUInt64();
            break;
          }
          case 168: {
            TimeMs = input.ReadUInt64();
            break;
          }
          case 178: {
            if (playerBuildings_ == null) {
              PlayerBuildings = new global::SLG.BuildingsInfo();
            }
            input.ReadMessage(PlayerBuildings);
            break;
          }
          case 186: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 192: {
            PathIndex = input.ReadInt32();
            break;
          }
          case 200: {
            SummonerId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsBuildingsInfo : pb::IMessage<WsBuildingsInfo> {
    private static readonly pb::MessageParser<WsBuildingsInfo> _parser = new pb::MessageParser<WsBuildingsInfo>(() => new WsBuildingsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsBuildingsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsBuildingsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsBuildingsInfo(WsBuildingsInfo other) : this() {
      entityId_ = other.entityId_;
      playerId_ = other.playerId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      playerBuildings_ = other.playerBuildings_ != null ? other.playerBuildings_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsBuildingsInfo Clone() {
      return new WsBuildingsInfo(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    ///本地图的唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private ulong playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 3;
    private float posX_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 4;
    private float posY_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "player_buildings" field.</summary>
    public const int PlayerBuildingsFieldNumber = 5;
    private global::SLG.BuildingsInfo playerBuildings_;
    /// <summary>
    ///摄像机拉近时，需要 看到具体的建筑信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.BuildingsInfo PlayerBuildings {
      get { return playerBuildings_; }
      set {
        playerBuildings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsBuildingsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsBuildingsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!object.Equals(PlayerBuildings, other.PlayerBuildings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (playerBuildings_ != null) hash ^= PlayerBuildings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PlayerId);
      }
      if (PosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosY);
      }
      if (playerBuildings_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerBuildings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (playerBuildings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBuildings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsBuildingsInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.playerBuildings_ != null) {
        if (playerBuildings_ == null) {
          PlayerBuildings = new global::SLG.BuildingsInfo();
        }
        PlayerBuildings.MergeFrom(other.PlayerBuildings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 16: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 29: {
            PosX = input.ReadFloat();
            break;
          }
          case 37: {
            PosY = input.ReadFloat();
            break;
          }
          case 42: {
            if (playerBuildings_ == null) {
              PlayerBuildings = new global::SLG.BuildingsInfo();
            }
            input.ReadMessage(PlayerBuildings);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsCollecter : pb::IMessage<WsCollecter> {
    private static readonly pb::MessageParser<WsCollecter> _parser = new pb::MessageParser<WsCollecter>(() => new WsCollecter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsCollecter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsCollecter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsCollecter(WsCollecter other) : this() {
      playerId_ = other.playerId_;
      unionId_ = other.unionId_;
      unionName_ = other.unionName_;
      playerName_ = other.playerName_;
      speed_ = other.speed_;
      curNum_ = other.curNum_;
      totalNum_ = other.totalNum_;
      troopId_ = other.troopId_;
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsCollecter Clone() {
      return new WsCollecter(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private ulong unionId_;
    /// <summary>
    ///玩家所属联盟Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "unionName" field.</summary>
    public const int UnionNameFieldNumber = 3;
    private string unionName_ = "";
    /// <summary>
    ///联盟名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerName" field.</summary>
    public const int PlayerNameFieldNumber = 4;
    private string playerName_ = "";
    /// <summary>
    ///玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private uint speed_;
    /// <summary>
    ///采集速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "curNum" field.</summary>
    public const int CurNumFieldNumber = 6;
    private uint curNum_;
    /// <summary>
    ///当前采集量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurNum {
      get { return curNum_; }
      set {
        curNum_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 7;
    private uint totalNum_;
    /// <summary>
    ///总采集量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "troopId" field.</summary>
    public const int TroopIdFieldNumber = 8;
    private ulong troopId_;
    /// <summary>
    ///采集的部队Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TroopId {
      get { return troopId_; }
      set {
        troopId_ = value;
      }
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 9;
    private ulong entityId_;
    /// <summary>
    ///部队在世界的entityId
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsCollecter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsCollecter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (UnionId != other.UnionId) return false;
      if (UnionName != other.UnionName) return false;
      if (PlayerName != other.PlayerName) return false;
      if (Speed != other.Speed) return false;
      if (CurNum != other.CurNum) return false;
      if (TotalNum != other.TotalNum) return false;
      if (TroopId != other.TroopId) return false;
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (CurNum != 0) hash ^= CurNum.GetHashCode();
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (TroopId != 0UL) hash ^= TroopId.GetHashCode();
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (UnionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UnionName);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlayerName);
      }
      if (Speed != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Speed);
      }
      if (CurNum != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CurNum);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TotalNum);
      }
      if (TroopId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TroopId);
      }
      if (EntityId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Speed);
      }
      if (CurNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurNum);
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalNum);
      }
      if (TroopId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TroopId);
      }
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsCollecter other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.CurNum != 0) {
        CurNum = other.CurNum;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.TroopId != 0UL) {
        TroopId = other.TroopId;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 26: {
            UnionName = input.ReadString();
            break;
          }
          case 34: {
            PlayerName = input.ReadString();
            break;
          }
          case 40: {
            Speed = input.ReadUInt32();
            break;
          }
          case 48: {
            CurNum = input.ReadUInt32();
            break;
          }
          case 56: {
            TotalNum = input.ReadUInt32();
            break;
          }
          case 64: {
            TroopId = input.ReadUInt64();
            break;
          }
          case 72: {
            EntityId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsResInfo : pb::IMessage<WsResInfo> {
    private static readonly pb::MessageParser<WsResInfo> _parser = new pb::MessageParser<WsResInfo>(() => new WsResInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsResInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsResInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsResInfo(WsResInfo other) : this() {
      entityId_ = other.entityId_;
      resNum_ = other.resNum_;
      collecter_ = other.collecter_ != null ? other.collecter_.Clone() : null;
      ownerUnionName_ = other.ownerUnionName_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsResInfo Clone() {
      return new WsResInfo(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "resNum" field.</summary>
    public const int ResNumFieldNumber = 2;
    private uint resNum_;
    /// <summary>
    ///资源剩余量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResNum {
      get { return resNum_; }
      set {
        resNum_ = value;
      }
    }

    /// <summary>Field number for the "collecter" field.</summary>
    public const int CollecterFieldNumber = 3;
    private global::SLG.WsCollecter collecter_;
    /// <summary>
    ///采集者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsCollecter Collecter {
      get { return collecter_; }
      set {
        collecter_ = value;
      }
    }

    /// <summary>Field number for the "ownerUnionName" field.</summary>
    public const int OwnerUnionNameFieldNumber = 4;
    private string ownerUnionName_ = "";
    /// <summary>
    ///所属联盟名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUnionName {
      get { return ownerUnionName_; }
      set {
        ownerUnionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 5;
    private float posX_;
    /// <summary>
    ///返回采集中的军队的位置时需要坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 6;
    private float posY_;
    /// <summary>
    ///返回采集中的军队的位置时需要坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsResInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsResInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (ResNum != other.ResNum) return false;
      if (!object.Equals(Collecter, other.Collecter)) return false;
      if (OwnerUnionName != other.OwnerUnionName) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (ResNum != 0) hash ^= ResNum.GetHashCode();
      if (collecter_ != null) hash ^= Collecter.GetHashCode();
      if (OwnerUnionName.Length != 0) hash ^= OwnerUnionName.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (ResNum != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ResNum);
      }
      if (collecter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Collecter);
      }
      if (OwnerUnionName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OwnerUnionName);
      }
      if (PosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (ResNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResNum);
      }
      if (collecter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collecter);
      }
      if (OwnerUnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUnionName);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsResInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.ResNum != 0) {
        ResNum = other.ResNum;
      }
      if (other.collecter_ != null) {
        if (collecter_ == null) {
          Collecter = new global::SLG.WsCollecter();
        }
        Collecter.MergeFrom(other.Collecter);
      }
      if (other.OwnerUnionName.Length != 0) {
        OwnerUnionName = other.OwnerUnionName;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 16: {
            ResNum = input.ReadUInt32();
            break;
          }
          case 26: {
            if (collecter_ == null) {
              Collecter = new global::SLG.WsCollecter();
            }
            input.ReadMessage(Collecter);
            break;
          }
          case 34: {
            OwnerUnionName = input.ReadString();
            break;
          }
          case 45: {
            PosX = input.ReadFloat();
            break;
          }
          case 53: {
            PosY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// zhwl 部队的统帅和士兵信息
  /// </summary>
  public sealed partial class Troop : pb::IMessage<Troop> {
    private static readonly pb::MessageParser<Troop> _parser = new pb::MessageParser<Troop>(() => new Troop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Troop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Troop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Troop(Troop other) : this() {
      troopunits_ = other.troopunits_.Clone();
      path_ = other.path_.Clone();
      tarEntityId_ = other.tarEntityId_;
      operate_ = other.operate_;
      transferGate1_ = other.transferGate1_;
      transferGate2_ = other.transferGate2_;
      battlePara_ = other.battlePara_ != null ? other.battlePara_.Clone() : null;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Troop Clone() {
      return new Troop(this);
    }

    /// <summary>Field number for the "troopunits" field.</summary>
    public const int TroopunitsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.TroopUnit> _repeated_troopunits_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.TroopUnit.Parser);
    private readonly pbc::RepeatedField<global::SLG.TroopUnit> troopunits_ = new pbc::RepeatedField<global::SLG.TroopUnit>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.TroopUnit> Troopunits {
      get { return troopunits_; }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.vect2> _repeated_path_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.vect2.Parser);
    private readonly pbc::RepeatedField<global::SLG.vect2> path_ = new pbc::RepeatedField<global::SLG.vect2>();
    /// <summary>
    ///路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.vect2> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "tarEntityId" field.</summary>
    public const int TarEntityIdFieldNumber = 3;
    private ulong tarEntityId_;
    /// <summary>
    ///行军目标Id 可能为空 点地改变目的地等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TarEntityId {
      get { return tarEntityId_; }
      set {
        tarEntityId_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 4;
    private uint operate_;
    /// <summary>
    ///行军目的变换目的地 采集 攻击等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "transferGate1" field.</summary>
    public const int TransferGate1FieldNumber = 5;
    private ulong transferGate1_;
    /// <summary>
    ///传送门1 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate1 {
      get { return transferGate1_; }
      set {
        transferGate1_ = value;
      }
    }

    /// <summary>Field number for the "transferGate2" field.</summary>
    public const int TransferGate2FieldNumber = 6;
    private ulong transferGate2_;
    /// <summary>
    ///传送门2 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate2 {
      get { return transferGate2_; }
      set {
        transferGate2_ = value;
      }
    }

    /// <summary>Field number for the "battlePara" field.</summary>
    public const int BattleParaFieldNumber = 7;
    private global::SLG.WsBattlePara battlePara_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsBattlePara BattlePara {
      get { return battlePara_; }
      set {
        battlePara_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 8;
    private uint param_;
    /// <summary>
    ///附带参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Troop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Troop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!troopunits_.Equals(other.troopunits_)) return false;
      if(!path_.Equals(other.path_)) return false;
      if (TarEntityId != other.TarEntityId) return false;
      if (Operate != other.Operate) return false;
      if (TransferGate1 != other.TransferGate1) return false;
      if (TransferGate2 != other.TransferGate2) return false;
      if (!object.Equals(BattlePara, other.BattlePara)) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= troopunits_.GetHashCode();
      hash ^= path_.GetHashCode();
      if (TarEntityId != 0UL) hash ^= TarEntityId.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (TransferGate1 != 0UL) hash ^= TransferGate1.GetHashCode();
      if (TransferGate2 != 0UL) hash ^= TransferGate2.GetHashCode();
      if (battlePara_ != null) hash ^= BattlePara.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      troopunits_.WriteTo(output, _repeated_troopunits_codec);
      path_.WriteTo(output, _repeated_path_codec);
      if (TarEntityId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TarEntityId);
      }
      if (Operate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Operate);
      }
      if (TransferGate1 != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TransferGate2);
      }
      if (battlePara_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BattlePara);
      }
      if (Param != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += troopunits_.CalculateSize(_repeated_troopunits_codec);
      size += path_.CalculateSize(_repeated_path_codec);
      if (TarEntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TarEntityId);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Operate);
      }
      if (TransferGate1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate2);
      }
      if (battlePara_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattlePara);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Troop other) {
      if (other == null) {
        return;
      }
      troopunits_.Add(other.troopunits_);
      path_.Add(other.path_);
      if (other.TarEntityId != 0UL) {
        TarEntityId = other.TarEntityId;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.TransferGate1 != 0UL) {
        TransferGate1 = other.TransferGate1;
      }
      if (other.TransferGate2 != 0UL) {
        TransferGate2 = other.TransferGate2;
      }
      if (other.battlePara_ != null) {
        if (battlePara_ == null) {
          BattlePara = new global::SLG.WsBattlePara();
        }
        BattlePara.MergeFrom(other.BattlePara);
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            troopunits_.AddEntriesFrom(input, _repeated_troopunits_codec);
            break;
          }
          case 18: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 24: {
            TarEntityId = input.ReadUInt64();
            break;
          }
          case 32: {
            Operate = input.ReadUInt32();
            break;
          }
          case 40: {
            TransferGate1 = input.ReadUInt64();
            break;
          }
          case 48: {
            TransferGate2 = input.ReadUInt64();
            break;
          }
          case 58: {
            if (battlePara_ == null) {
              BattlePara = new global::SLG.WsBattlePara();
            }
            input.ReadMessage(BattlePara);
            break;
          }
          case 64: {
            Param = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单支部队
  /// </summary>
  public sealed partial class ConfigTroop : pb::IMessage<ConfigTroop> {
    private static readonly pb::MessageParser<ConfigTroop> _parser = new pb::MessageParser<ConfigTroop>(() => new ConfigTroop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigTroop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTroop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTroop(ConfigTroop other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      troopunits_ = other.troopunits_.Clone();
      activeSkills_ = other.activeSkills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTroop Clone() {
      return new ConfigTroop(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private uint type_;
    /// <summary>
    ///部队还是主城
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "troopunits" field.</summary>
    public const int TroopunitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SLG.TroopUnit> _repeated_troopunits_codec
        = pb::FieldCodec.ForMessage(26, global::SLG.TroopUnit.Parser);
    private readonly pbc::RepeatedField<global::SLG.TroopUnit> troopunits_ = new pbc::RepeatedField<global::SLG.TroopUnit>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.TroopUnit> Troopunits {
      get { return troopunits_; }
    }

    /// <summary>Field number for the "activeSkills" field.</summary>
    public const int ActiveSkillsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_activeSkills_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> activeSkills_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前上阵的一组主炮技能
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ActiveSkills {
      get { return activeSkills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigTroop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigTroop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if(!troopunits_.Equals(other.troopunits_)) return false;
      if(!activeSkills_.Equals(other.activeSkills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= troopunits_.GetHashCode();
      hash ^= activeSkills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Type);
      }
      troopunits_.WriteTo(output, _repeated_troopunits_codec);
      activeSkills_.WriteTo(output, _repeated_activeSkills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      size += troopunits_.CalculateSize(_repeated_troopunits_codec);
      size += activeSkills_.CalculateSize(_repeated_activeSkills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigTroop other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      troopunits_.Add(other.troopunits_);
      activeSkills_.Add(other.activeSkills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadUInt32();
            break;
          }
          case 26: {
            troopunits_.AddEntriesFrom(input, _repeated_troopunits_codec);
            break;
          }
          case 34:
          case 32: {
            activeSkills_.AddEntriesFrom(input, _repeated_activeSkills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///部队列表
  /// </summary>
  public sealed partial class ConfigTroopList : pb::IMessage<ConfigTroopList> {
    private static readonly pb::MessageParser<ConfigTroopList> _parser = new pb::MessageParser<ConfigTroopList>(() => new ConfigTroopList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigTroopList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTroopList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTroopList(ConfigTroopList other) : this() {
      troops_ = other.troops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigTroopList Clone() {
      return new ConfigTroopList(this);
    }

    /// <summary>Field number for the "troops" field.</summary>
    public const int TroopsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.ConfigTroop> _repeated_troops_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.ConfigTroop.Parser);
    private readonly pbc::RepeatedField<global::SLG.ConfigTroop> troops_ = new pbc::RepeatedField<global::SLG.ConfigTroop>();
    /// <summary>
    ///多支部队
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.ConfigTroop> Troops {
      get { return troops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigTroopList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigTroopList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!troops_.Equals(other.troops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= troops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      troops_.WriteTo(output, _repeated_troops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += troops_.CalculateSize(_repeated_troops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigTroopList other) {
      if (other == null) {
        return;
      }
      troops_.Add(other.troops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            troops_.AddEntriesFrom(input, _repeated_troops_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroopListReqPara : pb::IMessage<TroopListReqPara> {
    private static readonly pb::MessageParser<TroopListReqPara> _parser = new pb::MessageParser<TroopListReqPara>(() => new TroopListReqPara());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroopListReqPara> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopListReqPara() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopListReqPara(TroopListReqPara other) : this() {
      playerId_ = other.playerId_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroopListReqPara Clone() {
      return new TroopListReqPara(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::SLG.ConfigTroopType type_ = global::SLG.ConfigTroopType.ExpeditionArmy;
    /// <summary>
    ///获取那种功能的部队配置列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.ConfigTroopType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroopListReqPara);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroopListReqPara other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (Type != global::SLG.ConfigTroopType.ExpeditionArmy) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      if (Type != global::SLG.ConfigTroopType.ExpeditionArmy) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (Type != global::SLG.ConfigTroopType.ExpeditionArmy) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroopListReqPara other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.Type != global::SLG.ConfigTroopType.ExpeditionArmy) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 16: {
            Type = (global::SLG.ConfigTroopType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// zhwl 开始行军数据C2S
  /// </summary>
  public sealed partial class WsMarch : pb::IMessage<WsMarch> {
    private static readonly pb::MessageParser<WsMarch> _parser = new pb::MessageParser<WsMarch>(() => new WsMarch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsMarch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsMarch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsMarch(WsMarch other) : this() {
      entityId_ = other.entityId_;
      path_ = other.path_.Clone();
      tarEntityId_ = other.tarEntityId_;
      operate_ = other.operate_;
      transferGate1_ = other.transferGate1_;
      transferGate2_ = other.transferGate2_;
      battlePara_ = other.battlePara_ != null ? other.battlePara_.Clone() : null;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsMarch Clone() {
      return new WsMarch(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    ///部队Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.vect2> _repeated_path_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.vect2.Parser);
    private readonly pbc::RepeatedField<global::SLG.vect2> path_ = new pbc::RepeatedField<global::SLG.vect2>();
    /// <summary>
    ///路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.vect2> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "tarEntityId" field.</summary>
    public const int TarEntityIdFieldNumber = 3;
    private ulong tarEntityId_;
    /// <summary>
    ///行军目标Id 可能为空 点地改变目的地等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TarEntityId {
      get { return tarEntityId_; }
      set {
        tarEntityId_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 4;
    private uint operate_;
    /// <summary>
    ///行军目的变换目的地 采集 攻击等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "transferGate1" field.</summary>
    public const int TransferGate1FieldNumber = 5;
    private ulong transferGate1_;
    /// <summary>
    ///传送门1 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate1 {
      get { return transferGate1_; }
      set {
        transferGate1_ = value;
      }
    }

    /// <summary>Field number for the "transferGate2" field.</summary>
    public const int TransferGate2FieldNumber = 6;
    private ulong transferGate2_;
    /// <summary>
    ///传送门2 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate2 {
      get { return transferGate2_; }
      set {
        transferGate2_ = value;
      }
    }

    /// <summary>Field number for the "battlePara" field.</summary>
    public const int BattleParaFieldNumber = 7;
    private global::SLG.WsBattlePara battlePara_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsBattlePara BattlePara {
      get { return battlePara_; }
      set {
        battlePara_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 8;
    private uint param_;
    /// <summary>
    ///附带参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsMarch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsMarch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if(!path_.Equals(other.path_)) return false;
      if (TarEntityId != other.TarEntityId) return false;
      if (Operate != other.Operate) return false;
      if (TransferGate1 != other.TransferGate1) return false;
      if (TransferGate2 != other.TransferGate2) return false;
      if (!object.Equals(BattlePara, other.BattlePara)) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      hash ^= path_.GetHashCode();
      if (TarEntityId != 0UL) hash ^= TarEntityId.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (TransferGate1 != 0UL) hash ^= TransferGate1.GetHashCode();
      if (TransferGate2 != 0UL) hash ^= TransferGate2.GetHashCode();
      if (battlePara_ != null) hash ^= BattlePara.GetHashCode();
      if (Param != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (TarEntityId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TarEntityId);
      }
      if (Operate != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Operate);
      }
      if (TransferGate1 != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TransferGate2);
      }
      if (battlePara_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BattlePara);
      }
      if (Param != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (TarEntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TarEntityId);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Operate);
      }
      if (TransferGate1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate2);
      }
      if (battlePara_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattlePara);
      }
      if (Param != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsMarch other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      path_.Add(other.path_);
      if (other.TarEntityId != 0UL) {
        TarEntityId = other.TarEntityId;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.TransferGate1 != 0UL) {
        TransferGate1 = other.TransferGate1;
      }
      if (other.TransferGate2 != 0UL) {
        TransferGate2 = other.TransferGate2;
      }
      if (other.battlePara_ != null) {
        if (battlePara_ == null) {
          BattlePara = new global::SLG.WsBattlePara();
        }
        BattlePara.MergeFrom(other.BattlePara);
      }
      if (other.Param != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 18: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 24: {
            TarEntityId = input.ReadUInt64();
            break;
          }
          case 32: {
            Operate = input.ReadUInt32();
            break;
          }
          case 40: {
            TransferGate1 = input.ReadUInt64();
            break;
          }
          case 48: {
            TransferGate2 = input.ReadUInt64();
            break;
          }
          case 58: {
            if (battlePara_ == null) {
              BattlePara = new global::SLG.WsBattlePara();
            }
            input.ReadMessage(BattlePara);
            break;
          }
          case 64: {
            Param = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OperateMsg : pb::IMessage<OperateMsg> {
    private static readonly pb::MessageParser<OperateMsg> _parser = new pb::MessageParser<OperateMsg>(() => new OperateMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperateMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateMsg(OperateMsg other) : this() {
      operate_ = other.operate_;
      arg1_ = other.arg1_;
      arg2_ = other.arg2_;
      arg3_ = other.arg3_;
      arg4_ = other.arg4_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperateMsg Clone() {
      return new OperateMsg(this);
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 1;
    private int operate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "arg1" field.</summary>
    public const int Arg1FieldNumber = 2;
    private ulong arg1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Arg1 {
      get { return arg1_; }
      set {
        arg1_ = value;
      }
    }

    /// <summary>Field number for the "arg2" field.</summary>
    public const int Arg2FieldNumber = 3;
    private ulong arg2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Arg2 {
      get { return arg2_; }
      set {
        arg2_ = value;
      }
    }

    /// <summary>Field number for the "arg3" field.</summary>
    public const int Arg3FieldNumber = 4;
    private ulong arg3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Arg3 {
      get { return arg3_; }
      set {
        arg3_ = value;
      }
    }

    /// <summary>Field number for the "arg4" field.</summary>
    public const int Arg4FieldNumber = 5;
    private ulong arg4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Arg4 {
      get { return arg4_; }
      set {
        arg4_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperateMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperateMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operate != other.Operate) return false;
      if (Arg1 != other.Arg1) return false;
      if (Arg2 != other.Arg2) return false;
      if (Arg3 != other.Arg3) return false;
      if (Arg4 != other.Arg4) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (Arg1 != 0UL) hash ^= Arg1.GetHashCode();
      if (Arg2 != 0UL) hash ^= Arg2.GetHashCode();
      if (Arg3 != 0UL) hash ^= Arg3.GetHashCode();
      if (Arg4 != 0UL) hash ^= Arg4.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operate != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Operate);
      }
      if (Arg1 != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Arg1);
      }
      if (Arg2 != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Arg2);
      }
      if (Arg3 != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Arg3);
      }
      if (Arg4 != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Arg4);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      if (Arg1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Arg1);
      }
      if (Arg2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Arg2);
      }
      if (Arg3 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Arg3);
      }
      if (Arg4 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Arg4);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperateMsg other) {
      if (other == null) {
        return;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.Arg1 != 0UL) {
        Arg1 = other.Arg1;
      }
      if (other.Arg2 != 0UL) {
        Arg2 = other.Arg2;
      }
      if (other.Arg3 != 0UL) {
        Arg3 = other.Arg3;
      }
      if (other.Arg4 != 0UL) {
        Arg4 = other.Arg4;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Operate = input.ReadInt32();
            break;
          }
          case 16: {
            Arg1 = input.ReadUInt64();
            break;
          }
          case 24: {
            Arg2 = input.ReadUInt64();
            break;
          }
          case 32: {
            Arg3 = input.ReadUInt64();
            break;
          }
          case 40: {
            Arg4 = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceValue : pb::IMessage<ResourceValue> {
    private static readonly pb::MessageParser<ResourceValue> _parser = new pb::MessageParser<ResourceValue>(() => new ResourceValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceValue(ResourceValue other) : this() {
      resType_ = other.resType_;
      resValue_ = other.resValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceValue Clone() {
      return new ResourceValue(this);
    }

    /// <summary>Field number for the "resType" field.</summary>
    public const int ResTypeFieldNumber = 1;
    private uint resType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResType {
      get { return resType_; }
      set {
        resType_ = value;
      }
    }

    /// <summary>Field number for the "resValue" field.</summary>
    public const int ResValueFieldNumber = 2;
    private ulong resValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ResValue {
      get { return resValue_; }
      set {
        resValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResType != other.ResType) return false;
      if (ResValue != other.ResValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResType != 0) hash ^= ResType.GetHashCode();
      if (ResValue != 0UL) hash ^= ResValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ResType);
      }
      if (ResValue != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ResValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResType);
      }
      if (ResValue != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ResValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceValue other) {
      if (other == null) {
        return;
      }
      if (other.ResType != 0) {
        ResType = other.ResType;
      }
      if (other.ResValue != 0UL) {
        ResValue = other.ResValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResType = input.ReadUInt32();
            break;
          }
          case 16: {
            ResValue = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsObjList : pb::IMessage<WsObjList> {
    private static readonly pb::MessageParser<WsObjList> _parser = new pb::MessageParser<WsObjList>(() => new WsObjList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsObjList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjList(WsObjList other) : this() {
      addList_ = other.addList_.Clone();
      delList_ = other.delList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjList Clone() {
      return new WsObjList(this);
    }

    /// <summary>Field number for the "addList" field.</summary>
    public const int AddListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.WsObjInfo> _repeated_addList_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.WsObjInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.WsObjInfo> addList_ = new pbc::RepeatedField<global::SLG.WsObjInfo>();
    /// <summary>
    ///新进入视野的Obj列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.WsObjInfo> AddList {
      get { return addList_; }
    }

    /// <summary>Field number for the "delList" field.</summary>
    public const int DelListFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_delList_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> delList_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    ///离开视野的Obj列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> DelList {
      get { return delList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsObjList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsObjList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addList_.Equals(other.addList_)) return false;
      if(!delList_.Equals(other.delList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addList_.GetHashCode();
      hash ^= delList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addList_.WriteTo(output, _repeated_addList_codec);
      delList_.WriteTo(output, _repeated_delList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addList_.CalculateSize(_repeated_addList_codec);
      size += delList_.CalculateSize(_repeated_delList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsObjList other) {
      if (other == null) {
        return;
      }
      addList_.Add(other.addList_);
      delList_.Add(other.delList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addList_.AddEntriesFrom(input, _repeated_addList_codec);
            break;
          }
          case 18:
          case 16: {
            delList_.AddEntriesFrom(input, _repeated_delList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsObjId : pb::IMessage<WsObjId> {
    private static readonly pb::MessageParser<WsObjId> _parser = new pb::MessageParser<WsObjId>(() => new WsObjId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsObjId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjId(WsObjId other) : this() {
      entityId_ = other.entityId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsObjId Clone() {
      return new WsObjId(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsObjId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsObjId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsObjId other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsUnionList : pb::IMessage<WsUnionList> {
    private static readonly pb::MessageParser<WsUnionList> _parser = new pb::MessageParser<WsUnionList>(() => new WsUnionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsUnionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsUnionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsUnionList(WsUnionList other) : this() {
      unions_ = other.unions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsUnionList Clone() {
      return new WsUnionList(this);
    }

    /// <summary>Field number for the "unions" field.</summary>
    public const int UnionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.WsObjInfo> _repeated_unions_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.WsObjInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.WsObjInfo> unions_ = new pbc::RepeatedField<global::SLG.WsObjInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.WsObjInfo> Unions {
      get { return unions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsUnionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsUnionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!unions_.Equals(other.unions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= unions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unions_.WriteTo(output, _repeated_unions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unions_.CalculateSize(_repeated_unions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsUnionList other) {
      if (other == null) {
        return;
      }
      unions_.Add(other.unions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            unions_.AddEntriesFrom(input, _repeated_unions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsTroopBasicInfo : pb::IMessage<WsTroopBasicInfo> {
    private static readonly pb::MessageParser<WsTroopBasicInfo> _parser = new pb::MessageParser<WsTroopBasicInfo>(() => new WsTroopBasicInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsTroopBasicInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTroopBasicInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTroopBasicInfo(WsTroopBasicInfo other) : this() {
      entityId_ = other.entityId_;
      state_ = other.state_;
      leaderId_ = other.leaderId_;
      startPosX_ = other.startPosX_;
      startPosY_ = other.startPosY_;
      endPosX_ = other.endPosX_;
      endPosY_ = other.endPosY_;
      curPosX_ = other.curPosX_;
      curPosY_ = other.curPosY_;
      speed_ = other.speed_;
      totalNum_ = other.totalNum_;
      curLoad_ = other.curLoad_;
      maxLoad_ = other.maxLoad_;
      timeMs_ = other.timeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTroopBasicInfo Clone() {
      return new WsTroopBasicInfo(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    ///部队基本信息，用于UI的显示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///部队状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "leaderId" field.</summary>
    public const int LeaderIdFieldNumber = 3;
    private int leaderId_;
    /// <summary>
    ///构成成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "startPosX" field.</summary>
    public const int StartPosXFieldNumber = 4;
    private float startPosX_;
    /// <summary>
    ///行军起始点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartPosX {
      get { return startPosX_; }
      set {
        startPosX_ = value;
      }
    }

    /// <summary>Field number for the "startPosY" field.</summary>
    public const int StartPosYFieldNumber = 5;
    private float startPosY_;
    /// <summary>
    ///行军起始点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartPosY {
      get { return startPosY_; }
      set {
        startPosY_ = value;
      }
    }

    /// <summary>Field number for the "endPosX" field.</summary>
    public const int EndPosXFieldNumber = 6;
    private float endPosX_;
    /// <summary>
    ///行军结束点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndPosX {
      get { return endPosX_; }
      set {
        endPosX_ = value;
      }
    }

    /// <summary>Field number for the "endPosY" field.</summary>
    public const int EndPosYFieldNumber = 7;
    private float endPosY_;
    /// <summary>
    ///行军结束点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndPosY {
      get { return endPosY_; }
      set {
        endPosY_ = value;
      }
    }

    /// <summary>Field number for the "curPosX" field.</summary>
    public const int CurPosXFieldNumber = 8;
    private float curPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurPosX {
      get { return curPosX_; }
      set {
        curPosX_ = value;
      }
    }

    /// <summary>Field number for the "curPosY" field.</summary>
    public const int CurPosYFieldNumber = 9;
    private float curPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurPosY {
      get { return curPosY_; }
      set {
        curPosY_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 10;
    private float speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "totalNum" field.</summary>
    public const int TotalNumFieldNumber = 11;
    private int totalNum_;
    /// <summary>
    ///兵力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalNum {
      get { return totalNum_; }
      set {
        totalNum_ = value;
      }
    }

    /// <summary>Field number for the "curLoad" field.</summary>
    public const int CurLoadFieldNumber = 12;
    private int curLoad_;
    /// <summary>
    ///当前负载
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurLoad {
      get { return curLoad_; }
      set {
        curLoad_ = value;
      }
    }

    /// <summary>Field number for the "maxLoad" field.</summary>
    public const int MaxLoadFieldNumber = 13;
    private int maxLoad_;
    /// <summary>
    ///负载上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLoad {
      get { return maxLoad_; }
      set {
        maxLoad_ = value;
      }
    }

    /// <summary>Field number for the "time_ms" field.</summary>
    public const int TimeMsFieldNumber = 21;
    private ulong timeMs_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimeMs {
      get { return timeMs_; }
      set {
        timeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsTroopBasicInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsTroopBasicInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (State != other.State) return false;
      if (LeaderId != other.LeaderId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartPosX, other.StartPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartPosY, other.StartPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndPosX, other.EndPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndPosY, other.EndPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurPosX, other.CurPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurPosY, other.CurPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (TotalNum != other.TotalNum) return false;
      if (CurLoad != other.CurLoad) return false;
      if (MaxLoad != other.MaxLoad) return false;
      if (TimeMs != other.TimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (LeaderId != 0) hash ^= LeaderId.GetHashCode();
      if (StartPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartPosX);
      if (StartPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartPosY);
      if (EndPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndPosX);
      if (EndPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndPosY);
      if (CurPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurPosX);
      if (CurPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurPosY);
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
      if (CurLoad != 0) hash ^= CurLoad.GetHashCode();
      if (MaxLoad != 0) hash ^= MaxLoad.GetHashCode();
      if (TimeMs != 0UL) hash ^= TimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (LeaderId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LeaderId);
      }
      if (StartPosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StartPosX);
      }
      if (StartPosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(StartPosY);
      }
      if (EndPosX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(EndPosX);
      }
      if (EndPosY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(EndPosY);
      }
      if (CurPosX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CurPosX);
      }
      if (CurPosY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(CurPosY);
      }
      if (Speed != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Speed);
      }
      if (TotalNum != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TotalNum);
      }
      if (CurLoad != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurLoad);
      }
      if (MaxLoad != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MaxLoad);
      }
      if (TimeMs != 0UL) {
        output.WriteRawTag(168, 1);
        output.WriteUInt64(TimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (LeaderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeaderId);
      }
      if (StartPosX != 0F) {
        size += 1 + 4;
      }
      if (StartPosY != 0F) {
        size += 1 + 4;
      }
      if (EndPosX != 0F) {
        size += 1 + 4;
      }
      if (EndPosY != 0F) {
        size += 1 + 4;
      }
      if (CurPosX != 0F) {
        size += 1 + 4;
      }
      if (CurPosY != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (TotalNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
      }
      if (CurLoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurLoad);
      }
      if (MaxLoad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLoad);
      }
      if (TimeMs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsTroopBasicInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.LeaderId != 0) {
        LeaderId = other.LeaderId;
      }
      if (other.StartPosX != 0F) {
        StartPosX = other.StartPosX;
      }
      if (other.StartPosY != 0F) {
        StartPosY = other.StartPosY;
      }
      if (other.EndPosX != 0F) {
        EndPosX = other.EndPosX;
      }
      if (other.EndPosY != 0F) {
        EndPosY = other.EndPosY;
      }
      if (other.CurPosX != 0F) {
        CurPosX = other.CurPosX;
      }
      if (other.CurPosY != 0F) {
        CurPosY = other.CurPosY;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.TotalNum != 0) {
        TotalNum = other.TotalNum;
      }
      if (other.CurLoad != 0) {
        CurLoad = other.CurLoad;
      }
      if (other.MaxLoad != 0) {
        MaxLoad = other.MaxLoad;
      }
      if (other.TimeMs != 0UL) {
        TimeMs = other.TimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            LeaderId = input.ReadInt32();
            break;
          }
          case 37: {
            StartPosX = input.ReadFloat();
            break;
          }
          case 45: {
            StartPosY = input.ReadFloat();
            break;
          }
          case 53: {
            EndPosX = input.ReadFloat();
            break;
          }
          case 61: {
            EndPosY = input.ReadFloat();
            break;
          }
          case 69: {
            CurPosX = input.ReadFloat();
            break;
          }
          case 77: {
            CurPosY = input.ReadFloat();
            break;
          }
          case 85: {
            Speed = input.ReadFloat();
            break;
          }
          case 88: {
            TotalNum = input.ReadInt32();
            break;
          }
          case 96: {
            CurLoad = input.ReadInt32();
            break;
          }
          case 104: {
            MaxLoad = input.ReadInt32();
            break;
          }
          case 168: {
            TimeMs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsTroopDetail : pb::IMessage<WsTroopDetail> {
    private static readonly pb::MessageParser<WsTroopDetail> _parser = new pb::MessageParser<WsTroopDetail>(() => new WsTroopDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsTroopDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTroopDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTroopDetail(WsTroopDetail other) : this() {
      state_ = other.state_;
      resInfo_ = other.resInfo_ != null ? other.resInfo_.Clone() : null;
      marchInfo_ = other.marchInfo_ != null ? other.marchInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTroopDetail Clone() {
      return new WsTroopDetail(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///部队状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "resInfo" field.</summary>
    public const int ResInfoFieldNumber = 2;
    private global::SLG.WsResInfo resInfo_;
    /// <summary>
    ///处于采集状态，返回资源信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsResInfo ResInfo {
      get { return resInfo_; }
      set {
        resInfo_ = value;
      }
    }

    /// <summary>Field number for the "marchInfo" field.</summary>
    public const int MarchInfoFieldNumber = 3;
    private global::SLG.WsObjInfo marchInfo_;
    /// <summary>
    ///处于行军状态，返回行军信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsObjInfo MarchInfo {
      get { return marchInfo_; }
      set {
        marchInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsTroopDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsTroopDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (!object.Equals(ResInfo, other.ResInfo)) return false;
      if (!object.Equals(MarchInfo, other.MarchInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (resInfo_ != null) hash ^= ResInfo.GetHashCode();
      if (marchInfo_ != null) hash ^= MarchInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (resInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResInfo);
      }
      if (marchInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MarchInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (resInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResInfo);
      }
      if (marchInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarchInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsTroopDetail other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.resInfo_ != null) {
        if (resInfo_ == null) {
          ResInfo = new global::SLG.WsResInfo();
        }
        ResInfo.MergeFrom(other.ResInfo);
      }
      if (other.marchInfo_ != null) {
        if (marchInfo_ == null) {
          MarchInfo = new global::SLG.WsObjInfo();
        }
        MarchInfo.MergeFrom(other.MarchInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 18: {
            if (resInfo_ == null) {
              ResInfo = new global::SLG.WsResInfo();
            }
            input.ReadMessage(ResInfo);
            break;
          }
          case 26: {
            if (marchInfo_ == null) {
              MarchInfo = new global::SLG.WsObjInfo();
            }
            input.ReadMessage(MarchInfo);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsPlayerInfo : pb::IMessage<WsPlayerInfo> {
    private static readonly pb::MessageParser<WsPlayerInfo> _parser = new pb::MessageParser<WsPlayerInfo>(() => new WsPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsPlayerInfo(WsPlayerInfo other) : this() {
      castleInfo_ = other.castleInfo_ != null ? other.castleInfo_.Clone() : null;
      troops_ = other.troops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsPlayerInfo Clone() {
      return new WsPlayerInfo(this);
    }

    /// <summary>Field number for the "castleInfo" field.</summary>
    public const int CastleInfoFieldNumber = 1;
    private global::SLG.WsObjInfo castleInfo_;
    /// <summary>
    ///主城状态信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsObjInfo CastleInfo {
      get { return castleInfo_; }
      set {
        castleInfo_ = value;
      }
    }

    /// <summary>Field number for the "troops" field.</summary>
    public const int TroopsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.WsTroopBasicInfo> _repeated_troops_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.WsTroopBasicInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.WsTroopBasicInfo> troops_ = new pbc::RepeatedField<global::SLG.WsTroopBasicInfo>();
    /// <summary>
    ///玩家部队信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.WsTroopBasicInfo> Troops {
      get { return troops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CastleInfo, other.CastleInfo)) return false;
      if(!troops_.Equals(other.troops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (castleInfo_ != null) hash ^= CastleInfo.GetHashCode();
      hash ^= troops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (castleInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CastleInfo);
      }
      troops_.WriteTo(output, _repeated_troops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (castleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CastleInfo);
      }
      size += troops_.CalculateSize(_repeated_troops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.castleInfo_ != null) {
        if (castleInfo_ == null) {
          CastleInfo = new global::SLG.WsObjInfo();
        }
        CastleInfo.MergeFrom(other.CastleInfo);
      }
      troops_.Add(other.troops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (castleInfo_ == null) {
              CastleInfo = new global::SLG.WsObjInfo();
            }
            input.ReadMessage(CastleInfo);
            break;
          }
          case 18: {
            troops_.AddEntriesFrom(input, _repeated_troops_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GMCreateRoleReq : pb::IMessage<GMCreateRoleReq> {
    private static readonly pb::MessageParser<GMCreateRoleReq> _parser = new pb::MessageParser<GMCreateRoleReq>(() => new GMCreateRoleReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GMCreateRoleReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMCreateRoleReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMCreateRoleReq(GMCreateRoleReq other) : this() {
      accId_ = other.accId_;
      roleName_ = other.roleName_;
      playerId_ = other.playerId_;
      frontendId_ = other.frontendId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GMCreateRoleReq Clone() {
      return new GMCreateRoleReq(this);
    }

    /// <summary>Field number for the "acc_id" field.</summary>
    public const int AccIdFieldNumber = 1;
    private string accId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccId {
      get { return accId_; }
      set {
        accId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_name" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 3;
    private ulong playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "frontendId" field.</summary>
    public const int FrontendIdFieldNumber = 4;
    private string frontendId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrontendId {
      get { return frontendId_; }
      set {
        frontendId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GMCreateRoleReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GMCreateRoleReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccId != other.AccId) return false;
      if (RoleName != other.RoleName) return false;
      if (PlayerId != other.PlayerId) return false;
      if (FrontendId != other.FrontendId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccId.Length != 0) hash ^= AccId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      if (FrontendId.Length != 0) hash ^= FrontendId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
      if (PlayerId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(PlayerId);
      }
      if (FrontendId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FrontendId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      if (FrontendId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrontendId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GMCreateRoleReq other) {
      if (other == null) {
        return;
      }
      if (other.AccId.Length != 0) {
        AccId = other.AccId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      if (other.FrontendId.Length != 0) {
        FrontendId = other.FrontendId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccId = input.ReadString();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
          case 24: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 34: {
            FrontendId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家城堡移动
  /// </summary>
  public sealed partial class WsCastleMove : pb::IMessage<WsCastleMove> {
    private static readonly pb::MessageParser<WsCastleMove> _parser = new pb::MessageParser<WsCastleMove>(() => new WsCastleMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsCastleMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsCastleMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsCastleMove(WsCastleMove other) : this() {
      tarPos_ = other.tarPos_ != null ? other.tarPos_.Clone() : null;
      tarEntityId_ = other.tarEntityId_;
      operate_ = other.operate_;
      transferGate1_ = other.transferGate1_;
      transferGate2_ = other.transferGate2_;
      battlePara_ = other.battlePara_ != null ? other.battlePara_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsCastleMove Clone() {
      return new WsCastleMove(this);
    }

    /// <summary>Field number for the "tarPos" field.</summary>
    public const int TarPosFieldNumber = 1;
    private global::SLG.vect2 tarPos_;
    /// <summary>
    ///目标地点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.vect2 TarPos {
      get { return tarPos_; }
      set {
        tarPos_ = value;
      }
    }

    /// <summary>Field number for the "tarEntityId" field.</summary>
    public const int TarEntityIdFieldNumber = 2;
    private ulong tarEntityId_;
    /// <summary>
    ///目标Id 可能为空 点地改变目的地等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TarEntityId {
      get { return tarEntityId_; }
      set {
        tarEntityId_ = value;
      }
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 3;
    private global::SLG.WsOperateType operate_ = global::SLG.WsOperateType.OperateMove;
    /// <summary>
    ///目的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsOperateType Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "transferGate1" field.</summary>
    public const int TransferGate1FieldNumber = 4;
    private ulong transferGate1_;
    /// <summary>
    ///传送门1 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate1 {
      get { return transferGate1_; }
      set {
        transferGate1_ = value;
      }
    }

    /// <summary>Field number for the "transferGate2" field.</summary>
    public const int TransferGate2FieldNumber = 5;
    private ulong transferGate2_;
    /// <summary>
    ///传送门2 Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TransferGate2 {
      get { return transferGate2_; }
      set {
        transferGate2_ = value;
      }
    }

    /// <summary>Field number for the "battlePara" field.</summary>
    public const int BattleParaFieldNumber = 6;
    private global::SLG.WsBattlePara battlePara_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.WsBattlePara BattlePara {
      get { return battlePara_; }
      set {
        battlePara_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsCastleMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsCastleMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TarPos, other.TarPos)) return false;
      if (TarEntityId != other.TarEntityId) return false;
      if (Operate != other.Operate) return false;
      if (TransferGate1 != other.TransferGate1) return false;
      if (TransferGate2 != other.TransferGate2) return false;
      if (!object.Equals(BattlePara, other.BattlePara)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tarPos_ != null) hash ^= TarPos.GetHashCode();
      if (TarEntityId != 0UL) hash ^= TarEntityId.GetHashCode();
      if (Operate != global::SLG.WsOperateType.OperateMove) hash ^= Operate.GetHashCode();
      if (TransferGate1 != 0UL) hash ^= TransferGate1.GetHashCode();
      if (TransferGate2 != 0UL) hash ^= TransferGate2.GetHashCode();
      if (battlePara_ != null) hash ^= BattlePara.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tarPos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TarPos);
      }
      if (TarEntityId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TarEntityId);
      }
      if (Operate != global::SLG.WsOperateType.OperateMove) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Operate);
      }
      if (TransferGate1 != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TransferGate2);
      }
      if (battlePara_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BattlePara);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tarPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TarPos);
      }
      if (TarEntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TarEntityId);
      }
      if (Operate != global::SLG.WsOperateType.OperateMove) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
      }
      if (TransferGate1 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate1);
      }
      if (TransferGate2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TransferGate2);
      }
      if (battlePara_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattlePara);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsCastleMove other) {
      if (other == null) {
        return;
      }
      if (other.tarPos_ != null) {
        if (tarPos_ == null) {
          TarPos = new global::SLG.vect2();
        }
        TarPos.MergeFrom(other.TarPos);
      }
      if (other.TarEntityId != 0UL) {
        TarEntityId = other.TarEntityId;
      }
      if (other.Operate != global::SLG.WsOperateType.OperateMove) {
        Operate = other.Operate;
      }
      if (other.TransferGate1 != 0UL) {
        TransferGate1 = other.TransferGate1;
      }
      if (other.TransferGate2 != 0UL) {
        TransferGate2 = other.TransferGate2;
      }
      if (other.battlePara_ != null) {
        if (battlePara_ == null) {
          BattlePara = new global::SLG.WsBattlePara();
        }
        BattlePara.MergeFrom(other.BattlePara);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tarPos_ == null) {
              TarPos = new global::SLG.vect2();
            }
            input.ReadMessage(TarPos);
            break;
          }
          case 16: {
            TarEntityId = input.ReadUInt64();
            break;
          }
          case 24: {
            Operate = (global::SLG.WsOperateType) input.ReadEnum();
            break;
          }
          case 32: {
            TransferGate1 = input.ReadUInt64();
            break;
          }
          case 40: {
            TransferGate2 = input.ReadUInt64();
            break;
          }
          case 50: {
            if (battlePara_ == null) {
              BattlePara = new global::SLG.WsBattlePara();
            }
            input.ReadMessage(BattlePara);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsTransferGateInfo : pb::IMessage<WsTransferGateInfo> {
    private static readonly pb::MessageParser<WsTransferGateInfo> _parser = new pb::MessageParser<WsTransferGateInfo>(() => new WsTransferGateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsTransferGateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTransferGateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTransferGateInfo(WsTransferGateInfo other) : this() {
      entityId_ = other.entityId_;
      unionId_ = other.unionId_;
      resId_ = other.resId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTransferGateInfo Clone() {
      return new WsTransferGateInfo(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    ///本地图的唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "union_Id" field.</summary>
    public const int UnionIdFieldNumber = 2;
    private ulong unionId_;
    /// <summary>
    ///联盟Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "resId" field.</summary>
    public const int ResIdFieldNumber = 3;
    private int resId_;
    /// <summary>
    ///资源Id，表中id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResId {
      get { return resId_; }
      set {
        resId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsTransferGateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsTransferGateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (UnionId != other.UnionId) return false;
      if (ResId != other.ResId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (UnionId != 0UL) hash ^= UnionId.GetHashCode();
      if (ResId != 0) hash ^= ResId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (UnionId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UnionId);
      }
      if (ResId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ResId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (UnionId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnionId);
      }
      if (ResId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsTransferGateInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.UnionId != 0UL) {
        UnionId = other.UnionId;
      }
      if (other.ResId != 0) {
        ResId = other.ResId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 16: {
            UnionId = input.ReadUInt64();
            break;
          }
          case 24: {
            ResId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsTransferGateList : pb::IMessage<WsTransferGateList> {
    private static readonly pb::MessageParser<WsTransferGateList> _parser = new pb::MessageParser<WsTransferGateList>(() => new WsTransferGateList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsTransferGateList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTransferGateList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTransferGateList(WsTransferGateList other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsTransferGateList Clone() {
      return new WsTransferGateList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.WsTransferGateInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.WsTransferGateInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.WsTransferGateInfo> list_ = new pbc::RepeatedField<global::SLG.WsTransferGateInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.WsTransferGateInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsTransferGateList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsTransferGateList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsTransferGateList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WsPath : pb::IMessage<WsPath> {
    private static readonly pb::MessageParser<WsPath> _parser = new pb::MessageParser<WsPath>(() => new WsPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WsPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsPath(WsPath other) : this() {
      point_ = other.point_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WsPath Clone() {
      return new WsPath(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.vect2> _repeated_point_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.vect2.Parser);
    private readonly pbc::RepeatedField<global::SLG.vect2> point_ = new pbc::RepeatedField<global::SLG.vect2>();
    /// <summary>
    ///路径
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.vect2> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WsPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WsPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WsPath other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchPara : pb::IMessage<SearchPara> {
    private static readonly pb::MessageParser<SearchPara> _parser = new pb::MessageParser<SearchPara>(() => new SearchPara());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchPara> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchPara() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchPara(SearchPara other) : this() {
      type_ = other.type_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchPara Clone() {
      return new SearchPara(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::SLG.SearchObjType type_ = global::SLG.SearchObjType.TypeMonster;
    /// <summary>
    ///搜索类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SLG.SearchObjType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///搜索等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchPara);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchPara other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::SLG.SearchObjType.TypeMonster) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::SLG.SearchObjType.TypeMonster) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::SLG.SearchObjType.TypeMonster) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchPara other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::SLG.SearchObjType.TypeMonster) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::SLG.SearchObjType) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchedObject : pb::IMessage<SearchedObject> {
    private static readonly pb::MessageParser<SearchedObject> _parser = new pb::MessageParser<SearchedObject>(() => new SearchedObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchedObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedObject(SearchedObject other) : this() {
      entityId_ = other.entityId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedObject Clone() {
      return new SearchedObject(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private ulong entityId_;
    /// <summary>
    ///本地图的唯一Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private float posY_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchedObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchedObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(EntityId);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchedObject other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0UL) {
        EntityId = other.EntityId;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadUInt64();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchedObjectList : pb::IMessage<SearchedObjectList> {
    private static readonly pb::MessageParser<SearchedObjectList> _parser = new pb::MessageParser<SearchedObjectList>(() => new SearchedObjectList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchedObjectList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedObjectList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedObjectList(SearchedObjectList other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchedObjectList Clone() {
      return new SearchedObjectList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.SearchedObject> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.SearchedObject.Parser);
    private readonly pbc::RepeatedField<global::SLG.SearchedObject> list_ = new pbc::RepeatedField<global::SLG.SearchedObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.SearchedObject> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchedObjectList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchedObjectList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchedObjectList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Bookmark : pb::IMessage<Bookmark> {
    private static readonly pb::MessageParser<Bookmark> _parser = new pb::MessageParser<Bookmark>(() => new Bookmark());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bookmark> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bookmark() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bookmark(Bookmark other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bookmark Clone() {
      return new Bookmark(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private uint x_;
    /// <summary>
    ///坐标x
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private uint y_;
    /// <summary>
    ///坐标y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bookmark);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bookmark other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bookmark other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            X = input.ReadUInt32();
            break;
          }
          case 32: {
            Y = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BookmarkList : pb::IMessage<BookmarkList> {
    private static readonly pb::MessageParser<BookmarkList> _parser = new pb::MessageParser<BookmarkList>(() => new BookmarkList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BookmarkList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookmarkList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookmarkList(BookmarkList other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BookmarkList Clone() {
      return new BookmarkList(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SLG.Bookmark> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::SLG.Bookmark.Parser);
    private readonly pbc::RepeatedField<global::SLG.Bookmark> list_ = new pbc::RepeatedField<global::SLG.Bookmark>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.Bookmark> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BookmarkList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BookmarkList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BookmarkList other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardInfo : pb::IMessage<RewardInfo> {
    private static readonly pb::MessageParser<RewardInfo> _parser = new pb::MessageParser<RewardInfo>(() => new RewardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo(RewardInfo other) : this() {
      type_ = other.type_;
      tid_ = other.tid_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardInfo Clone() {
      return new RewardInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///奖励的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private uint tid_;
    /// <summary>
    ///奖励的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tid {
      get { return tid_; }
      set {
        tid_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private float count_;
    /// <summary>
    ///奖励的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Tid != other.Tid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Count, other.Count)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Tid != 0) hash ^= Tid.GetHashCode();
      if (Count != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Count);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (Tid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Tid);
      }
      if (Count != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Tid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tid);
      }
      if (Count != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Tid != 0) {
        Tid = other.Tid;
      }
      if (other.Count != 0F) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 16: {
            Tid = input.ReadUInt32();
            break;
          }
          case 29: {
            Count = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetNewRewardReq : pb::IMessage<GetNewRewardReq> {
    private static readonly pb::MessageParser<GetNewRewardReq> _parser = new pb::MessageParser<GetNewRewardReq>(() => new GetNewRewardReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNewRewardReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SLG.MsgWorldsceneReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewRewardReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewRewardReq(GetNewRewardReq other) : this() {
      playerId_ = other.playerId_;
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewRewardReq Clone() {
      return new GetNewRewardReq(this);
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 1;
    private ulong playerId_;
    /// <summary>
    ///玩家Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SLG.RewardInfo> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::SLG.RewardInfo.Parser);
    private readonly pbc::RepeatedField<global::SLG.RewardInfo> list_ = new pbc::RepeatedField<global::SLG.RewardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SLG.RewardInfo> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNewRewardReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNewRewardReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerId != other.PlayerId) return false;
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerId != 0UL) hash ^= PlayerId.GetHashCode();
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PlayerId);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PlayerId);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNewRewardReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerId != 0UL) {
        PlayerId = other.PlayerId;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerId = input.ReadUInt64();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
